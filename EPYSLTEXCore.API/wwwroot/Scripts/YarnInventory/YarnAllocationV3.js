(function () {
    'use strict'
    var menuId, pageName, menuParam;
    var toolbarId, pageId, pageIdWithHash;
    var $pageEl, $divTblEl, $divDetailsEl, $toolbarEl, $tblMasterEl, tblMasterId, $tblMasterEl2, tblMasterId2, $formEl,
        $tblChildEl, tblChildId, $tblRevisedChildEl, tblRevisedChildId, $tblChildBookingEl, tblChildBookingId, $modalPlanningEl, $tblStockInfoEl, tblStockInfoId, $tblStockSummaryEl, tblStockSummaryId;
    var $tblQtyDetailEl, tblQtyDetailId, $modalQtyDetail;

    var divAdvanceFilterId, $divAdvanceFilterId;

    var status;
    var masterData;
    var stockData = [];
    var stockSummary = [];
    var stockSummaryTemp = [];
    var stockPipelineData = [];
    var stockPipelineSummary = [];
    var stockPipelineSummaryTemp = [];
    var selectedChildIndex;
    var _isYA = false,
        _isYAApprove = false,
        _isYAAck = false;
    var _isPipelineStock = false;
    var _statusObj = {
        Approve: false,
        Acknowledge: false,
        UnAcknowledge: false,
        UnAcknowledgeReason: "",
        Propose: false,
        Reject: false,
        RejectReason: "",
        ReAllocation: false,
        UnAckRevise: false,
        Revise: true
    };
    var _allocationChildId = 999999;
    var _yarnStockSetId = 0;
    var _allocationChildItemID = 0;
    var _isRevisedChild = false;
    var loadTimeMasterData = {};

    var selectedBookingChildID = 0;
    var selectedYBChildItemID = 0;
    var __GSMId = '', __GSMNumber = '', __CompositionId = '', __ConstructionId = '', __SubGroupID = '', __ItemMasterID = '';
    var GreyYarnUtilizationSummary = [];
    var tblGeryYarnUtilizationId, $tblGeryYarnUtilizationEL, $modalGeryYarnUtilizationInfoEL;
    var _isPlannedPipelinePopup = false;
    var _isAutoGenerated = false;

    var _isFirstTimePageLoad = true;
    var _filterObj = null;
    var _isCheckFilterValid = false;

    var _validationFlag = false;
    var _maximumSelectedItem = 100;

    $(function () {

        if (!menuId)
            menuId = localStorage.getItem("menuId");
        if (!pageName)
            pageName = localStorage.getItem("pageName");
        if (!menuParam)
            menuParam = localStorage.getItem("menuParam");

        pageId = pageName + "-" + menuId;
        pageIdWithHash = "#" + pageId;
        $divTblEl = $(pageConstants.DIV_TBL_ID_PREFIX + pageId);

        divAdvanceFilterId = "#divAdvanceFilterId" + pageId;
        $divAdvanceFilterId = $(divAdvanceFilterId);

        toolbarId = pageConstants.TOOLBAR_ID_PREFIX + pageId;
        $toolbarEl = $(toolbarId);

        tblMasterId = pageConstants.MASTER_TBL_ID_PREFIX + pageId;
        tblMasterId2 = pageConstants.MASTER_TBL_ID_PREFIX + "2" + pageId;

        tblChildId = pageConstants.CHILD_TBL_ID_PREFIX + pageId;
        tblRevisedChildId = pageConstants.REVISED_CHILD_TBL_ID_PREFIX + pageId;
        tblChildBookingId = pageConstants.CHILD_BOOKING_TBL_ID_PREFIX + pageId;
        $formEl = $(pageConstants.FORM_ID_PREFIX + pageId);
        $divDetailsEl = $(pageConstants.DIV_DETAILS_ID_PREFIX + pageId);
        $modalPlanningEl = $("#modalPlanning" + pageId);
        $modalQtyDetail = $("#modalQtyDetail" + pageId);
        tblStockInfoId = pageConstants.STOCK_INFO_PREFIX + pageId;
        tblStockSummaryId = pageConstants.STOCK_SUMMARY_PREFIX + pageId;
        tblQtyDetailId = "#tblQtyDetail" + pageId;

        tblGeryYarnUtilizationId = `#tblGreyYarnUtilizationInfo${pageId}`;
        $modalGeryYarnUtilizationInfoEL = $("#modalGeryYarnUtilizationInfo" + pageId);

        ch_initAllDatePicker();

        if (menuParam == "YarnAllocation" || menuParam == "YarnAllocationV3") _isYA = true;
        else if (menuParam == "YarnAllocationApproval") _isYAApprove = true;
        else if (menuParam == "YarnAllocationAcknowledge") _isYAAck = true;
        $formEl.find("#divRevItemInfo").hide();

        initToolbars();
        $(pageIdWithHash).find("#goForRevisionModal").modal('hide');

        $formEl.find("#btnViewQtyDetail").click(function () {
            displayQtyUsedDetails();
        });

        advanceSearchHideShow();
        initFilterBtns();
        resetAllFilters(true);
        initMasterTable2([]);
    });

    function initFilterBtns() {
        $("#divtbl" + pageId).find("#spnCountOutOf").text(_maximumSelectedItem);
        $divAdvanceFilterId.find(".btnCFShow").click(function () {
            var btnId = $(this).attr("id");

            var selectedBuyerIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds"));
            if (btnId != "btnBuyerIds" && selectedBuyerIds.length == 0) {
                return toastr.error("Please select buyer first.");
            }

            var isMultiselect = true;

            var domFieldId = "";
            var attrName = "";

            var selectedIds = "";
            var selectedBuyerIds = replaceInvalidChar("");
            var selectedBuyerTeamIds = replaceInvalidChar("");
            var selectedCountIds = replaceInvalidChar("");
            var selectedYBookingIds = replaceInvalidChar("");
            var selectedYItemMasterIds = replaceInvalidChar("");
            var selectedFabricShadeIds = replaceInvalidChar("");
            var selectedFabricTypeIds = replaceInvalidChar("");
            var selectedYarnTypeIds = replaceInvalidChar("");
            var selectedYarnRequisitionTypes = replaceInvalidChar("");
            var selectedFabricGSMIds = replaceInvalidChar("");

            var cfTitle = "";
            var cfFields = "";
            var cfHeaderTexts = "";
            var cfPrimaryKeyColumn = "";

            var searchFieldNameId = 0;

            var setValueText = "";

            if (btnId == "btnBuyerIds") {
                domFieldId = "txtFilterBuyer";
                attrName = "selectedBuyerIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));

                cfTitle = "Select Buyer";
                cfFields = "BuyerName,CountItem";
                cfHeaderTexts = "Buyer, Total Pending Item";
                cfPrimaryKeyColumn = "BuyerId";

                searchFieldNameId = 1;

                setValueText = "Buyer";

                isMultiselect = false;
            }
            else if (btnId == "btnBuyerTeamIds") {
                domFieldId = "txtFilterBuyerTeam";
                attrName = "selectedBuyerTeamIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));

                cfTitle = "Select Buyer Team";
                cfFields = "BuyerTeamName";
                cfHeaderTexts = "Buyer Team";
                cfPrimaryKeyColumn = "BuyerTeamId";

                searchFieldNameId = 2;

                setValueText = "Buyer Team";
            }
            else if (btnId == "btnCountIds") {
                domFieldId = "txtFilterCount";
                attrName = "selectedCountIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedYBookingIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds")));
                selectedYItemMasterIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds")));

                cfTitle = "Select Numeric Count";
                cfFields = "NumericCount";
                cfHeaderTexts = "Numeric Count";
                cfPrimaryKeyColumn = "CountId";

                searchFieldNameId = 3;

                setValueText = "Numeric Count";
            }
            else if (btnId == "btnYarnBookingIds") {
                domFieldId = "txtFilterYarnBooking";
                attrName = "selectedYBookingIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedCountIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds")));
                selectedYItemMasterIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds")));

                cfTitle = "Select Yarn Booking";
                cfFields = "YBookingNo";
                cfHeaderTexts = "Yarn Booking No";
                cfPrimaryKeyColumn = "YBookingId";

                searchFieldNameId = 4;

                setValueText = "Yarn Booking";
            }
            else if (btnId == "btnYarnDescription") {
                domFieldId = "txtFilterYarnDescription";
                attrName = "selectedYItemMasterIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedCountIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds")));
                selectedYBookingIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds")));

                selectedFabricShadeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricShade").attr("selectedFabricShadeIds")));
                selectedFabricTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricType").attr("selectedFabricTypeIds")));
                selectedYarnTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnType").attr("selectedYarnTypeIds")));
                selectedYarnRequisitionTypes = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnRequisitionType").attr("selectedYarnRequisitionTypes")));
                selectedFabricGSMIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricGSM").attr("selectedFabricGSMIds")));

                cfTitle = "Select Yarn Description";
                cfFields = "YarnCategory";
                cfHeaderTexts = "Yarn Description";
                cfPrimaryKeyColumn = "YItemMasterId";

                searchFieldNameId = 5;

                setValueText = "Yarn Description";
            }
            else if (btnId == "btnFabricShade") {
                domFieldId = "txtFilterFabricShade";
                attrName = "selectedFabricShadeIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedCountIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds")));
                selectedYBookingIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds")));
                selectedYItemMasterIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds")));

                selectedFabricTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricType").attr("selectedFabricTypeIds")));
                selectedYarnTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnType").attr("selectedYarnTypeIds")));
                selectedYarnRequisitionTypes = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnRequisitionType").attr("selectedYarnRequisitionTypes")));
                selectedFabricGSMIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricGSM").attr("selectedFabricGSMIds")));

                cfTitle = "Select Fabric Shade";
                cfFields = "FabricShade";
                cfHeaderTexts = "Fabric Shade";
                cfPrimaryKeyColumn = "FabricShadeId";

                searchFieldNameId = 6;

                setValueText = "Fabric Shade";
            }
            else if (btnId == "btnFabricType") {
                domFieldId = "txtFilterFabricType";
                attrName = "selectedFabricTypeIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedCountIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds")));
                selectedYBookingIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds")));
                selectedYItemMasterIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds")));

                selectedFabricShadeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricShade").attr("selectedFabricShadeIds")));
                selectedYarnTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnType").attr("selectedYarnTypeIds")));
                selectedYarnRequisitionTypes = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnRequisitionType").attr("selectedYarnRequisitionTypes")));
                selectedFabricGSMIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricGSM").attr("selectedFabricGSMIds")));

                cfTitle = "Select Fabric Type";
                cfFields = "FabricType";
                cfHeaderTexts = "Fabric Type";
                cfPrimaryKeyColumn = "FabricTypeId";

                searchFieldNameId = 7;

                setValueText = "Fabric Type";
            }
            else if (btnId == "btnYarnType") {
                domFieldId = "txtFilterYarnType";
                attrName = "selectedYarnTypeIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedCountIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds")));
                selectedYBookingIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds")));
                selectedYItemMasterIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds")));

                selectedFabricShadeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricShade").attr("selectedFabricShadeIds")));
                selectedFabricTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricType").attr("selectedFabricTypeIds")));
                selectedYarnRequisitionTypes = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnRequisitionType").attr("selectedYarnRequisitionTypes")));
                selectedFabricGSMIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricGSM").attr("selectedFabricGSMIds")));

                cfTitle = "Select Yarn Type";
                cfFields = "YarnType";
                cfHeaderTexts = "Yarn Type";
                cfPrimaryKeyColumn = "YarnTypeId";

                searchFieldNameId = 8;

                setValueText = "Yarn Type";
            }
            else if (btnId == "btnYarnRequisitionType") {
                domFieldId = "txtFilterYarnRequisitionType";
                attrName = "selectedYarnRequisitionTypes";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedCountIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds")));
                selectedYBookingIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds")));
                selectedYItemMasterIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds")));

                selectedFabricShadeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricShade").attr("selectedFabricShadeIds")));
                selectedFabricTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricType").attr("selectedFabricTypeIds")));
                selectedYarnTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnType").attr("selectedYarnTypeIds")));
                selectedFabricGSMIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricGSM").attr("selectedFabricGSMIds")));

                cfTitle = "Select Yarn Requisition Type";
                cfFields = "YarnRequisitionType";
                cfHeaderTexts = "Yarn Requisition Type";
                cfPrimaryKeyColumn = "YarnRequisitionType";

                searchFieldNameId = 9;

                setValueText = "Yarn Requisition Type";
            }
            else if (btnId == "btnFabricGSM") {
                domFieldId = "txtFilterFabricGSM";
                attrName = "selectedFabricGSMIds";

                selectedIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#" + domFieldId).attr(attrName));
                selectedBuyerIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds")));
                selectedBuyerTeamIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds")));
                selectedCountIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds")));
                selectedYBookingIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds")));
                selectedYItemMasterIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds")));

                selectedFabricShadeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricShade").attr("selectedFabricShadeIds")));
                selectedFabricTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricType").attr("selectedFabricTypeIds")));
                selectedYarnTypeIds = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnType").attr("selectedYarnTypeIds")));
                selectedYarnRequisitionTypes = replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnRequisitionType").attr("selectedYarnRequisitionTypes")));

                cfTitle = "Select Fabric GSM";
                cfFields = "FabricGSM";
                cfHeaderTexts = "Fabric GSM";
                cfPrimaryKeyColumn = "FabricGSMId";

                searchFieldNameId = 10;

                setValueText = "Fabric GSM";
            }
            if (isMultiselect) {
                var finder = new commonFinder({
                    title: cfTitle,
                    pageId: pageId,
                    height: 320,
                    apiEndPoint: `/api/yarn-allocation/filter/get-list/pending/${status}/${searchFieldNameId}/${selectedBuyerIds}/${selectedBuyerTeamIds}/${selectedCountIds}/${selectedYBookingIds}/${selectedYItemMasterIds}/${selectedFabricShadeIds}/${selectedFabricTypeIds}/${selectedYarnTypeIds}/${selectedYarnRequisitionTypes}/${selectedFabricGSMIds}`,
                    fields: cfFields,
                    headerTexts: cfHeaderTexts,
                    isMultiselect: isMultiselect,
                    autofitColumns: true,
                    primaryKeyColumn: cfPrimaryKeyColumn,
                    selectedIds: selectedIds,
                    seperateSelection: false,
                    allowPaging: false,
                    onMultiselect: function (selectedRecords) {
                        finder.hideModal();
                        setValueFilter(domFieldId, attrName, setValueText, cfPrimaryKeyColumn, cfFields, selectedRecords);
                    }
                });
            } else {
                var finder = new commonFinder({
                    title: cfTitle,
                    pageId: pageId,
                    height: 320,
                    apiEndPoint: `/api/yarn-allocation/filter/get-list/pending/${status}/${searchFieldNameId}/${selectedBuyerIds}/${selectedBuyerTeamIds}/${selectedCountIds}/${selectedYBookingIds}/${selectedYItemMasterIds}/${selectedFabricShadeIds}/${selectedFabricTypeIds}/${selectedYarnTypeIds}/${selectedYarnRequisitionTypes}/${selectedFabricGSMIds}`,
                    fields: cfFields,
                    headerTexts: cfHeaderTexts,
                    isMultiselect: isMultiselect,
                    autofitColumns: true,
                    primaryKeyColumn: cfPrimaryKeyColumn,
                    selectedIds: selectedIds,
                    seperateSelection: false,
                    allowPaging: false,
                    onSelect: function (selectedRecord) {
                        finder.hideModal();
                        var selectedRecords = [];
                        selectedRecords.push(selectedRecord.rowData);
                        setValueFilter(domFieldId, attrName, setValueText, cfPrimaryKeyColumn, cfFields, selectedRecords);
                    }
                });
            }
            finder.showModal();
        });
        $divAdvanceFilterId.find(".btnCFClear").click(function () {
            var btnId = $(this).attr("id");

            var domFieldId = "";
            var attrName = "";

            if (btnId == "btnBuyerIdsClear") {
                domFieldId = "txtFilterBuyer";
                attrName = "selectedBuyerIds";
            }
            else if (btnId == "btnBuyerTeamIdsClear") {
                domFieldId = "txtFilterBuyerTeam";
                attrName = "selectedBuyerTeamIds";
            }
            else if (btnId == "btnCountIdsClear") {
                domFieldId = "txtFilterCount";
                attrName = "selectedCountIds";
            }
            else if (btnId == "btnYarnBookingIdsClear") {
                domFieldId = "txtFilterYarnBooking";
                attrName = "selectedYBookingIds";
            }
            else if (btnId == "btnYarnDescriptionClear") {
                domFieldId = "txtFilterYarnDescription";
                attrName = "selectedYItemMasterIds";
            }
            else if (btnId == "btnFabricShadeClear") {
                domFieldId = "txtFilterFabricShade";
                attrName = "selectedFabricShadeIds";
            }
            else if (btnId == "btnFabricTypeClear") {
                domFieldId = "txtFilterFabricType";
                attrName = "selectedFabricTypeIds";
            }
            else if (btnId == "btnYarnTypeClear") {
                domFieldId = "txtFilterYarnType";
                attrName = "selectedYarnTypeIds";
            }
            else if (btnId == "btnYarnRequisitionTypeClear") {
                domFieldId = "txtFilterYarnRequisitionType";
                attrName = "selectedYarnRequisitionTypes";
            }
            else if (btnId == "btnFabricGSMClear") {
                domFieldId = "txtFilterFabricGSM";
                attrName = "selectedFabricGSMIds";
            }
            clearValueFilter(domFieldId, attrName);
        });

        $divAdvanceFilterId.find(".filterChkDt").change(function () {
            var hasError = false;
            var selectedBuyerIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds"));
            if (selectedBuyerIds.length == 0) {
                toastr.error("Please select buyer first.");
                hasError = true;
                $(this).prop('checked', false);
            }
            if (!hasError) {
                var id = $(this).attr("id");
                var sNo = id[id.length - 1];
                if (this.checked) {
                    $divAdvanceFilterId.find("#dtF" + sNo).prop("disabled", false);
                    $divAdvanceFilterId.find("#dtT" + sNo).prop("disabled", false);
                }
                else {
                    $divAdvanceFilterId.find("#dtF" + sNo).prop("disabled", true);
                    $divAdvanceFilterId.find("#dtT" + sNo).prop("disabled", true);
                }
            }
        });
        $divAdvanceFilterId.find(".filterChkNo").change(function () {
            var hasError = false;
            var selectedBuyerIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds"));
            if (selectedBuyerIds.length == 0) {
                toastr.error("Please select buyer first.");
                hasError = true;
                $(this).prop('checked', false);
            }
            if (!hasError) {
                var id = $(this).attr("id");
                var sNo = id[id.length - 1];
                if (this.checked) {
                    $divAdvanceFilterId.find("#nF" + sNo).prop("disabled", false);
                    $divAdvanceFilterId.find("#nT" + sNo).prop("disabled", false);
                }
                else {
                    $divAdvanceFilterId.find("#nF" + sNo).prop("disabled", true);
                    $divAdvanceFilterId.find("#nT" + sNo).prop("disabled", true);
                }
            }
        });
    }
    function resetAllFilters(isResetBuyer) {

        if (isResetBuyer) {
            clearValueFilter("txtFilterBuyer", "selectedBuyerIds");
        }

        clearValueFilter("txtFilterBuyerTeam", "selectedBuyerTeamIds");
        clearValueFilter("txtFilterCount", "selectedCountIds");
        clearValueFilter("txtFilterYarnBooking", "selectedYBookingIds");
        clearValueFilter("txtFilterYarnDescription", "selectedYItemMasterIds");
        clearValueFilter("txtFilterFabricShade", "selectedFabricShadeIds");
        clearValueFilter("txtFilterFabricType", "selectedFabricTypeIds");
        clearValueFilter("txtFilterYarnType", "selectedYarnTypeIds");
        clearValueFilter("txtFilterYarnRequisitionType", "selectedYarnRequisitionTypes");
        clearValueFilter("txtFilterFabricGSM", "selectedFabricGSMIds");

        $divAdvanceFilterId.find('.filterChk').prop('checked', false);
        $divAdvanceFilterId.find(".filterDt,.filterNum").prop("disabled", true);
        $divAdvanceFilterId.find('.filterNum').val(0);

        _filterObj = null;

        resetDateFilters();
    }
    function resetDateFilters() {
        var cDate = ch_customDateFormat(new Date());

        var pDate = new Date();
        pDate.setDate(pDate.getDate() - 1);
        pDate = ch_customDateFormat(pDate);

        for (var i = 1; i <= 5; i++) {
            $divAdvanceFilterId.find("#dtF" + i).val(pDate).trigger('change');
            $divAdvanceFilterId.find("#dtT" + i).val(cDate).trigger('change');

            //$('#dateSelect').val('15').trigger('change');
        }
    }
    function setValueFilter(domFieldId, attrName, fieldFor, propKeyName, propValueName, list) {
        $divAdvanceFilterId.find("#" + domFieldId).attr(attrName, list.map(x => x[propKeyName]).join(","));
        if (list.length == 0) $divAdvanceFilterId.find("#" + domFieldId).val("");
        else {
            //var value = list.length > 1 ? list.length + " " + fieldFor.toLowerCase() + "s selected" : list.length + " " + fieldFor + " selected";
            propValueName = propValueName.split(',')[0];
            var value = list.map(x => x[propValueName]).join(", ");
            $divAdvanceFilterId.find("#" + domFieldId).val(value);
        }

        if (domFieldId == "txtFilterBuyer") {
            resetAllFilters(false);
        }
    }
    function clearValueFilter(domFieldId, attrName) {
        $divAdvanceFilterId.find("#" + domFieldId).attr(attrName, "");
        $divAdvanceFilterId.find("#" + domFieldId).val("");

        if (domFieldId == "txtFilterBuyer") {
            resetAllFilters(false);
        }
    }
    function loadFilteredData(isResetGrid) {
        _filterObj = {
            BuyerIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds"))),
            BuyerTeamIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyerTeam").attr("selectedBuyerTeamIds"))),
            CountIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterCount").attr("selectedCountIds"))),
            YBookingIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnBooking").attr("selectedYBookingIds"))),
            YItemMasterIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnDescription").attr("selectedYItemMasterIds"))),
            FabricShadeIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricShade").attr("selectedFabricShadeIds"))),
            FabricTypeIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricType").attr("selectedFabricTypeIds"))),
            YarnTypeIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnType").attr("selectedYarnTypeIds"))),
            YarnRequisitionTypes: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterYarnRequisitionType").attr("selectedYarnRequisitionTypes"))),
            FabricGSMIds: replaceInvalidChar(getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterFabricGSM").attr("selectedFabricGSMIds"))),

            YBookingDateAsPerFR_Chk: $divAdvanceFilterId.find("#chkD1").is(":checked"),
            YBookingDateAsPerFR_From: $divAdvanceFilterId.find("#chkD1").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtF1").val()) : "",
            YBookingDateAsPerFR_To: $divAdvanceFilterId.find("#chkD1").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtT1").val()) : "",

            ActualYarnBookingDate_Chk: $divAdvanceFilterId.find("#chkD2").is(":checked"),
            ActualYarnBookingDate_From: $divAdvanceFilterId.find("#chkD2").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtF2").val()) : "",
            ActualYarnBookingDate_To: $divAdvanceFilterId.find("#chkD2").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtT2").val()) : "",

            YarnInhouseStartDateAsPerFR_Chk: $divAdvanceFilterId.find("#chkD3").is(":checked"),
            YarnInhouseStartDateAsPerFR_From: $divAdvanceFilterId.find("#chkD3").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtF3").val()) : "",
            YarnInhouseStartDateAsPerFR_To: $divAdvanceFilterId.find("#chkD3").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtT3").val()) : "",

            FabricDeliveryStartDate_Chk: $divAdvanceFilterId.find("#chkD4").is(":checked"),
            FabricDeliveryStartDate_From: $divAdvanceFilterId.find("#chkD4").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtF4").val()) : "",
            FabricDeliveryStartDate_To: $divAdvanceFilterId.find("#chkD4").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtT4").val()) : "",

            FabricDeliveryEndDate_Chk: $divAdvanceFilterId.find("#chkD5").is(":checked"),
            FabricDeliveryEndDate_From: $divAdvanceFilterId.find("#chkD5").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtF5").val()) : "",
            FabricDeliveryEndDate_To: $divAdvanceFilterId.find("#chkD5").is(":checked") ? $.trim($divAdvanceFilterId.find("#dtT5").val()) : "",

            TNACalendarDays_Chk: $divAdvanceFilterId.find("#chkF1").is(":checked"),
            TNACalendarDays_From: $divAdvanceFilterId.find("#nF1").val(),
            TNACalendarDays_To: $divAdvanceFilterId.find("#nT1").val()
        };

        _isFirstTimePageLoad = false;
        initMasterTable(isResetGrid);
    }
    function getParamValue(objParam, propName) {
        if (objParam == null) return replaceInvalidChar("");
        var value = replaceInvalidChar(objParam[propName]);
        value = value == "DefaultText" ? "DT" : value;
        return "'" + $.trim(value) + "'";
    }
    function getParamBool(objParam, propName) {
        if (objParam == null) return false;
        return objParam[propName];
    }
    function initMasterTable(isResetGrid) {
        var objParam = _filterObj;

        var commands = [];
        if (_isYA) {
            if (status != statusConstants.PENDING) {
                commands = [
                    { type: 'View', title: 'View', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-eye' } },
                    { type: 'Allocation Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } }
                ]
            }
        }
        else if (_isYAApprove) {
            if (status == statusConstants.PROPOSED_FOR_APPROVAL) {
                commands = [
                    { type: 'Edit', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-edit' } },
                    { type: 'Allocation Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } }
                ]
            }
            else {
                commands = [
                    { type: 'View', title: 'View', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-eye' } },
                    { type: 'Allocation Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } }
                ]
            }
        }
        else if (_isYAAck) {
            if (status == statusConstants.APPROVED) {
                commands = [
                    { type: 'Edit', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-edit' } },
                    { type: 'Allocation Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } },
                    { type: 'Booking Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } },
                    { type: 'View Attachment', buttonOption: { cssClass: 'e-flat booking_attImage', iconCss: 'fa fa-file-image-o' } },
                    { type: 'View Allocations', buttonOption: { cssClass: 'e-flat booking_attImage', iconCss: 'fa fa-align-justify ' } }
                ]
            }
            else {
                commands = [
                    { type: 'View', title: 'View', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-eye' } },
                    { type: 'Allocation Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } },
                    { type: 'Booking Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } },
                    { type: 'View Attachment', buttonOption: { cssClass: 'e-flat booking_attImage', iconCss: 'fa fa-file-image-o' } },
                    { type: 'View Allocations', buttonOption: { cssClass: 'e-flat booking_attImage', iconCss: 'fa fa-align-justify ' } }
                ]
            }
        }

        var columns = [];

        var idRelatedStr = `S1=${getParamValue(objParam, "BuyerIds")}&S2=${getParamValue(objParam, "BuyerTeamIds")}&S3=${getParamValue(objParam, "CountIds")}&S4=${getParamValue(objParam, "YBookingIds")}&S5=${getParamValue(objParam, "YItemMasterIds")}&S6=${getParamValue(objParam, "FabricShadeIds")}&S7=${getParamValue(objParam, "FabricTypeIds")}&S8=${getParamValue(objParam, "YarnTypeIds")}&S9=${getParamValue(objParam, "YarnRequisitionTypes")}&S10=${getParamValue(objParam, "FabricGSMIds")}`;
        var dateRelatedStr = `CD1=${getParamBool(objParam, "YBookingDateAsPerFR_Chk")}&DF1=${getParamValue(objParam, "YBookingDateAsPerFR_From")}&DT1=${getParamValue(objParam, "YBookingDateAsPerFR_To")}&CD2=${getParamBool(objParam, "ActualYarnBookingDate_Chk")}&DF2=${getParamValue(objParam, "ActualYarnBookingDate_From")}&DT2=${getParamValue(objParam, "ActualYarnBookingDate_To")}&CD3=${getParamBool(objParam, "YarnInhouseStartDateAsPerFR_Chk")}&DF3=${getParamValue(objParam, "YarnInhouseStartDateAsPerFR_From")}&DT3=${getParamValue(objParam, "YarnInhouseStartDateAsPerFR_To")}&CD4=${getParamBool(objParam, "FabricDeliveryStartDate_Chk")}&DF4=${getParamValue(objParam, "FabricDeliveryStartDate_From")}&DT4=${getParamValue(objParam, "FabricDeliveryStartDate_To")}&CD5=${getParamBool(objParam, "FabricDeliveryEndDate_Chk")}&DF5=${getParamValue(objParam, "FabricDeliveryEndDate_From")}&DT5=${getParamValue(objParam, "FabricDeliveryEndDate_To")}`;
        var numberRelatedStr = `CN1=${getParamBool(objParam, "TNACalendarDays_Chk")}&NF1=${getParamValue(objParam, "TNACalendarDays_From")}&NT1=${getParamValue(objParam, "TNACalendarDays_To")}`;


        var apiPath = `/api/yarn-allocation/list-filter?status=${status}&${idRelatedStr}&${dateRelatedStr}&${numberRelatedStr}`;

        //var apiPath = `/api/yarn-allocation/list?status=${status}`;

        if (status == statusConstants.PENDING) {
            columns = [
                {
                    headerText: 'Actions', textAlign: 'Center', commands: commands, width: 10, visible: status != statusConstants.PENDING
                },
                {
                    field: 'YBChildItemID', headerText: 'YBChildItemID', width: 10, isPrimaryKey: true, visible: false
                },
                {
                    field: 'YBChildID', headerText: 'YBChildID', width: 10, visible: false
                },
                {
                    field: 'YBookingNo', headerText: 'Yarn Booking No', width: 20
                },
                {
                    field: 'BuyerName', headerText: 'Buyer Name', width: 20, advanceFilterType: 'checkbox'
                },
                {
                    field: 'BuyerTeamName', headerText: 'Buyer Team', width: 20
                },
                {
                    field: 'SeasonName', headerText: 'Buyer Season', width: 20
                },
                //{
                //    field: 'FabricBookingDate', headerText: 'Fabric Booking Date [As per FR]', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'FabricBookingDate_St', headerText: 'Fabric Booking Date [As per FR]', textAlign: 'Center', width: 60, allowEditing: false
                },
                //{
                //    field: 'YarnBookingDate', headerText: 'Yarn Booking Date [As per FR]', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'YarnBookingDate_St', headerText: 'Yarn Booking Date [As per FR]', textAlign: 'Center', width: 60, allowEditing: false
                },
                //{
                //    field: 'ActualYarnBookingDate', headerText: 'Actual Yarn Booking Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'ActualYarnBookingDate_St', headerText: 'Actual Yarn Booking Date', textAlign: 'Center', width: 60, allowEditing: false
                },
                //{
                //    field: 'YarnInhouseStartDate', headerText: 'Yarn Inhouse Start Date (As per FR)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'YarnInhouseStartDate_St', headerText: 'Yarn Inhouse Start Date (As per FR)', textAlign: 'Center', width: 60, allowEditing: false
                },
                //{
                //    field: 'YarnInhouseEndDate', headerText: 'Yarn Inhouse End Date (As per FR)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'YarnInhouseEndDate_St', headerText: 'Yarn Inhouse End Date (As per FR)', textAlign: 'Center', width: 60, allowEditing: false
                },
                {
                    field: 'NumericCount', headerText: 'Numeric Count', width: 20
                },
                {
                    field: 'SpinnerName', headerText: 'Reference Spinner (if any)', width: 20
                },
                {
                    field: 'YarnLotNo', headerText: 'Reference Lot (if any)', width: 20
                },
                {
                    field: 'RevisionReason', headerText: 'Reason for booking Revission', width: 20
                },
                {
                    field: 'YarnCategory', headerText: 'Yarn Descriptions', width: 40
                },
                {
                    field: 'FabricShade', headerText: 'Fabric Shade', width: 40
                },
                {
                    field: 'FabricType', headerText: 'Fabric Type', width: 20
                },
                {
                    field: 'YarnType', headerText: 'Yarn Type', width: 20 //YarnCertification
                },
                {
                    field: 'RequiredYarnQuantityKG', headerText: 'Required yarn QTY/KG', width: 20
                },
                {
                    field: 'YarnRequisitionType', headerText: ' Yarn Requisition Type', width: 20
                },
                //{
                //    field: 'YarnReqQty', headerText: 'Yarn Req Qty', width: 20
                //},
                {
                    field: 'TotalAllocatedQty', headerText: 'Allocated Qty(KG)', width: 20
                },
                {
                    field: 'AllocationBalanceQTYKG', headerText: 'Allocation Balance QTY/KG', width: 20
                },
                {
                    field: 'YarnStockQty', headerText: 'Yarn Stock', width: 20
                },
                {
                    field: 'FabricGSM', headerText: 'Fabric GSM', width: 20
                },
                //{
                //    field: 'KnittingStartDate4P', headerText: 'Knitting Start Date (4P)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'KnittingStartDate4P_St', headerText: 'Knitting Start Date (4P)', textAlign: 'Center', width: 60, allowEditing: false
                },
                //{
                //    field: 'KnittingEndDate4P', headerText: 'Knitting End Date (4P)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'KnittingEndDate4P_St', headerText: 'Knitting End Date (4P)', textAlign: 'Center', width: 60, allowEditing: false
                },
                //{
                //    field: 'FabricsDeliveryStartDate', headerText: 'Fabric Delivery Start Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'FabricsDeliveryStartDate_St', headerText: 'Fabric Delivery Start Date', textAlign: 'Center', width: 60, allowEditing: false
                },
                //{
                //    field: 'FabricsDeliveryEndDate', headerText: 'Fabric Delivery End Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
                //},
                {
                    field: 'FabricsDeliveryEndDate_St', headerText: 'Fabric Delivery End Date', textAlign: 'Center', width: 60, allowEditing: false
                },
                {
                    field: 'TNACalendarDays', headerText: 'TNA Calender Days', width: 20
                },
                {
                    field: 'YDST', headerText: 'Go for YD?', textAlign: 'Center', width: 20
                },
                {
                    field: 'Remarks', headerText: 'Remarks', width: 20
                }
            ];
        }
        else if ((_isYAAck && status == statusConstants.APPROVED) || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE) {
            apiPath = `/api/yarn-allocation/listAck?status=${status}`;
            columns = [
                {
                    headerText: 'Actions', textAlign: 'Center', commands: commands, width: 50
                },
                {
                    field: 'AllocationChildItemID', width: 10, isPrimaryKey: true, visible: false
                },
                {
                    field: 'YarnAllocationNo', headerText: 'Yarn Allocation No', width: 120, allowEditing: false
                },
                {
                    field: 'ApproveDate', headerText: 'Allocation Proposed Date', textAlign: 'Center', type: 'date', format: _ch_date_format_5, width: 120
                },
                {
                    field: 'BookingNo', headerText: 'Booking No', width: 60
                },
                {
                    field: 'FabricColor', headerText: 'Fabric Color', width: 60
                },
                {
                    field: 'Status', headerText: 'Status', width: 80, allowEditing: false
                },
                {
                    field: 'YarnCategory', headerText: 'Required Yarn Details', width: 130
                },
                {
                    field: 'ReqCount', headerText: 'Required Count', width: 80
                },
                {
                    field: 'AllocatedYarnDetails', headerText: 'Allocated Yarn Details', width: 130
                },
                {
                    field: 'AllocatedCount', headerText: 'Allocated Count', width: 80
                },
                {
                    field: 'PhysicalCount', headerText: 'Physical Count', width: 80
                },
                {
                    field: 'PhysicalLot', headerText: 'Physical Lot', width: 80
                },
                {
                    field: 'Spinner', headerText: 'Spinner', width: 100
                },
                {
                    field: 'TotalAllocationQty', headerText: 'Allocation Qty (KG)', width: 80
                },
                {
                    field: 'BuyerName', headerText: 'Buyer Name', width: 100
                },
                {
                    field: 'FabricType', headerText: 'Fabric Type', width: 80
                },
                {
                    field: 'ShadeCode', headerText: 'Shade Code', width: 80
                },
                {
                    field: 'LotRef', headerText: 'Reference Lot (If Any)', width: 100
                },
                {
                    field: 'Remarks', headerText: 'Remarks', width: 100
                }
            ];
        }
        else {
            columns = [
                {
                    headerText: 'Actions', textAlign: 'Center', commands: commands, width: 10, visible: status != statusConstants.PENDING
                },
                {
                    field: 'YarnAllocationID', headerText: 'YarnAllocationID', isPrimaryKey: true, width: 10, visible: false
                },
                {
                    field: 'BookingNo', headerText: 'Booking No', width: 60
                },
                {
                    field: 'YarnAllocationNo', headerText: 'Yarn Allocation No', width: 100
                },
                {
                    field: 'YarnAllocationDate', headerText: 'Yarn Allocation Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100
                },
                {
                    field: 'TotalAllocatedQty', headerText: 'Allocated Qty(KG)', width: 100
                },
                {
                    field: 'AllocatedBy', headerText: 'Allocated By', width: 100
                }
            ];
        }
        if (status == statusConstants.PENDING) {
            columns.unshift({ type: 'checkbox', width: 50 });
        }

        var aggregatesColumns = [];
        if (status == statusConstants.PENDING) {
            aggregatesColumns = [
                {
                    type: 'Sum',
                    field: 'YarnType',
                    footerTemplate: 'Total'
                },
                {
                    type: 'Sum',
                    field: 'RequiredYarnQuantityKG',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'TotalAllocatedQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'AllocationBalanceQTYKG',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'YarnStockQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                }
            ];
        }
        else if (_isYAAck && status == statusConstants.APPROVED) {
            aggregatesColumns = [
                {
                    type: 'Sum',
                    field: 'Spinner',
                    footerTemplate: 'Total'
                },
                {
                    type: 'Sum',
                    field: 'TotalAllocationQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                }
            ];
        }
        else if (status != statusConstants.ACKNOWLEDGE && status != statusConstants.UN_ACKNOWLEDGE) {
            aggregatesColumns = [
                //status != statusConstants.ACKNOWLEDGE && status != statusConstants.UN_ACKNOWLEDGE
                {
                    type: 'Sum',
                    field: 'YarnAllocationNo',
                    footerTemplate: 'Total'
                },
                {
                    type: 'Sum',
                    field: 'TotalAllocatedQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'POQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'BalanceQTY',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                }
            ];
        }
        else if (status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE) {
            aggregatesColumns = [
                {
                    type: 'Sum',
                    field: 'Spinner',
                    footerTemplate: 'Total'
                },
                {
                    type: 'Sum',
                    field: 'TotalAllocationQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                }
            ];
        }
        if ($tblMasterEl) $tblMasterEl.destroy();
        if (isResetGrid) {
            $tblMasterEl = new initEJ2Grid({
                tableId: tblMasterId,
                data: [],
                //autofitColumns: true,
                allowFiltering: false,
                columns: columns,
                commandClick: handleCommands,
                aggregates: [
                    {
                        columns: aggregatesColumns
                    }
                ],
                isFreezeHeader: true
            });
        } else {
            var isHasFilter1 = isHasFilter();
            //if ((!_isFirstTimePageLoad && objParam != null) || status != statusConstants.PENDING || isHasFilter1) {
            if (isHasFilter1 || status != statusConstants.PENDING) {
                $tblMasterEl = new initEJ2Grid({
                    tableId: tblMasterId,
                    //autofitColumns: true,
                    apiEndPoint: apiPath,
                    allowFiltering: status != statusConstants.PENDING,
                    columns: columns,
                    commandClick: handleCommands,
                    aggregates: [
                        {
                            columns: aggregatesColumns
                        }
                    ],
                    isFreezeHeader: true
                });
            } else {
                $tblMasterEl = new initEJ2Grid({
                    tableId: tblMasterId,
                    data: [],
                    //autofitColumns: true,
                    allowFiltering: false,
                    columns: columns,
                    commandClick: handleCommands,
                    aggregates: [
                        {
                            columns: aggregatesColumns
                        }
                    ],
                    isFreezeHeader: true
                });
            }
        }

    }
    function initMasterTable2(dataList) {
        $("#divtbl" + pageId).find("#spnCountSelectedItem").text(dataList.length);

        var commands = [
            { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-trash' } }
        ]
        var columns = [
            {
                headerText: 'Actions', textAlign: 'Center', commands: commands, width: 10, visible: status == statusConstants.PENDING
            },
            {
                field: 'YBChildItemID', headerText: 'YBChildItemID', width: 10, isPrimaryKey: true, visible: false
            },
            {
                field: 'YBChildID', headerText: 'YBChildID', width: 10, visible: false
            },
            {
                field: 'YBookingNo', headerText: 'Yarn Booking No', width: 20
            },
            {
                field: 'BuyerName', headerText: 'Buyer Name', width: 20, advanceFilterType: 'checkbox'
            },
            {
                field: 'BuyerTeamName', headerText: 'Buyer Team', width: 20
            },
            {
                field: 'SeasonName', headerText: 'Buyer Season', width: 20
            },
            //{
            //    field: 'FabricBookingDate', headerText: 'Fabric Booking Date [As per FR]', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'FabricBookingDate_St', headerText: 'Fabric Booking Date [As per FR]', textAlign: 'Center', width: 100, allowEditing: false
            },
            //{
            //    field: 'YarnBookingDate', headerText: 'Yarn Booking Date [As per FR]', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'YarnBookingDate_St', headerText: 'Yarn Booking Date [As per FR]', textAlign: 'Center', width: 100, allowEditing: false
            },
            //{
            //    field: 'ActualYarnBookingDate', headerText: 'Actual Yarn Booking Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'ActualYarnBookingDate_St', headerText: 'Actual Yarn Booking Date', textAlign: 'Center', width: 100, allowEditing: false
            },
            //{
            //    field: 'YarnInhouseStartDate', headerText: 'Yarn Inhouse Start Date (As per FR)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'YarnInhouseStartDate_St', headerText: 'Yarn Inhouse Start Date (As per FR)', textAlign: 'Center', width: 100, allowEditing: false
            },
            //{
            //    field: 'YarnInhouseEndDate', headerText: 'Yarn Inhouse End Date (As per FR)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'YarnInhouseEndDate_St', headerText: 'Yarn Inhouse End Date (As per FR)', textAlign: 'Center', width: 100, allowEditing: false
            },
            {
                field: 'NumericCount', headerText: 'Numeric Count', width: 20
            },
            {
                field: 'SpinnerName', headerText: 'Reference Spinner (if any)', width: 20
            },
            {
                field: 'YarnLotNo', headerText: 'Reference Lot (if any)', width: 20
            },
            {
                field: 'RevisionReason', headerText: 'Reason for booking Revission', width: 20
            },
            {
                field: 'YarnCategory', headerText: 'Yarn Descriptions', width: 40
            },
            {
                field: 'FabricShade', headerText: 'Fabric Shade', width: 40
            },
            {
                field: 'FabricType', headerText: 'Fabric Type', width: 20
            },
            {
                field: 'YarnType', headerText: 'Yarn Type', width: 20 //YarnCertification
            },
            {
                field: 'RequiredYarnQuantityKG', headerText: 'Required yarn QTY/KG', width: 20
            },
            {
                field: 'YarnRequisitionType', headerText: ' Yarn Requisition Type', width: 20
            },
            //{
            //    field: 'YarnReqQty', headerText: 'Yarn Req Qty', width: 20
            //},
            {
                field: 'TotalAllocatedQty', headerText: 'Allocated Qty(KG)', width: 20
            },
            {
                field: 'AllocationBalanceQTYKG', headerText: 'Allocation Balance QTY/KG', width: 20
            },
            {
                field: 'YarnStockQty', headerText: 'Yarn Stock', width: 20
            },
            {
                field: 'FabricGSM', headerText: 'Fabric GSM', width: 20
            },
            //{
            //    field: 'KnittingStartDate4P', headerText: 'Knitting Start Date (4P)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'KnittingStartDate4P_St', headerText: 'Knitting Start Date (4P)', textAlign: 'Center', width: 100, allowEditing: false
            },
            //{
            //    field: 'KnittingEndDate4P', headerText: 'Knitting End Date (4P)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'KnittingEndDate4P_St', headerText: 'Knitting End Date (4P)', textAlign: 'Center', width: 100, allowEditing: false
            },
            //{
            //    field: 'FabricsDeliveryStartDate', headerText: 'Fabric Delivery Start Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'FabricsDeliveryStartDate_St', headerText: 'Fabric Delivery Start Date', textAlign: 'Center', width: 100, allowEditing: false
            },
            //{
            //    field: 'FabricsDeliveryEndDate', headerText: 'Fabric Delivery End Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 20
            //},
            {
                field: 'FabricsDeliveryEndDate_St', headerText: 'Fabric Delivery End Date', textAlign: 'Center', width: 100, allowEditing: false
            },
            {
                field: 'TNACalendarDays', headerText: 'TNA Calender Days', width: 20
            },
            {
                field: 'YDST', headerText: 'Go for YD?', textAlign: 'Center'
            },
            {
                field: 'Remarks', headerText: 'Remarks', width: 20
            }
        ];

        var aggregatesColumns = [
            {
                type: 'Sum',
                field: 'YarnType',
                footerTemplate: 'Total'
            },
            {
                type: 'Sum',
                field: 'RequiredYarnQuantityKG',
                decimals: 2,
                format: "N2",
                footerTemplate: '${Sum}'
            },
            {
                type: 'Sum',
                field: 'TotalAllocatedQty',
                decimals: 2,
                format: "N2",
                footerTemplate: '${Sum}'
            },
            {
                type: 'Sum',
                field: 'AllocationBalanceQTYKG',
                decimals: 2,
                format: "N2",
                footerTemplate: '${Sum}'
            },
            {
                type: 'Sum',
                field: 'YarnStockQty',
                decimals: 2,
                format: "N2",
                footerTemplate: '${Sum}'
            }
        ];
        if ($tblMasterEl2) $tblMasterEl2.destroy();
        $tblMasterEl2 = new initEJ2Grid({
            tableId: tblMasterId2,
            data: dataList,
            //autofitColumns: true,
            columns: columns,
            commandClick: handleCommands,
            allowPaging: false,
            allowFiltering: false,
            aggregates: [
                {
                    columns: aggregatesColumns
                }
            ],
            isFreezeHeader: true
        });
    }
    function addSelectedItemsFromMasterGrid() {
        var selectedRows = $tblMasterEl.getSelectedRecords();
        if (selectedRows.length == 0) {
            toastr.error("Please select row(s)!");
            return;
        }
        if (selectedRows.length > _maximumSelectedItem) {
            return toastr.error(`You can select maximum ${_maximumSelectedItem} items at a time.`);
        }

        var selectedRows1 = $tblMasterEl2.getCurrentViewRecords();
        if (selectedRows1.length > _maximumSelectedItem) {
            return toastr.error(`You can select selected ${_maximumSelectedItem} items.`);
        }
        if (selectedRows1.length > 0) {
            var remainingValueCount = _maximumSelectedItem - selectedRows1.length;
            if (selectedRows.length + selectedRows1.length > _maximumSelectedItem) {
                if (remainingValueCount > 0) {
                    return toastr.error(`You have already selected ${selectedRows1.length} items, ${remainingValueCount} items remaining.`);
                }
                else {
                    return toastr.error(`You have already selected ${selectedRows1.length} items.`);
                }
            }
        }

        var items = DeepClone($tblMasterEl2.getCurrentViewRecords());
        items.push({
            BuyerId: selectedRows[0].BuyerId
        });
        var uniqueAry = distinctArrayByProperty(items, "BuyerId");
        if (uniqueAry.length != 1) {
            var selectedBuyer = items[0].BuyerName;
            toastr.error(`For allocation all items buyer should be same. Already buyer ${selectedBuyer} is selected`);
            return;
        }

        var currentList = $tblMasterEl2.getCurrentViewRecords();
        selectedRows.map(x => {
            var indexF = currentList.findIndex(y => y.YBChildItemID == x.YBChildItemID);
            if (indexF == -1) {
                currentList.push(x);
            }
        });
        initMasterTable2(currentList);
    }

    function initToolbars() {
        $toolbarEl.find(".btnToolbar").hide();

        if (_isYA) {
            $toolbarEl.find("#btnPendingList,#btnAllocationList,#btnRevisionList,#btnApprovedList,#btnRejectList,#btnAllList").show();

            $divAdvanceFilterId.find("#btnClearFilter").click(function () {
                resetAllFilters(true);
            });
            $divAdvanceFilterId.find("#btnSearchFilter").click(function () {
                if (_isCheckFilterValid && !isHasFilter()) {
                    toastr.error("Select filter.");
                    return false;
                }
                var selectedBuyerIds = getDefaultValueWhenInvalidS($divAdvanceFilterId.find("#txtFilterBuyer").attr("selectedBuyerIds"));
                var isResetGrid = false;
                if (selectedBuyerIds.length == 0) {
                    isResetGrid = true;
                    if (_validationFlag) {
                        toastr.error("Please select buyer first.");
                    }
                    _validationFlag = true;
                } else {
                    _isCheckFilterValid = true;
                }
                loadFilteredData(isResetGrid);
            });

            $toolbarEl.find("#btnPendingList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.PENDING;
                //$toolbarEl.find(".divCreate").show();
                //initMasterTable(false);
                setButton();
                advanceSearchHideShow();

                _validationFlag = false;
                $divAdvanceFilterId.find("#btnSearchFilter").click();
            });
            $toolbarEl.find("#btnAllocationList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.PROPOSED_FOR_APPROVAL;
                //$toolbarEl.find(".divCreate").hide();
                advanceSearchHideShow();
                _validationFlag = false;
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnRevisionList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.REVISE;
                //$toolbarEl.find(".divCreate").hide();
                advanceSearchHideShow();
                _validationFlag = false;
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnApprovedList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.APPROVED;
                //$toolbarEl.find(".divCreate").hide();
                advanceSearchHideShow();
                _validationFlag = false;
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnRejectList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.REJECT;
                //$toolbarEl.find(".divCreate").hide();
                advanceSearchHideShow();
                _validationFlag = false;
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnAllList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.ALL;
                //$toolbarEl.find(".divCreate").hide();
                advanceSearchHideShow();
                _validationFlag = false;
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnPendingList").click();

            $("#divtbl" + pageId).find("#btnCreate").click(function () {
                createYarnAllocation();
            });
            $("#divtbl" + pageId).find("#btnClearItems").click(function () {
                clearSelectedItems();
            });
            $("#divtbl" + pageId).find(".btnAddSelectedItem").click(function () {
                addSelectedItemsFromMasterGrid();
            });
            $formEl.find("#btnCancel").on("click", backToList);
            $formEl.find("#btnAddBooking").on("click", addBooking);
            $formEl.find("#btnGreyYarnPOPUPClose").click(function (e) {
                $modalGeryYarnUtilizationInfoEL.modal('hide');
            });
        }
        else if (_isYAApprove) {
            $toolbarEl.find("#btnPendingApprovalList,#btnApprovedList,#btnRejectList,#btnAcknowledgedList,#btnUnacknowledgedList,#btnAllList").show();

            $toolbarEl.find("#btnPendingApprovalList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.PROPOSED_FOR_APPROVAL;
                $toolbarEl.find(".divCreate").show();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnApprovedList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.APPROVED;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnRejectList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.REJECT;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnAcknowledgedList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.ACKNOWLEDGE;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnUnacknowledgedList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.UN_ACKNOWLEDGE;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnAllList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.ALL;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnPendingApprovalList").click();

            $formEl.find("#btnCancel").on("click", backToList);
            $formEl.find("#btnAddBooking").on("click", addBooking);
            $formEl.find("#btnAddBookingRev").on("click", addBooking);
            $formEl.find("#btnAddItem").on("click", addItem);
            $formEl.find("#btnAddItemRev").on("click", addItem);
            //$formEl.find("#btnAddItem").click(function (e) {
            //    
            //    addItem();
            //});
        }
        else if (_isYAAck) {
            $toolbarEl.find("#btnPendingAcknowledgedList,#btnAcknowledgedList,#btnUnacknowledgedList,#btnAllList").show();

            $toolbarEl.find("#btnPendingAcknowledgedList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.APPROVED;
                $toolbarEl.find(".divCreate").show();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnAcknowledgedList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.ACKNOWLEDGE;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnUnacknowledgedList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.UN_ACKNOWLEDGE;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnAllList").click(function (e) {
                e.preventDefault();
                toggleActiveToolbarBtn(this, $toolbarEl);
                status = statusConstants.ALL;
                $toolbarEl.find(".divCreate").hide();
                initMasterTable(false);
                setButton();
            });
            $toolbarEl.find("#btnPendingAcknowledgedList").click();

            $formEl.find("#btnCancel").on("click", backToList);
        }
        $formEl.find("#btnSave").click(function (e) {
            e.preventDefault();
            resetGlobals();
            _statusObj.Propose = true;
            save();
        });

        $formEl.find("#btnRevise").click(function (e) {
            e.preventDefault();
            resetGlobals();
            _statusObj.Revise = true;
            save();
        });

        $formEl.find("#btnReAllocation").click(function (e) {
            e.preventDefault();
            _statusObj.ReAllocation = true;
            saveAcknowledgement();
        });
        $formEl.find("#btnUnAckRevise").click(function (e) {
            e.preventDefault();
            _statusObj.UnAckRevise = true;
            saveAcknowledgement();
        });
        $formEl.find("#btnApprove").click(function (e) {
            e.preventDefault();
            resetGlobals();
            _statusObj.Approve = true;
            save();
        });
        $formEl.find("#btnReject").click(function (e) {
            e.preventDefault();
            bootbox.prompt("Are you sure you want to reject this?", function (result) {
                if (!result) {
                    return toastr.error("Reject reason is required.");
                }
                resetGlobals();
                _statusObj.Reject = true;
                _statusObj.RejectReason = result;
                save();
            });

        });
        $formEl.find("#btnAcknowledge").click(function (e) {

            if (masterData.ChildItems[0].IsDifferentItem == true) {
                $(pageIdWithHash).find("#goForRevisionModal").modal('show');
            } else {
                e.preventDefault();
                resetGlobals();
                _statusObj.Acknowledge = true;
                saveAcknowledgement();
            }
        });

        $(pageIdWithHash).find("#btnGoForRevisionYes").click(function (e) {

            $(pageIdWithHash).find("#goForRevisionModal").modal('hide');

            bootbox.prompt("Enter your Revise reason:", function (result) {
                if (!result) {
                    return toastr.error("Revise reason is required.");
                }
                e.preventDefault();
                resetGlobals();
                _statusObj.Acknowledge = true;
                saveAcknowledgement(result);
            });

        });
        $formEl.find("#btnUnAcknowledge").click(function (e) {
            e.preventDefault();
            bootbox.prompt("Are you sure you want to unacknowledge this?", function (result) {
                if (!result) {
                    return toastr.error("Unacknowledge reason is required.");
                }
                resetGlobals();
                _statusObj.UnAcknowledge = true;
                _statusObj.UnAcknowledgeReason = result;
                saveAcknowledgement();
            });

        });
        $formEl.find("#btnOk").click(function (e) {

            var isValid = true;
            if (!_isPipelineStock) {
                //stockSummary = DeepClone(stockSummaryTemp);
                stockSummary = $tblStockSummaryEl.getCurrentViewRecords();
                isValid = isPopupDataValid(stockSummary, _isPipelineStock);
            }
            else {
                //stockPipelineSummary = DeepClone(stockPipelineSummaryTemp);
                stockPipelineSummary = $tblStockSummaryEl.getCurrentViewRecords();
                isValid = isPopupDataValid(stockPipelineSummary, _isPipelineStock);
            }
            if (!isValid) return false;

            var msg = '';
            if (status != statusConstants.ACKNOWLEDGE && status != statusConstants.UN_ACKNOWLEDGE) {
                var selectedYarnCount = masterData.Childs[selectedChildIndex].YarnCount;
                if (!_isPipelineStock) {
                    msg = checkSameItemAllocation(selectedYarnCount, stockSummary);
                }
                else {
                    msg = checkSameItemAllocationForPipeline(selectedYarnCount, stockPipelineSummary);
                }
            }
            if (msg == '') {
                if (_isYA) {
                    if (!_isPipelineStock) {
                        if (stockSummary.length == 1) {
                            var isValidCopy = false;
                            var allocationFromStock = '';
                            if (stockSummary[0].AdvanceAllocationQty > 0 && stockSummary[0].SampleAllocationQty <= 0 && stockSummary[0].LiabilitiesAllocationQty <= 0 && stockSummary[0].LeftoverAllocationQty <= 0) {
                                isValidCopy = true;
                                allocationFromStock = 'AdvanceAllocationQty';
                            }
                            else if (stockSummary[0].SampleAllocationQty > 0 && stockSummary[0].AdvanceAllocationQty <= 0 && stockSummary[0].LiabilitiesAllocationQty <= 0 && stockSummary[0].LeftoverAllocationQty <= 0) {
                                isValidCopy = true;
                                allocationFromStock = 'SampleAllocationQty';
                            }
                            else if (stockSummary[0].LiabilitiesAllocationQty > 0 && stockSummary[0].AdvanceAllocationQty <= 0 && stockSummary[0].SampleAllocationQty <= 0 && stockSummary[0].LeftoverAllocationQty <= 0) {
                                isValidCopy = true;
                                allocationFromStock = 'LiabilitiesAllocationQty';
                            }
                            else if (stockSummary[0].LeftoverAllocationQty > 0 && stockSummary[0].AdvanceAllocationQty <= 0 && stockSummary[0].SampleAllocationQty <= 0 && stockSummary[0].LiabilitiesAllocationQty <= 0) {
                                isValidCopy = true;
                                allocationFromStock = 'LeftoverAllocationQty';
                            }
                            else {
                                isValidCopy = false;
                            }

                            if (isValidCopy == false) {
                                btnOKClickWithoutCopy();
                            }
                            else {
                                if (stockSummary.length > 0) {
                                    var result = confirm("Do you want to Allocate the same yarn from the same Lot ?");
                                    if (result) {
                                        btnOKClickWithCopy(allocationFromStock);
                                    } else {
                                        btnOKClickWithoutCopy();
                                    }
                                }
                                else {
                                    btnOKClickWithoutCopy();
                                }
                            }
                        }
                        else {
                            btnOKClickWithoutCopy();
                        }
                    }
                    else {
                        if (stockPipelineSummary.length == 1) {
                            var isValidCopy = false;
                            var allocationFromStock = '';
                            if (stockPipelineSummary[0].PipelineAllocationQty > 0) {
                                isValidCopy = true;
                                allocationFromStock = 'PipelineAllocationQty';
                            }

                            if (isValidCopy == false) {
                                btnOKClickWithoutCopy();
                            }
                            else {
                                if (stockPipelineSummary.length > 1) {
                                    var result = confirm("Do you want to Allocate the same yarn from the same Lot ?");
                                    if (result) {
                                        // User clicked OK
                                        btnOKClickWithCopy(allocationFromStock);
                                    } else {
                                        btnOKClickWithoutCopy();
                                    }
                                }
                                else {
                                    btnOKClickWithoutCopy();
                                }
                            }
                        }
                        else {
                            btnOKClickWithoutCopy();
                        }
                    }
                }
                else {
                    btnOKClickWithoutCopy();
                }
            }
            else {
                toastr.error(msg);
                return false;
            }
        });
    }
    function checkSameItemAllocation(selectedYarnCount, stockSummary) {
        var msg = '';
        var isSameItemAllocated = true;
        for (var i = 0; i < stockSummary.length; i++) {
            if (stockSummary[i].NumericCount != selectedYarnCount) {
                isSameItemAllocated = false;
                break;
            }
        }
        var isChildsSameItemAllocated = isSameItemAllocated;
        var selectedYBChildItemID = masterData.Childs[selectedChildIndex].YBChildItemID;
        var Childs = masterData.Childs.filter(x => x.YBChildItemID != selectedYBChildItemID)
        for (var i = 0; i < Childs.length; i++) {
            for (var j = 0; j < Childs[i].ChildItems.length; j++) {
                if (Childs[i].ChildItems[j].NumericCount != Childs[i].YarnCount) {
                    isChildsSameItemAllocated = false;
                    break;
                }
            }
        }
        if (Childs.length > 0) {
            if (isSameItemAllocated != isChildsSameItemAllocated) {
                if (!isChildsSameItemAllocated && isSameItemAllocated) {
                    msg = 'There should be at least one allocated yarn count that differs from the required yarn count !!!';
                }
                else if (!isChildsSameItemAllocated && !isSameItemAllocated) {
                    msg = 'Allocated Yarn Count Should be the same as required Yarn Count !!!';
                }
            }
        }
        return msg;
    }
    function checkSameItemAllocationForPipeline(selectedYarnCount, stockPipelineSummary) {
        var msg = '';
        var isSameItemAllocated = true;
        for (var i = 0; i < stockPipelineSummary.length; i++) {
            if (stockPipelineSummary[i].NumericCount != selectedYarnCount) {
                isSameItemAllocated = false;
                break;
            }
        }
        var isChildsSameItemAllocated = isSameItemAllocated;
        var selectedYBChildItemID = masterData.Childs[selectedChildIndex].YBChildItemID;
        var Childs = masterData.Childs.filter(x => x.YBChildItemID != selectedYBChildItemID)
        for (var i = 0; i < Childs.length; i++) {
            for (var j = 0; j < Childs[i].ChildPipelineItems.length; j++) {
                if (Childs[i].ChildPipelineItems[j].NumericCount != Childs[i].YarnCount) {
                    isChildsSameItemAllocated = false;
                    break;
                }
            }
        }
        if (Childs.length > 0) {
            if (isSameItemAllocated != isChildsSameItemAllocated) {
                if (!isChildsSameItemAllocated && isSameItemAllocated) {
                    msg = 'There should be at least one allocated yarn count that differs from the required yarn count !!!';
                }
                else if (isChildsSameItemAllocated && !isSameItemAllocated) {
                    msg = 'Allocated Yarn Count Should be the same as required Yarn Count !!!';
                }
            }
        }
        return msg;
    }
    function btnOKClickWithoutCopy() {

        if (_isYAApprove && (status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE)) {
            masterData.ChildItems = stockSummary;
            initChild(masterData.ChildItems);

        }
        /*else if (_isYAApprove && status == statusConstants.UN_ACKNOWLEDGE) {
            if (!_isPipelineStock) {

                var AdvStockAllocationQty = 0;
                var TAdvanceAllocationQty = 0;
                var TSampleAllocationQty = 0;
                var TLiabilitiesAllocationQty = 0;
                var TLeftoverAllocationQty = 0;
                for (var i = 0; i < stockSummary.length; i++) {
                    AdvStockAllocationQty += stockSummary[i].AdvanceAllocationQty
                        + stockSummary[i].SampleAllocationQty
                        + stockSummary[i].LiabilitiesAllocationQty
                        + stockSummary[i].LeftoverAllocationQty;

                    TAdvanceAllocationQty += stockSummary[i].AdvanceAllocationQty;
                    TSampleAllocationQty += stockSummary[i].SampleAllocationQty;
                    TLiabilitiesAllocationQty += stockSummary[i].LiabilitiesAllocationQty;
                    TLeftoverAllocationQty += stockSummary[i].LeftoverAllocationQty;
                }

                masterData.ChildItems[selectedChildIndex].TotalAllocationQty = AdvStockAllocationQty;
                masterData.ChildItems[selectedChildIndex].AdvanceAllocationQty = TAdvanceAllocationQty;
                masterData.ChildItems[selectedChildIndex].SampleAllocationQty = TSampleAllocationQty;
                masterData.ChildItems[selectedChildIndex].LiabilitiesAllocationQty = TLiabilitiesAllocationQty;
                masterData.ChildItems[selectedChildIndex].LeftoverAllocationQty = TLeftoverAllocationQty;

                //stockSummary = [];//28/03/24

            }
            else {
                var PLStockAllocationQty = 0;
                for (var i = 0; i < stockPipelineSummary.length; i++) {
                    PLStockAllocationQty += stockPipelineSummary[i].PipelineAllocationQty;
                }
                var dataRow = masterData.Childs[selectedChildIndex];
                if (_isRevisedChild) {
                    dataRow = masterData.RevisedChilds[selectedChildIndex];
                }
                var totalQty = dataRow.AllocatedQty + dataRow.PlannedPipelineQty + dataRow.PlannedPOQty + dataRow.AdvanceStockAllocationQty + dataRow.QtyForPO + PLStockAllocationQty;

                if (Math.ceil(totalQty) <= Math.ceil(dataRow.NetYarnReqQty)) {
                    if (_isRevisedChild) {
                        masterData.RevisedChilds[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                        masterData.RevisedChilds[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                    }
                    else {
                        masterData.Childs[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                        masterData.Childs[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                    }
                }
                else {
                    toastr.error('Total Qty (' + totalQty + ') cannot be greater than net required qty (' + dataRow.NetYarnReqQty + ') !!!');
                    return false;
                }
                //stockPipelineSummary = [];//28/03/24
            }

            initChild(masterData.ChildItems);
        }*/
        else {
            if (!_isPipelineStock) {

                var AdvStockAllocationQty = 0;
                for (var i = 0; i < stockSummary.length; i++) {
                    AdvStockAllocationQty += stockSummary[i].AdvanceAllocationQty
                        + stockSummary[i].SampleAllocationQty
                        + stockSummary[i].LiabilitiesAllocationQty
                        + stockSummary[i].LeftoverAllocationQty;
                }
                var dataRow = masterData.Childs[selectedChildIndex];
                if (_isRevisedChild) {
                    dataRow = masterData.RevisedChilds[selectedChildIndex];
                }

                var totalQty = dataRow.AllocatedQty - dataRow.AdvanceStockAllocationQty + AdvStockAllocationQty;
                if (_isRevisedChild) {
                    masterData.RevisedChilds[selectedChildIndex].ChildItems = stockSummary;
                    masterData.RevisedChilds[selectedChildIndex].AdvanceStockAllocationQty = AdvStockAllocationQty;
                    masterData.RevisedChilds[selectedChildIndex].PendingAllocationQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].AdvanceStockAllocationQty).toFixed(2);

                    var objRC = masterData.RevisedChilds[selectedChildIndex];
                    masterData.RevisedChilds[selectedChildIndex] = setBalancePOQty(objRC);

                }
                else {
                    masterData.Childs[selectedChildIndex].ChildItems = stockSummary;
                    masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty = AdvStockAllocationQty;

                    var objC = masterData.Childs[selectedChildIndex];
                    masterData.Childs[selectedChildIndex] = setBalancePOQty(objC);
                }

                /*
                if (Math.ceil(totalQty) <= Math.ceil(dataRow.NetYarnReqQty)) {
                    if (_isRevisedChild) {
                        masterData.RevisedChilds[selectedChildIndex].ChildItems = stockSummary;
                        masterData.RevisedChilds[selectedChildIndex].AdvanceStockAllocationQty = AdvStockAllocationQty;
                        masterData.RevisedChilds[selectedChildIndex].PendingAllocationQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].AllocatedQty).toFixed(2);
                        masterData.RevisedChilds[selectedChildIndex].BalancePOQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].AllocatedQty - masterData.RevisedChilds[selectedChildIndex].PipelineStockAllocationQty - masterData.RevisedChilds[selectedChildIndex].PlannedPOQty - masterData.RevisedChilds[selectedChildIndex].PlannedPipelineQty).toFixed(2);
                    }
                    else {
                        masterData.Childs[selectedChildIndex].ChildItems = stockSummary;
                        masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty = AdvStockAllocationQty;
                        //masterData.Childs[selectedChildIndex].AllocatedQty = totalQty;
                        masterData.Childs[selectedChildIndex].BalancePOQty = (masterData.Childs[selectedChildIndex].NetYarnReqQty - masterData.Childs[selectedChildIndex].AllocatedQty - masterData.Childs[selectedChildIndex].PipelineStockAllocationQty - masterData.Childs[selectedChildIndex].PlannedPOQty - masterData.Childs[selectedChildIndex].PlannedPipelineQty).toFixed(2);
                    }
                }
                else {
                    toastr.error('Total Qty (' + totalQty + ') cannot be greater than net required qty (' + dataRow.NetYarnReqQty + ') !!!');
                    return false;
                }
                */
                //stockSummary = [];//28/03/24

            }
            else {
                var PLStockAllocationQty = 0;
                for (var i = 0; i < stockPipelineSummary.length; i++) {
                    PLStockAllocationQty += stockPipelineSummary[i].PipelineAllocationQty;
                }
                var dataRow = masterData.Childs[selectedChildIndex];
                if (_isRevisedChild) {
                    dataRow = masterData.RevisedChilds[selectedChildIndex];
                }
                var totalQty = dataRow.AllocatedQty + dataRow.PlannedPipelineQty + dataRow.PlannedPOQty + dataRow.QtyForPO + PLStockAllocationQty;
                if (_isRevisedChild) {
                    masterData.RevisedChilds[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                    masterData.RevisedChilds[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                    masterData.RevisedChilds[selectedChildIndex].TotalAllocatedQty = totalQty;
                    masterData.RevisedChilds[selectedChildIndex].PendingAllocationQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].AllocatedQty).toFixed(2);

                    var objRC = masterData.RevisedChilds[selectedChildIndex];
                    masterData.RevisedChilds[selectedChildIndex] = setBalancePOQty(objRC);
                }
                else {
                    masterData.Childs[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                    masterData.Childs[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                    masterData.Childs[selectedChildIndex].TotalAllocatedQty = totalQty;

                    var objC = masterData.Childs[selectedChildIndex];
                    masterData.Childs[selectedChildIndex] = setBalancePOQty(objC);
                }
                /*
                if (Math.ceil(totalQty) <= Math.ceil(dataRow.NetYarnReqQty)) {
                    if (_isRevisedChild) {
                        masterData.RevisedChilds[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                        masterData.RevisedChilds[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                        masterData.RevisedChilds[selectedChildIndex].TotalAllocatedQty = totalQty;
                        masterData.RevisedChilds[selectedChildIndex].PendingAllocationQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].AllocatedQty).toFixed(2);
                        masterData.RevisedChilds[selectedChildIndex].BalancePOQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].TotalAllocatedQty).toFixed(2);

                    }
                    else {
                        masterData.Childs[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                        masterData.Childs[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                        masterData.Childs[selectedChildIndex].TotalAllocatedQty = totalQty;
                        //masterData.Childs[selectedChildIndex].BalancePOQty = (masterData.Childs[selectedChildIndex].NetYarnReqQty - dataRow.AllocatedQty - masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty - masterData.Childs[selectedChildIndex].PipelineStockAllocationQty - masterData.Childs[selectedChildIndex].PlannedPOQty - masterData.Childs[selectedChildIndex].PlannedPipelineQty).toFixed(2);
                        masterData.Childs[selectedChildIndex].BalancePOQty = (masterData.Childs[selectedChildIndex].NetYarnReqQty - masterData.Childs[selectedChildIndex].TotalAllocatedQty).toFixed(2);
                    }
                }
                else {
                    toastr.error('Total Qty (' + totalQty + ') cannot be greater than net required qty (' + dataRow.NetYarnReqQty + ') !!!');
                    return false;
                }
                */
                //stockPipelineSummary = [];//28/03/24
            }

            if (_isRevisedChild) {
                masterData.RevisedChilds[selectedChildIndex].TotalAllocationQty = masterData.RevisedChilds[selectedChildIndex].AdvanceStockAllocationQty;//TotalAllocationQty(masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty, masterData.Childs[selectedChildIndex].PipelineStockAllocationQty, masterData.Childs[selectedChildIndex].QtyForPO);
                initRevisedChild(masterData.RevisedChilds);
            }
            else {
                masterData.Childs[selectedChildIndex].TotalAllocationQty = masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty;//TotalAllocationQty(masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty, masterData.Childs[selectedChildIndex].PipelineStockAllocationQty, masterData.Childs[selectedChildIndex].QtyForPO);
                initChild(masterData.Childs);
            }
        }

        $modalPlanningEl.modal('hide');

    }

    function setBalancePOQty(obj) {
        obj.NetYarnReqQty = getDefaultValueWhenInvalidN_Float(obj.NetYarnReqQty);
        obj.PendingAllocationQty = getDefaultValueWhenInvalidN_Float(obj.PendingAllocationQty);
        obj.PlannedPipelineQty = getDefaultValueWhenInvalidN_Float(obj.PlannedPipelineQty);
        obj.PlannedPOQty = getDefaultValueWhenInvalidN_Float(obj.PlannedPOQty);
        obj.AdvanceStockAllocationQty = getDefaultValueWhenInvalidN_Float(obj.AdvanceStockAllocationQty);
        obj.PipelineStockAllocationQty = getDefaultValueWhenInvalidN_Float(obj.PipelineStockAllocationQty);

        obj.TotalAllocatedQty = getDefaultValueWhenInvalidN_Float(obj.TotalAllocatedQty);

        if (status == statusConstants.PENDING) {
            obj.BalancePOQty = obj.PendingAllocationQty - (obj.PlannedPipelineQty + obj.PlannedPOQty + obj.AdvanceStockAllocationQty + obj.PipelineStockAllocationQty);
        } else {
            obj.BalancePOQty = obj.PendingAllocationQty - (obj.PlannedPipelineQty + obj.PlannedPOQty);
        }
        obj.BalancePOQty = obj.BalancePOQty < 0 ? 0 : obj.BalancePOQty;
        obj.BalancePOQty = parseFloat(obj.BalancePOQty.toFixed(2));
        return obj;
    }

    function btnOKClickWithCopy(allocationFromStock) {


        var selectedItemMasterID = masterData.Childs[selectedChildIndex].ItemMasterID;
        var selectedYBChildItemID = masterData.Childs[selectedChildIndex].YBChildItemID;
        var childsWithSameItemMasterID = masterData.Childs.filter(x => x.ItemMasterID == selectedItemMasterID && x.YBChildItemID != selectedYBChildItemID);
        if (_isRevisedChild) {
            selectedItemMasterID = masterData.RevisedChilds[selectedChildIndex].ItemMasterID;
            selectedYBChildItemID = masterData.RevisedChilds[selectedChildIndex].YBChildItemID;
            childsWithSameItemMasterID = masterData.RevisedChilds.find(x => x.ItemMasterID == selectedItemMasterID && x.YBChildItemID != selectedYBChildItemID);
        }
        if (_isYAApprove && status == statusConstants.ACKNOWLEDGE) {

            masterData.ChildItems = stockSummary;
            initChild(masterData.ChildItems);

        }
        else if (_isYAApprove && status == statusConstants.UN_ACKNOWLEDGE) {
            if (!_isPipelineStock) {

                var AdvStockAllocationQty = 0;
                var TAdvanceAllocationQty = 0;
                var TSampleAllocationQty = 0;
                var TLiabilitiesAllocationQty = 0;
                var TLeftoverAllocationQty = 0;

                for (var i = 0; i < stockSummary.length; i++) {
                    AdvStockAllocationQty += stockSummary[i].AdvanceAllocationQty
                        + stockSummary[i].SampleAllocationQty
                        + stockSummary[i].LiabilitiesAllocationQty
                        + stockSummary[i].LeftoverAllocationQty;

                    TAdvanceAllocationQty += stockSummary[i].AdvanceAllocationQty;
                    TSampleAllocationQty += stockSummary[i].SampleAllocationQty;
                    TLiabilitiesAllocationQty += stockSummary[i].LiabilitiesAllocationQty;
                    TLeftoverAllocationQty += stockSummary[i].LeftoverAllocationQty;
                }

                masterData.ChildItems[selectedChildIndex].TotalAllocationQty = AdvStockAllocationQty;
                masterData.ChildItems[selectedChildIndex].AdvanceAllocationQty = TAdvanceAllocationQty;
                masterData.ChildItems[selectedChildIndex].SampleAllocationQty = TSampleAllocationQty;
                masterData.ChildItems[selectedChildIndex].LiabilitiesAllocationQty = TLiabilitiesAllocationQty;
                masterData.ChildItems[selectedChildIndex].LeftoverAllocationQty = TLeftoverAllocationQty;

                //stockSummary = [];//28/03/24

            }
            else {
                var PLStockAllocationQty = 0;
                for (var i = 0; i < stockPipelineSummary.length; i++) {
                    PLStockAllocationQty += stockPipelineSummary[i].PipelineAllocationQty;
                }
                var dataRow = masterData.Childs[selectedChildIndex];
                if (_isRevisedChild) {
                    dataRow = masterData.RevisedChilds[selectedChildIndex];
                }
                var totalQty = dataRow.AllocatedQty + dataRow.PlannedPipelineQty + dataRow.PlannedPOQty + dataRow.AdvanceStockAllocationQty + dataRow.QtyForPO + PLStockAllocationQty;
                if (_isRevisedChild) {
                    masterData.RevisedChilds[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                    masterData.RevisedChilds[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                }
                else {
                    masterData.Childs[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                    masterData.Childs[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                }
            }

            initChild(masterData.ChildItems);
        }
        else {
            if (!_isPipelineStock) {
                var AdvStockAllocationQty = 0;
                for (var i = 0; i < stockSummary.length; i++) {
                    AdvStockAllocationQty += stockSummary[i].AdvanceAllocationQty
                        + stockSummary[i].SampleAllocationQty
                        + stockSummary[i].LiabilitiesAllocationQty
                        + stockSummary[i].LeftoverAllocationQty;
                }
                var AdvStockQty = 0;
                if (allocationFromStock == 'AdvanceAllocationQty') {
                    AdvStockQty = stockSummary[0].AdvanceStockQty - AdvStockAllocationQty;
                }
                else if (allocationFromStock == 'SampleAllocationQty') {
                    AdvStockQty = stockSummary[0].SampleStockQty - AdvStockAllocationQty;
                }
                else if (allocationFromStock == 'LiabilitiesAllocationQty') {
                    AdvStockQty = stockSummary[0].LiabilitiesStockQty - AdvStockAllocationQty;
                }
                else if (allocationFromStock == 'LeftoverAllocationQty') {
                    AdvStockQty = stockSummary[0].LeftoverStockQty - AdvStockAllocationQty;
                }

                var dataRow = masterData.Childs[selectedChildIndex];
                if (_isRevisedChild) {
                    dataRow = masterData.RevisedChilds[selectedChildIndex];
                }
                var totalQty = dataRow.AllocatedQty + AdvStockAllocationQty;
                if (_isRevisedChild) {
                    masterData.RevisedChilds[selectedChildIndex].ChildItems = stockSummary;
                    masterData.RevisedChilds[selectedChildIndex].AdvanceStockAllocationQty = AdvStockAllocationQty;
                    masterData.RevisedChilds[selectedChildIndex].TotalAllocatedQty = totalQty;

                    masterData.RevisedChilds[selectedChildIndex].PendingAllocationQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].TotalAllocatedQty).toFixed(2);

                    var objRC = masterData.RevisedChilds[selectedChildIndex];
                    masterData.RevisedChilds[selectedChildIndex] = setBalancePOQty(objRC);
                }
                else {
                    masterData.Childs[selectedChildIndex].ChildItems = stockSummary;
                    masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty = AdvStockAllocationQty;
                    masterData.Childs[selectedChildIndex].TotalAllocatedQty = totalQty;

                    var objC = masterData.Childs[selectedChildIndex];
                    masterData.Childs[selectedChildIndex] = setBalancePOQty(objC);
                }

                if (typeof childsWithSameItemMasterID !== "undefined" && childsWithSameItemMasterID.length > 0) {
                    for (var i = 0; i < childsWithSameItemMasterID.length; i++) {
                        dataRow = childsWithSameItemMasterID[i];
                        if (dataRow.PendingAllocationQty <= AdvStockQty) {
                            AdvStockAllocationQty = dataRow.PendingAllocationQty;
                            var totalQty = dataRow.AllocatedQty + AdvStockAllocationQty;
                            stockSummary = DeepClone(stockSummary);
                            if (allocationFromStock == 'AdvanceAllocationQty') {
                                stockSummary[0].AdvanceAllocationQty = AdvStockAllocationQty;
                            }
                            else if (allocationFromStock == 'SampleAllocationQty') {
                                stockSummary[0].SampleAllocationQty = AdvStockAllocationQty;
                            }
                            else if (allocationFromStock == 'LiabilitiesAllocationQty') {
                                stockSummary[0].LiabilitiesAllocationQty = AdvStockAllocationQty;
                            }
                            else if (allocationFromStock == 'LeftoverAllocationQty') {
                                stockSummary[0].LeftoverAllocationQty = AdvStockAllocationQty;
                            }

                            var thisYBChildItemID = childsWithSameItemMasterID[i].YBChildItemID;
                            if (_isRevisedChild) {
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).ChildItems = stockSummary;
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).AdvanceStockAllocationQty = AdvStockAllocationQty;
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty = totalQty;
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).PendingAllocationQty =
                                    (masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).NetYarnReqQty
                                        - masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty).toFixed(2);

                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).AllocatedQty = dataRow.AllocatedQty;

                                var indexF = masterData.RevisedChilds.findIndex(x => x.YBChildItemID == thisYBChildItemID);
                                if (indexF > -1) {
                                    var objRC = masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID);
                                    masterData.RevisedChilds[indexF] = setBalancePOQty(objRC);
                                }
                            }
                            else {
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).ChildItems = stockSummary;
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).AdvanceStockAllocationQty = AdvStockAllocationQty;
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty = totalQty;
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).AllocatedQty = dataRow.AllocatedQty;

                                var indexF = masterData.Childs.findIndex(x => x.YBChildItemID == thisYBChildItemID);
                                if (indexF > -1) {
                                    var objC = masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID);
                                    masterData.Childs[indexF] = setBalancePOQty(objC);
                                }
                            }
                            AdvStockQty = AdvStockQty - dataRow.PendingAllocationQty;

                            /*
                            if (Math.ceil(totalQty) <= Math.ceil(dataRow.NetYarnReqQty)) {
                                if (_isRevisedChild) {
                                    masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).ChildItems = stockSummary;
                                    masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).AdvanceStockAllocationQty = AdvStockAllocationQty;
                                    masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty = totalQty;
                                    masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).PendingAllocationQty =
                                        (masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).NetYarnReqQty
                                            - masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty).toFixed(2);

                                    masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).BalancePOQty =
                                        (masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).NetYarnReqQty
                                            - dataRow.AllocatedQty
                                            - masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).AdvanceStockAllocationQty
                                            - masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).PipelineStockAllocationQty
                                            - masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).PlannedPOQty
                                            - masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).PlannedPipelineQty
                                        ).toFixed(2);
                                }
                                else {
                                    masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).ChildItems = stockSummary;
                                    masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).AdvanceStockAllocationQty = AdvStockAllocationQty;
                                    masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty = totalQty;
                                    masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).BalancePOQty =
                                        (masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).NetYarnReqQty
                                            - dataRow.AllocatedQty
                                            - masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).AdvanceStockAllocationQty
                                            - masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).PipelineStockAllocationQty
                                            - masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).PlannedPOQty
                                            - masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).PlannedPipelineQty
                                        ).toFixed(2);
                                }
                                AdvStockQty = AdvStockQty - dataRow.PendingAllocationQty;
                            }
                            else {
                                toastr.error('Total Qty (' + totalQty + ') cannot be greater than net required qty (' + dataRow.NetYarnReqQty + ') !!!');
                                return false;
                            }
                            */

                        }
                    }
                }
            }
            else {

                var PLStockAllocationQty = 0;
                for (var i = 0; i < stockPipelineSummary.length; i++) {
                    PLStockAllocationQty += stockPipelineSummary[i].PipelineAllocationQty;
                }

                var PLStockQty = 0;
                PLStockQty = stockPipelineSummary[0].PipelineStockQty - PLStockAllocationQty;


                var dataRow = masterData.Childs[selectedChildIndex];
                if (_isRevisedChild) {
                    dataRow = masterData.RevisedChilds[selectedChildIndex];
                }
                var totalQty = dataRow.AllocatedQty + dataRow.AdvanceStockAllocationQty + dataRow.QtyForPO + PLStockAllocationQty;

                if (_isRevisedChild) {
                    masterData.RevisedChilds[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                    masterData.RevisedChilds[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                    masterData.RevisedChilds[selectedChildIndex].TotalAllocatedQty = totalQty;
                    masterData.RevisedChilds[selectedChildIndex].PendingAllocationQty = (masterData.RevisedChilds[selectedChildIndex].NetYarnReqQty - masterData.RevisedChilds[selectedChildIndex].TotalAllocatedQty).toFixed(2);

                    var objRC = masterData.RevisedChilds[selectedChildIndex];
                    masterData.RevisedChilds[selectedChildIndex] = setBalancePOQty(objRC);
                }
                else {
                    masterData.Childs[selectedChildIndex].ChildPipelineItems = stockPipelineSummary;
                    masterData.Childs[selectedChildIndex].PipelineStockAllocationQty = PLStockAllocationQty;
                    masterData.Childs[selectedChildIndex].TotalAllocatedQty = totalQty;

                    var objC = masterData.Childs[selectedChildIndex];
                    masterData.Childs[selectedChildIndex] = setBalancePOQty(objC);
                }

                if (typeof childsWithSameItemMasterID !== "undefined" && childsWithSameItemMasterID.length > 0) {
                    for (var i = 0; i < childsWithSameItemMasterID.length; i++) {
                        dataRow = childsWithSameItemMasterID[i];
                        PLStockAllocationQty = dataRow.PendingAllocationQty - dataRow.AdvanceStockAllocationQty;
                        if (PLStockAllocationQty <= PLStockQty) {
                            var totalQty = dataRow.AllocatedQty + dataRow.AdvanceStockAllocationQty + dataRow.QtyForPO + PLStockAllocationQty;

                            stockPipelineSummary = DeepClone(stockPipelineSummary);
                            stockPipelineSummary[0].PipelineAllocationQty = PLStockAllocationQty;


                            var thisYBChildItemID = childsWithSameItemMasterID[i].YBChildItemID;

                            if (_isRevisedChild) {
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).ChildPipelineItems = stockPipelineSummary;
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).PipelineStockAllocationQty = PLStockAllocationQty;
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty = totalQty;
                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).PendingAllocationQty = (masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).NetYarnReqQty - masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty).toFixed(2);

                                masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID).AllocatedQty = dataRow.AllocatedQty;

                                var indexF = masterData.RevisedChilds.findIndex(x => x.YBChildItemID == thisYBChildItemID);
                                if (indexF > -1) {
                                    var objRC = masterData.RevisedChilds.find(x => x.YBChildItemID == thisYBChildItemID);
                                    masterData.RevisedChilds[indexF] = setBalancePOQty(objRC);
                                }

                                PLStockQty = PLStockQty - PLStockAllocationQty;
                            }
                            else {
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).ChildPipelineItems = stockPipelineSummary;
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).PipelineStockAllocationQty = PLStockAllocationQty;
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).TotalAllocatedQty = totalQty;
                                masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID).AllocatedQty = dataRow.AllocatedQty;

                                var indexF = masterData.Childs.findIndex(x => x.YBChildItemID == thisYBChildItemID);
                                if (indexF > -1) {
                                    var objC = masterData.Childs.find(x => x.YBChildItemID == thisYBChildItemID);
                                    masterData.Childs[indexF] = setBalancePOQty(objC);
                                }
                            }
                        }
                    }
                }
            }

            if (_isRevisedChild) {
                masterData.RevisedChilds[selectedChildIndex].TotalAllocationQty = masterData.RevisedChilds[selectedChildIndex].AdvanceStockAllocationQty;//TotalAllocationQty(masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty, masterData.Childs[selectedChildIndex].PipelineStockAllocationQty, masterData.Childs[selectedChildIndex].QtyForPO);
                initRevisedChild(masterData.RevisedChilds);
            }
            else {
                masterData.Childs[selectedChildIndex].TotalAllocationQty = masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty;//TotalAllocationQty(masterData.Childs[selectedChildIndex].AdvanceStockAllocationQty, masterData.Childs[selectedChildIndex].PipelineStockAllocationQty, masterData.Childs[selectedChildIndex].QtyForPO);
                initChild(masterData.Childs);
            }
        }

        $modalPlanningEl.modal('hide');
    }
    function backToList() {
        $divDetailsEl.fadeOut();
        $divAdvanceFilterId.fadeIn();
        advanceSearchHideShow();

        resetForm();
        $divTblEl.fadeIn();
        if (status === statusConstants.NEW) {
            status = statusConstants.PENDING;
            toggleActiveToolbarBtn("#btnPendingList", $toolbarEl);
        }
        _isFirstTimePageLoad = true;
        if (status != statusConstants.PENDING) {
            resetAllFilters(true);
        }
        initMasterTable(false);
        //$tblMasterEl.refresh();
        initMasterTable2([]);
    }

    function resetForm() {
        $formEl.trigger("reset");
        $formEl.find("#SFDID").val(-1111);
    }
    function handleCommands(args) {
        if (args.commandColumn.type == 'Edit') {
            //if (args.rowData.IsInValidOperation) {
            //    toastr.error("Yarn allocation revision pending.");
            //    return false;
            //}

            if ((_isYAAck && status == statusConstants.APPROVED) || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE) {
                //if (args.rowData.IsAllocationInternalRevise) {
                //    toastr.error("Revision Pending!");
                //    return;
                //}
                getViewAck(args.rowData.AllocationChildItemID);
            }
            else {
                getView(args.rowData.YarnAllocationID);
            }
        }
        else if (args.commandColumn.type == 'View') {

            if (args.rowData.IsInValidOperation) {
                toastr.error("Yarn booking revision pending.");
                return false;
            }

            if ((_isYAAck && status == statusConstants.APPROVED) || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE) {
                if (_isYAApprove && status == statusConstants.UN_ACKNOWLEDGE) {
                    $formEl.find(".clsAllocationChildBasicInfo").show();
                } else {
                    $formEl.find(".clsAllocationChildBasicInfo").hide();
                }
                getViewAck(args.rowData.AllocationChildItemID);
            }
            else {
                getView(args.rowData.YarnAllocationID);
            }
        }
        else if (args.commandColumn.type == 'Allocation Report') {
            window.open(`/reports/InlinePdfView?ReportName=YarnAllocationInfo.rdl&AllocationNo=${args.rowData.YarnAllocationNo}`, '_blank');
        }
        else if (args.commandColumn.type == 'Booking Report') {
            window.open(`/reports/InlinePdfView?ReportName=BookingInformationFabricMainAck.rdl&BookingNo=${args.rowData.BookingNo}`, '_blank');
        }
        else if (args.commandColumn.type == 'View Allocations') {
            viewAllocations(args.rowData.BookingNo);
        }
        else if (args.commandColumn.type == 'View Attachment') {
            if (args.rowData.ImagePath == '' || args.rowData.ImagePath == null) {
                toastr.error("No attachment found!!");
            } else {
                var url = window.location.href;
                var path = "";
                if (url.includes("8060") || url.includes("local")) {
                    path = constants.GMT_ERP_LOCAL_PATH;
                } else {
                    path = constants.GMT_ERP_BASE_PATH;
                }
                var imagePath = path + args.rowData.ImagePath;
                window.open(imagePath, "_blank");
            }
        }
        else if (args.commandColumn.type == 'Delete') {
            var currentList = $tblMasterEl2.getCurrentViewRecords();
            currentList = currentList.filter(x => x.YBChildItemID != args.rowData.YBChildItemID);
            initMasterTable2(currentList);
        }
    }

    function viewAllocations(bookingNo) {
        if (getDefaultValueWhenInvalidS(bookingNo).length == 0) {
            toastr.error("Booking no missing");
            return false;
        }


        var modalObj = ch_GenerateBasicModal($formEl, false);
        var $tblTempEl;

        var columnList = [
            {
                field: 'BookingNo', headerText: 'Booking No', width: 80
            },
            {
                field: 'BuyerName', headerText: 'Buyer', width: 100
            },
            {
                field: 'FabricType', headerText: 'Fabric Type', width: 80
            },
            {
                field: 'ReqYarnDetails', headerText: 'Req Yarn Details', width: 130
            },
            {
                field: 'ShadeCode', headerText: 'Shade Code', width: 100
            },
            {
                field: 'PhysicalCount', headerText: 'Physical Count', width: 80
            },
            {
                field: 'PhysicalLot', headerText: 'Physical Lot', width: 80
            },
            {
                field: 'Spinner', headerText: 'Spinner', width: 100
            },
            {
                field: 'AllocatedYarnDetails', headerText: 'Allocated Yarn Details', width: 130
            },
            {
                field: 'AllocatedQty', headerText: 'Allocation Qty', width: 80
            }
        ];

        var apiUrl = `/api/yarn-allocation/get-allocations-by-bookingNo/${bookingNo}`;
        if ($tblTempEl) $tblTempEl.destroy();
        $tblTempEl = new initEJ2Grid({
            tableId: modalObj.modalTableId,
            autofitColumns: true,
            apiEndPoint: apiUrl,
            columns: columnList,
            allowSorting: true,
            editSettings: { allowAdding: false, allowEditing: false, allowDeleting: false, mode: "Normal" },
        });
    }
    function getView(YarnAllocationID) {
        var url = `/api/yarn-allocation/GetDetails/${YarnAllocationID}`;
        axios.get(url)
            .then(function (response) {
                $divTblEl.fadeOut();
                $divDetailsEl.fadeIn();
                $divAdvanceFilterId.fadeOut();

                masterData = response.data;
                masterData.YarnAllocationDate = formatDateToDefault(new Date());
                loadTimeMasterData = DeepClone(masterData);
                setFormData($formEl, masterData);

                initSummaryChild(masterData.SummaryChilds);
                //masterData.Childs.map(item => {
                //    item.NetYarnReqQty = getNetYarnReqQty(item);
                //});
                if (_isYA && status == statusConstants.REVISE) {
                    initRevisedChild(masterData.RevisedChilds);
                    $formEl.find("#divRevItemInfo").show();
                }
                else {
                    $formEl.find("#divRevItemInfo").hide();
                }
                initChild(masterData.Childs);

                HoldOn.close();
            })
            .catch(showResponseError)
    }
    function getViewAck(AllocationChildItemID) {

        resetGlobals();
        var url = `/api/yarn-allocation/GetDetailsAck/${AllocationChildItemID}`;
        axios.get(url)
            .then(function (response) {
                $divTblEl.fadeOut();
                $divDetailsEl.fadeIn();
                $divAdvanceFilterId.hide();

                masterData = response.data;
                masterData.YarnAllocationDate = formatDateToDefault(new Date());
                loadTimeMasterData = DeepClone(masterData);
                setFormData($formEl, masterData);

                _isAutoGenerated = masterData.IsAutoGenerate;

                if (masterData.ChildItems.length > 0) {
                    _allocationChildId = masterData.ChildItems[0].AllocationChildID;
                    _yarnStockSetId = masterData.ChildItems[0].YarnStockSetId;
                    _allocationChildItemID = masterData.ChildItems[0].AllocationChildItemID;
                }
                initChild(masterData.ChildItems);
                initSummaryChild(masterData.SummaryChilds);

                HoldOn.close();

                if (_isYAAck && status == statusConstants.APPROVED) {
                    var modalTitle = "Item : " + masterData.ChildItems[0].ReqYarnDetails;
                    CM_StockOperation_GetAllStocks_For_View(".divDisplayAllStock", null, modalTitle);
                }
            })
            .catch(showResponseError)
    }
    function advanceSearchHideShow() {
        $divAdvanceFilterId.hide();
        $(".clsAdvanceFilterItem").hide();
        if (status == statusConstants.PENDING) {
            $divAdvanceFilterId.show();
            $(".clsAdvanceFilterItem").show();
        }
    }
    function clearSelectedItems() {
        initMasterTable2([]);
    }
    function createYarnAllocation(row) {
        stockSummary = [];
        stockPipelineSummary = [];
        var selectedRows = $tblMasterEl2.getCurrentViewRecords();
        if (selectedRows.length == 0) {
            toastr.error("Please select row(s)!");
            return;
        }
        var uniqueAry = distinctArrayByProperty(selectedRows, "BuyerId");
        if (uniqueAry.length != 1) {
            toastr.error("Selected row(s) buyer should be same!");
            return;
        }

        HoldOn.open({
            theme: "sk-circle"
        });

        var isContinue = true;
        var yBookingNos = [];
        var revisionPendingList = DeepClone(selectedRows.filter(x => x.IsRevisionPending == true));
        revisionPendingList.map(x => {
            var indexF = yBookingNos.findIndex(c => c == x.YBookingNo);
            if (indexF < 0) yBookingNos.push(x.YBookingNo);
        });
        if (yBookingNos.length > 0) {
            var message = `Yarn Booking Nos : ${yBookingNos.join(',')} revision pending, Do you want to continue without these yarn bookings ?`;
            if (confirm(message)) {
                isContinue = true;
            } else {
                isContinue = false;
            }
        }

        if (!isContinue) {
            HoldOn.close();
            return false;
        }

        selectedRows = selectedRows.filter(x => x.IsRevisionPending == false);
        if (selectedRows.length == 0) {
            HoldOn.close();
            toastr.error("No booking found.");
            return false;
        }
        var selectedDatas = selectedRows.map(x => x.YBChildItemID);
        if (selectedDatas.length > _maximumSelectedItem) {
            return toastr.error(`You can select maximum ${_maximumSelectedItem} items at a time.`);
        }

        var data = {
            IDs: selectedDatas
        };

        var url = `/api/yarn-allocation/GetSelectedData`;
        axios.post(url, data)
            .then(function (response) {
                $divTblEl.fadeOut();
                $divDetailsEl.fadeIn();
                $divAdvanceFilterId.hide();

                masterData = response.data;
                masterData.YarnAllocationDate = formatDateToDefault(new Date());
                loadTimeMasterData = DeepClone(masterData);
                setFormData($formEl, masterData);

                initSummaryChild(masterData.SummaryChilds);
                //masterData.Childs.map(item => {
                //    item.NetYarnReqQty = getNetYarnReqQty(item);
                //});
                //initChild(masterData.SummaryChilds);
                initChild(masterData.Childs);
                if (_isYA && status == statusConstants.REVISE) {
                    $formEl.find("#divRevItemInfo").show();
                }
                else {
                    $formEl.find("#divRevItemInfo").hide();
                }
                HoldOn.close();
            })
            .catch(function (error) {
                toastr.error(error.response.data.Message);
            });


        /*
        var ybChildItemID = selectedRows.map(x => x.YBChildItemID).join(',');
        var url = `/api/yarn-allocation/new/${ybChildItemID}`;
        axios.get(url)
            .then(function (response) {
                $divTblEl.fadeOut();
                $divDetailsEl.fadeIn();
                $divAdvanceFilterId.hide();

                masterData = response.data;
                masterData.YarnAllocationDate = formatDateToDefault(new Date());
                loadTimeMasterData = DeepClone(masterData);
                setFormData($formEl, masterData);

                initSummaryChild(masterData.SummaryChilds);
                //masterData.Childs.map(item => {
                //    item.NetYarnReqQty = getNetYarnReqQty(item);
                //});
                //initChild(masterData.SummaryChilds);
                initChild(masterData.Childs);
                if (_isYA && status == statusConstants.REVISE) {
                    $formEl.find("#divRevItemInfo").show();
                }
                else {
                    $formEl.find("#divRevItemInfo").hide();
                }
                HoldOn.close();
            })
            .catch(showResponseError)
        */
    }
    function initSummaryChild(data) {
        if ($tblChildBookingEl) $tblChildBookingEl.destroy();

        $tblChildBookingEl = new ej.grids.Grid({
            dataSource: data,
            allowResizing: true,
            allowPaging: false,
            autofitColumns: true,
            editSettings: {
                allowEditing: false,
                allowAdding: false,
                allowDeleting: true,
                mode: "Normal",
                showDeleteConfirmDialog: true
            },
            columns: [
                {
                    headerText: 'Commands', width: 80, visible: (_isYA == true && status == statusConstants.PENDING) || (_isYAApprove == true && status == statusConstants.PROPOSED_FOR_APPROVAL), commands: [
                        { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-delete' } },
                        //{ type: 'Save', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-update' } },
                        //{ type: 'Cancel', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-cancel-icon' } }
                        { type: 'View Allocation Report', buttonOption: { cssClass: 'e-flat', iconCss: 'fa fa-file-pdf-o' } }
                    ]
                },
                //{
                //    field: 'YBChildItemID', headerText: 'YBChildItemID', width: 100, visible: false
                //},
                //{
                //    field: 'YBChildID', headerText: 'YBChildID', width: 100, visible: false
                //},
                //{
                //    field: 'YBookingNo', headerText: 'Yarn Booking', width: 120, allowEditing: false
                //},
                //{
                //    field: 'BuyerName', headerText: 'Buyer', width: 120, allowEditing: false
                //},
                //{
                //    field: 'BuyerTeamName', headerText: 'Buyer Team', width: 120, allowEditing: false
                //},
                //{
                //    field: 'SeasonName', headerText: 'Season', width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnReqDate', headerText: 'Yarn Req Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                //},
                //{
                //    field: 'YanrInhouseDate', headerText: 'Yarn Inhouse Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnPly', headerText: 'Yarn Ply', width: 100, allowEditing: false
                //},
                //{
                //    field: 'NumericCount', headerText: 'Numeric Count', width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnCategory', headerText: 'Yarn Category', width: 140, allowEditing: false
                //},
                //{
                //    field: 'LotRef', headerText: 'Lot Ref', width: 100, allowEditing: false
                //},
                //{
                //    field: 'RefSpinner', headerText: 'Ref Spinner', width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnReqQty', headerText: 'Yarn Req Qty', width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnStock', headerText: 'Yarn Stock', width: 100, allowEditing: false
                //},
                //{
                //    field: 'YD', headerText: 'YD', width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnCertification', headerText: 'Yarn Certification', width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnBookingStatus', headerText: 'Yarn Booking Status', width: 100, allowEditing: false
                //},
                //{
                //    field: 'FabricType', headerText: 'Fabric Type', width: 100, allowEditing: false
                //},
                //{
                //    field: 'FabricColor', headerText: 'Fabric Color', width: 100, allowEditing: false
                //},
                //{
                //    field: 'FabricQty', headerText: 'Fabric Qty', width: 100, allowEditing: false
                //},
                //{
                //    field: 'FabricDelStartDate', headerText: 'Delivery Start Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                //},
                //{
                //    field: 'FabricDelEndDate', headerText: 'Delivery End Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                //},
                //{
                //    field: 'Remarks', headerText: 'Remarks', width: 100, allowEditing: false
                //}
                {
                    field: 'YBookingNo', headerText: 'Yarn Booking No', width: 100
                },
                {
                    field: 'BuyerName', headerText: 'Buyer Name', width: 100
                },
                {
                    field: 'BuyerTeamName', headerText: 'Buyer Team', width: 100
                },
            ],
            actionBegin: function (args) {
                if (args.requestType === "add") {

                }
                else if (args.requestType === "save") {

                }
                else if (args.requestType.toLowerCase() === "delete") {

                    var indicesToDelete = [];
                    for (var i = 0; i < masterData.Childs.length; i++) {
                        if (masterData.Childs[i].YBookingNo == args.data[0].YBookingNo) {
                            //const indexToDelete = masterData.Childs.findIndex(item => item.YBookingNo === args.data[0].YBookingNo);

                            //if (indexToDelete !== -1) {
                            indicesToDelete.push(i);
                            //masterData.Childs.splice(indexToDelete, 1);
                            //}
                        }
                    }
                    indicesToDelete.sort((a, b) => b - a);
                    for (const index of indicesToDelete) {
                        masterData.Childs.splice(index, 1);
                    }
                    initChild(masterData.Childs);
                }
            },
            commandClick: handleCommandsSummary,
        });
        $tblChildBookingEl.refreshColumns;
        $tblChildBookingEl.appendTo(tblChildBookingId);
    }
    function handleCommandsSummary(args) {
        if (args.commandColumn.type == 'View Allocation Report') {
            var exportOrderNo = args.rowData.YBookingNo.split('-')[0];
            window.open(`/reports/InlinePdfView?ReportName=EWOWiseYarnAllocationInfo.rdl&ExportOrderNo=${exportOrderNo}`, '_blank');
        }
    }

    function initChild(data) {
        if ($tblChildEl) $tblChildEl.destroy();

        var nSLNo = 1;
        data.map(x => {
            x.SLNo = nSLNo++;
        });

        var columns;
        if ((_isYAAck && status == statusConstants.APPROVED) || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE) {
            columns = [
                /*{
                    headerText: 'Commands', width: 80, commands: [
                        { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-delete' } },
                        //{ type: 'Save', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-update' } },
                        //{ type: 'Cancel', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-cancel-icon' } }
                    ]
                },*/
                {
                    field: 'SLNo', headerText: 'SL', width: 40, textAlign: 'center', allowEditing: false
                },
                {
                    field: 'AllocationChildItemID', isPrimaryKey: true, width: 10, visible: false
                },
                {
                    field: 'YarnStockSetId', headerText: 'YarnStockSetId', width: 20, allowEditing: false, visible: false
                },
                {
                    field: 'BookingNo', headerText: 'Booking No', width: 50, allowEditing: false
                },
                {
                    field: 'YarnCategory', headerText: 'Allocated Yarn Details', width: 130, allowEditing: false
                },
                {
                    field: 'AllocatedCount', headerText: 'Allocated Count', width: 80
                },
                {
                    field: 'PhysicalCount', headerText: 'Physical Count', width: 80, allowEditing: false
                },
                {
                    field: 'PhysicalLot', headerText: 'Physical Lot', width: 80, allowEditing: false
                },
                {
                    field: 'Spinner', headerText: 'Spinner', width: 100, allowEditing: false
                },
                {
                    field: 'TotalAllocationQty', headerText: 'Allocation Qty (KG)', textAlign: 'center', width: 85, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                //{
                //    field: 'BuyerName', headerText: 'Buyer Name', width: 80, allowEditing: false
                //},
                {
                    field: 'FabricType', headerText: 'Fabric Type', width: 80, allowEditing: false
                },
                {
                    field: 'ShadeCode', headerText: 'Shade Code', width: 80, allowEditing: false
                },
                {
                    field: 'LotNo', headerText: 'Reference Lot (If Any)', width: 100, allowEditing: false
                },
                {
                    field: 'UnAcknowledgeReason', headerText: 'UnAcknowledge Reason', width: 100, allowEditing: true, visible: status == statusConstants.UN_ACKNOWLEDGE
                },
                {
                    field: 'FabricColor', headerText: 'Fabric Color', width: 60
                },
                {
                    field: 'ReqYarnDetails', headerText: 'Required Yarn Details', width: 130
                },
                {
                    field: 'ReqCount', headerText: 'Required Count', width: 80
                },
                {
                    field: 'Remarks', headerText: 'Remarks', width: 100, allowEditing: true
                }
            ];
        }
        else {
            columns = [
                {
                    headerText: 'Commands', width: 80, visible: (_isYA == true && status == statusConstants.PENDING) || (_isYAApprove == true && status == statusConstants.PROPOSED_FOR_APPROVAL), commands: [
                        { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-delete' } },
                        //{ type: 'Save', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-update' } },
                        //{ type: 'Cancel', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-cancel-icon' } }
                    ]
                },
                {
                    field: 'SLNo', headerText: 'SL', width: 40, textAlign: 'center', allowEditing: false
                },
                {
                    field: 'YBChildItemID', headerText: 'YBChildItemID', isPrimaryKey: true, width: 100, visible: false
                },
                {
                    field: 'YBChildID', headerText: 'YBChildID', width: 100, visible: false
                },
                {
                    field: 'YBookingNo', headerText: 'Yarn Booking No', width: 120, allowEditing: false
                },
                {
                    field: 'BookingNo', headerText: 'Booking No', width: 120, allowEditing: false, visible: false
                },
                {
                    field: 'FabricType', headerText: 'Fabric Type', width: 120, allowEditing: false
                },
                {
                    field: 'FabricShade', headerText: 'Fabric Shade', width: 120, allowEditing: false
                },
                {
                    field: 'LotNo', headerText: 'Lot No', width: 100, visible: !_isYA, allowEditing: false
                },
                //{
                //    field: 'SeasonName', headerText: 'Season', width: 100, allowEditing: false
                //},
                {
                    field: 'YarnReqDate', headerText: 'Yarn Req Date(As per FR)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                },
                //{
                //    field: 'YanrInhouseDate', headerText: 'Yarn Inhouse Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnPly', headerText: 'Yarn Ply', width: 100, allowEditing: false
                //},
                //{
                //    field: 'NumericCount', headerText: 'Numeric Count', width: 100, allowEditing: false
                //},
                {
                    field: 'YarnCategory', headerText: 'Yarn Description', width: 140, allowEditing: false
                },
                {
                    field: 'LotNo', headerText: 'Reference Lot (If Any)', width: 100, allowEditing: false
                },
                {
                    field: 'SpinnerName', headerText: 'Reference Spinner (If Any)', width: 100, allowEditing: false
                },
                {
                    field: 'YarnReqQty', headerText: 'Yarn Req Qty', width: 100, allowEditing: false, visible: false
                },
                {
                    field: 'NetYarnReqQty', headerText: 'Yarn Req Qty (KG)', width: 100, allowEditing: false
                },
                {
                    field: 'YD', headerText: 'YD', textAlign: 'Center', width: 100, allowEditing: false, displayAsCheckBox: true, editType: "booleanedit", textAlign: 'Center'
                },
                {
                    field: 'StockQty', headerText: 'Stock Qty(KG)', width: 100, allowEditing: false
                },
                {
                    field: 'AllocatedQty', headerText: 'Allocated Qty(KG)', width: 100, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'PendingAllocationQty', headerText: 'Allocation Balance Qty(KG)', width: 100, allowEditing: false
                },
                {
                    field: 'PlannedPipelineQty', headerText: 'Planned Pipeline Qty(KG)', width: 100, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'PlannedPOQty', headerText: 'Planned PO Qty', width: 100, allowEditing: false
                },
                {
                    field: 'YarnUtilizationQty', headerText: 'Yarn Utilization Qty(KG)', width: 100, allowEditing: false
                },
                {
                    headerText: '', textAlign: 'Center', visible: true, width: 40, commands: [
                        { buttonOption: { type: 'findGreyYarnUtilizationQty', content: '', cssClass: 'btn btn-success btn-xs', iconCss: 'fa fa-search', tooltipText: "Select for grey yarn utilization qty" } }
                    ]
                },
                {
                    field: 'AdvanceStockAllocationQty', headerText: 'Allocation Qty (KG)', textAlign: 'center', width: 85, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'PipelineStockAllocationQty', headerText: 'Pipeline Qty(KG)', textAlign: 'center', width: 85, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'BalancePOQty', headerText: 'Balance Qty for Purchase (KG)', width: 100, allowEditing: false
                },
                {
                    field: 'QtyForPO', headerText: 'Qty for Purchase (KG)', width: 100, allowEditing: true
                },
                /*{
                    field: 'AllocationNo', headerText: 'Allocation No', width: 100, allowEditing: false
                },
                {
                    field: 'YarnCertification', headerText: 'Yarn Certification', width: 100, allowEditing: false
                },
                {
                    field: 'YarnBookingStatus', headerText: 'Yarn Booking Status', width: 100, allowEditing: false
                },
                {
                    field: 'FabricType', headerText: 'Fabric Type', width: 100, allowEditing: false
                },
                {
                    field: 'FabricColor', headerText: 'Fabric Color', width: 100, allowEditing: false
                },
                {
                    field: 'FabricQty', headerText: 'Fabric Qty', width: 100, allowEditing: false
                },
                {
                    field: 'InhouseStartDate', headerText: 'Inhouse Start Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: true
                },
                {
                    field: 'InhouseEndDate', headerText: 'Inhouse End Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: true
                },*/
                {
                    field: 'Remarks', headerText: 'Remarks', width: 100, allowEditing: true
                }
            ]
        }

        var aggregatesColumns = [];
        if ((_isYAAck && status == statusConstants.APPROVED) || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE) {
            aggregatesColumns = [
                {
                    type: 'Sum',
                    field: 'Spinner',
                    footerTemplate: 'Total'
                },
                {
                    type: 'Sum',
                    field: 'TotalAllocationQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                }
            ];
        }
        else {
            aggregatesColumns = [
                {
                    type: 'Sum',
                    field: 'SpinnerName',
                    footerTemplate: 'Total'
                },
                {
                    type: 'Sum',
                    field: 'NetYarnReqQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'StockQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'AllocatedQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'PendingAllocationQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'PlannedPipelineQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'PlannedPOQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'YarnUtilizationQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'AdvanceStockAllocationQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'PipelineStockAllocationQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'BalancePOQty',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                },
                {
                    type: 'Sum',
                    field: 'QtyForPO',
                    decimals: 2,
                    format: "N2",
                    footerTemplate: '${Sum}'
                }
            ];
        }

        $tblChildEl = new ej.grids.Grid({
            dataSource: data,
            allowResizing: true,
            allowPaging: false,
            autofitColumns: true,
            editSettings: {
                allowEditing: true,
                allowAdding: true,
                allowDeleting: true,
                mode: "Normal",
                showDeleteConfirmDialog: true
            },
            columns: columns,
            actionBegin: function (args) {
                if (args.requestType === "save") {
                    var obj = DeepClone(masterData.Childs.find(x => x.YBChildItemID == args.data.YBChildItemID));
                    if (obj != null) {
                        obj = getAdvanceAndPipelineAllocationQty(obj);
                        obj.QtyForPO = getDefaultValueWhenInvalidN_Float(args.data.QtyForPO);

                        if (isCheckQtyValidation()) {
                            if (obj.AdvanceStockAllocationQty + obj.PipelineStockAllocationQty + obj.QtyForPO > obj.NetYarnReqQty) {
                                //toastr.error(`Total Qty ${obj.AdvanceStockAllocationQty + obj.PipelineStockAllocationQty + obj.QtyForPO} (
                                //            Advance Stock Allocation Qty : ${obj.AdvanceStockAllocationQty},
                                //            Pipeline Stock Allocation Qty : ${obj.PipelineStockAllocationQty},
                                //            Qty For PO : ${obj.QtyForPO}
                                //            ) cannot be greater than required qty ${obj.NetYarnReqQty}`);

                                args.data.AdvanceStockAllocationQty = obj.AdvanceStockAllocationQty;
                                args.rowData.AdvanceStockAllocationQty = obj.AdvanceStockAllocationQty;

                                args.data.PipelineStockAllocationQty = obj.PipelineStockAllocationQty;
                                args.rowData.PipelineStockAllocationQty = obj.PipelineStockAllocationQty;

                                args.data.QtyForPO = 0;
                                args.rowData.QtyForPO = 0;

                                return false;
                            }
                        }
                    }


                    if (status != statusConstants.APPROVED) {
                        var totalQty = args.data.AllocatedQty + args.data.PlannedPipelineQty + args.data.PlannedPOQty + args.data.AdvanceStockAllocationQty + args.data.QtyForPO + args.data.PipelineStockAllocationQty;
                        args.data.AdvanceStockAllocationQty = args.rowData.AdvanceStockAllocationQty;
                        args.data.PipelineStockAllocationQty = args.rowData.PipelineStockAllocationQty;
                        args.data.TotalAllocationQty = args.rowData.TotalAllocationQty;
                        masterData.Childs[args.rowIndex].QtyForPO = args.data.QtyForPO;

                        /*
                        if (Math.ceil(totalQty) <= Math.ceil(args.data.NetYarnReqQty)) {
                            args.data.AdvanceStockAllocationQty = args.rowData.AdvanceStockAllocationQty;
                            args.data.PipelineStockAllocationQty = args.rowData.PipelineStockAllocationQty;
                            args.data.TotalAllocationQty = args.rowData.TotalAllocationQty;
                            masterData.Childs[args.rowIndex].QtyForPO = args.data.QtyForPO;
                        }
                        else {
                            toastr.error('Total Qty (' + totalQty + ') cannot be greater than net required qty (' + args.data.NetYarnReqQty + ') !!!');
                            args.data.QtyForPO = args.rowData.QtyForPO;
                            return false;
                        }
                        */
                    }
                }
                else if (args.requestType.toLowerCase() === "delete") {
                    for (var i = 0; i < masterData.SummaryChilds.length; i++) {
                        if (masterData.Childs.filter(y => y.YBookingNo == masterData.SummaryChilds[i].YBookingNo).length <= 1) {
                            const indexToDelete = masterData.SummaryChilds.findIndex(item => item.YBookingNo === masterData.SummaryChilds[i].YBookingNo);
                            if (indexToDelete !== -1) {
                                masterData.SummaryChilds.splice(indexToDelete, 1);
                                initSummaryChild(masterData.SummaryChilds);
                            }
                        }
                    }
                }
            },
            recordClick: function (args) {
                resetGlobalArray();
                _isRevisedChild = false;
                if ((_isYA == true && status == statusConstants.REVISE)) {
                    $formEl.find("#btnOk").hide();
                }

                setPopupYarnCategoryAndReqQty(args.rowData.YarnCategory, args.rowData.PendingAllocationQty);

                if (args.column && args.column.field == "AdvanceStockAllocationQty") {
                    _isPipelineStock = false;
                    selectedChildIndex = args.rowIndex;

                    setAllocationQtyOnBtnOk(args.rowData);

                    if ((_isYA && (status == statusConstants.PENDING || status == statusConstants.REVISE)) ||
                        (_isYAApprove && status == statusConstants.PROPOSED_FOR_APPROVAL)) {

                        $formEl.find("#divYarnInfo").show();

                        var operationType = "NewOperation";
                        if (status !== statusConstants.PENDING) operationType = "updateOperation";
                        var yarnCount = replaceInvalidChar(args.rowData.YarnCount);
                        var apiUrl = `/api/yarn-allocation/GetStock/${args.rowData.ItemMasterID}/${args.rowData.AllocationChildID}/${operationType}/${yarnCount}`;
                        initStockInfo([], false, apiUrl);

                        stockSummary = masterData.Childs[selectedChildIndex].ChildItems;
                        /*if (stockSummary != null) {
                            for (var i = 0; i < stockSummary.length; i++) {
                                var stockObj = stockData.filter(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId);
                                if (stockObj.length != 0) {
                                    stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).AllocationChildItemID = stockSummary[i].AllocationChildItemID;
                                    stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).AdvanceAllocationQty = stockSummary[i].AdvanceAllocationQty;
                                    stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).SampleAllocationQty = stockSummary[i].SampleAllocationQty;
                                    stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).LeftoverAllocationQty = stockSummary[i].LeftoverAllocationQty;
                                    stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).LiabilitiesAllocationQty = stockSummary[i].LiabilitiesAllocationQty;
                                }
                                //AdvStockAllocationQty = stockSummary[i].AdvanceAllocationQty + stockSummary[i].SampleAllocationQty + stockSummary[i].LiabilitiesAllocationQty + stockSummary[i].LeftoverAllocationQty;
                            }
                        }*/
                        initStockSummary(stockSummary);
                    }
                    else {
                        $formEl.find("#divYarnInfo").hide();
                        axios.get(`/api/yarn-allocation/GetAllocatedStock/${args.rowData.AllocationChildID}`)
                            .then(function (response) {

                                stockSummary = response.data;

                                initStockSummary(stockSummary);
                                $modalPlanningEl.modal('show');
                            })
                            .catch(function (error) {
                                toastr.error(error.response.data.Message);
                            });
                    }
                }
                else if (args.column && args.column.field == "TotalAllocationQty") {
                    //A
                    _isPipelineStock = false;
                    selectedChildIndex = args.rowIndex;

                    setAllocationQtyOnBtnOk(args.rowData);

                    if ((_isYA && (status == statusConstants.PENDING || status == statusConstants.REVISE)) ||
                        (_isYAApprove && (status == statusConstants.PROPOSED_FOR_APPROVAL || status == statusConstants.UN_ACKNOWLEDGE))) {
                        $formEl.find("#divYarnInfo").show();

                        var operationType = "NewOperation";
                        if (status !== statusConstants.PENDING) operationType = "updateOperation";
                        var yarnCount = replaceInvalidChar(args.rowData.YarnCount);
                        var apiUrl = `/api/yarn-allocation/GetStock/${args.rowData.ItemMasterId}/${args.rowData.AllocationChildID}/${operationType}/${yarnCount}`;
                        initStockInfo([], false, apiUrl);

                    }
                    else {
                        $formEl.find("#divYarnInfo").hide();
                        axios.get(`/api/yarn-allocation/GetAllocatedStock/${args.rowData.AllocationChildID}`)
                            .then(function (response) {
                                stockSummary = response.data;
                                initStockSummary(stockSummary);
                                $modalPlanningEl.modal('show');
                            })
                            .catch(function (error) {
                                toastr.error(error.response.data.Message);
                            });
                    }
                }
                else if (args.column && args.column.field == "PipelineStockAllocationQty") {

                    _isPipelineStock = true;
                    _isPlannedPipelinePopup = false;
                    selectedChildIndex = args.rowIndex;

                    setAllocationQtyOnBtnOk(args.rowData);

                    if ((_isYA && status == statusConstants.PENDING) ||
                        (_isYAApprove && status == statusConstants.PROPOSED_FOR_APPROVAL)) {
                        $formEl.find("#divYarnInfo").show();

                        var operationType = "NewOperation";
                        if (status !== statusConstants.PENDING) operationType = "updateOperation";
                        var yarnCount = replaceInvalidChar(args.rowData.YarnCount);
                        var apiUrl = `/api/yarn-allocation/GetPipelineStock/${args.rowData.ItemMasterID}/${args.rowData.AllocationChildID}/${operationType}/${yarnCount}`;
                        initStockInfo([], true, apiUrl);

                        stockPipelineSummary = masterData.Childs[selectedChildIndex].ChildPipelineItems;
                        /*if (stockPipelineSummary != null) {
                            for (var i = 0; i < stockPipelineSummary.length; i++) {
                                var stockObj = stockPipelineData.filter(y => y.YarnStockSetId == stockPipelineSummary[i].YarnStockSetId);
                                if (stockObj.length != 0) {
                                    stockPipelineData.find(y => y.YarnStockSetId == stockPipelineSummary[i].YarnStockSetId).AllocationChildPLItemID = stockPipelineSummary[i].AllocationChildPLItemID;
                                    stockPipelineData.find(y => y.YarnStockSetId == stockPipelineSummary[i].YarnStockSetId).PipelineAllocationQty = stockPipelineSummary[i].PipelineAllocationQty;
                                }
                            }
                        }*/

                        initStockSummary(stockPipelineSummary);

                    }
                    else {
                        $formEl.find("#divYarnInfo").hide();
                        axios.get(`/api/yarn-allocation/GetPipelineAllocatedStock/${args.rowData.AllocationChildID}`)
                            .then(function (response) {

                                stockPipelineSummary = response.data;

                                initStockSummary(stockPipelineSummary);
                                $modalPlanningEl.modal('show');
                            })
                            .catch(function (error) {
                                toastr.error(error.response.data.Message);
                            });
                    }

                }
                else if (args.column && args.column.field == "AllocatedQty") {
                    _isPipelineStock = false;

                    $formEl.find("#divYarnInfo").hide();
                    axios.get(`/api/yarn-allocation/GetAllocatedStockByYBChildItemID/${args.rowData.YBChildItemID}`)
                        .then(function (response) {

                            stockSummary = response.data;

                            initStockSummary(stockSummary);
                            $modalPlanningEl.modal('show');
                        })
                        .catch(function (error) {
                            toastr.error(error.response.data.Message);
                        });


                }
                else if (args.column && args.column.field == "PlannedPipelineQty") {
                    _isPipelineStock = true;
                    _isPlannedPipelinePopup = true;

                    $formEl.find("#divYarnInfo").hide();
                    axios.get(`/api/yarn-allocation/GetPipelineAllocatedStockByYBChildItemID/${args.rowData.YBChildItemID}`)
                        .then(function (response) {

                            stockPipelineSummary = response.data;

                            initStockSummary(stockPipelineSummary);
                            $modalPlanningEl.modal('show');
                        })
                        .catch(function (error) {
                            toastr.error(error.response.data.Message);
                        });

                }

            },
            commandClick: childCommandClick,
            aggregates: [
                {
                    columns: aggregatesColumns
                }
            ]
        });
        $tblChildEl.refreshColumns;
        $tblChildEl.appendTo(tblChildId);
    }
    function setAllocationQtyOnBtnOk(obj) {
        if (obj.ReqQty == 0) obj.ReqQty = obj.NetYarnReqQty;

        obj.AdvanceStockAllocationQty = getDefaultValueWhenInvalidN_Float(obj.AdvanceStockAllocationQty);
        obj.PipelineStockAllocationQty = getDefaultValueWhenInvalidN_Float(obj.PipelineStockAllocationQty);
        obj.QtyForPO = getDefaultValueWhenInvalidN_Float(obj.QtyForPO);
        obj.ReqQty = getDefaultValueWhenInvalidN_Float(obj.ReqQty);

        $formEl.find("#btnOk").attr("AdvanceStockAllocationQty", obj.AdvanceStockAllocationQty);
        $formEl.find("#btnOk").attr("PipelineStockAllocationQty", obj.PipelineStockAllocationQty);
        $formEl.find("#btnOk").attr("QtyForPO", obj.QtyForPO);
        $formEl.find("#btnOk").attr("ReqQty", obj.NetYarnReqQty);
    }
    function getAllocationQtyOnBtnOk() {
        var obj = {};
        obj.AdvanceStockAllocationQty = getDefaultValueWhenInvalidN_Float($formEl.find("#btnOk").attr("AdvanceStockAllocationQty"));
        obj.PipelineStockAllocationQty = getDefaultValueWhenInvalidN_Float($formEl.find("#btnOk").attr("PipelineStockAllocationQty"));
        obj.QtyForPO = getDefaultValueWhenInvalidN_Float($formEl.find("#btnOk").attr("QtyForPO"));
        obj.ReqQty = getDefaultValueWhenInvalidN_Float($formEl.find("#btnOk").attr("ReqQty"));
        return obj;
    }

    async function childCommandClick(e) {

        if (e.commandColumn.buttonOption.type == 'findGreyYarnUtilizationQty') {
            var yarnrowData = e.rowData;
            __ItemMasterID = yarnrowData.ItemMasterID;
            selectedYBChildItemID = yarnrowData.YBChildItemID;
            var parentObj = {};
            var parentChilds = $tblChildEl.getCurrentViewRecords();
            if (_isYA && status == statusConstants.PENDING) {
                parentObj = parentChilds.find(x => x.BookingChildID == yarnrowData.BookingChildID)
            }
            else {
                parentObj = this.parentDetails.parentRowData;
            }
            if (parentObj != null) {
                __SubGroupID = parentObj.SubGroupID;
                selectedBookingChildID = parentObj.BookingChildID;

                __GSMNumber = parentObj.GSM,
                    __GSMId = parentObj.GSMId, __CompositionId = parentObj.CompositionId; __ConstructionId = parentObj.ConstructionId;

            }
            if (GreyYarnUtilizationSummary == null) {
                GreyYarnUtilizationSummary = [];
            }
            else
                GreyYarnUtilizationSummary = yarnrowData.GreyYarnUtilizationPopUpList.filter(item => item.TotalUtilization != 0);
            initGreyYarnUtilization(GreyYarnUtilizationSummary);
            $modalGeryYarnUtilizationInfoEL.modal('show');
            //$formEl.find("#divGreyYarnInfo").show();
        }
    }
    function initRevisedChild(data) {
        if ($tblRevisedChildEl) $tblRevisedChildEl.destroy();

        var columns = [];

        if ((_isYAAck && status == statusConstants.APPROVED) || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE) {
            columns = [
                /*{
                    headerText: 'Commands', width: 80, commands: [
                        { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-delete' } },
                        //{ type: 'Save', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-update' } },
                        //{ type: 'Cancel', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-cancel-icon' } }
                    ]
                },*/
                {
                    field: 'AllocationChildItemID', isPrimaryKey: true, width: 10, visible: false
                },
                {
                    field: 'YarnStockSetId', headerText: 'YarnStockSetId', width: 20, allowEditing: false, visible: false
                },
                {
                    field: 'BookingNo', headerText: 'Booking No', width: 50, allowEditing: false
                },
                {
                    field: 'YarnCategory', headerText: 'Yarn Details', width: 120, allowEditing: false
                },
                {
                    field: 'PhysicalCount', headerText: 'Physical Count', width: 80, allowEditing: false
                },
                {
                    field: 'PhysicalLot', headerText: 'Physical Lot', width: 80, allowEditing: false
                },
                {
                    field: 'Spinner', headerText: 'Spinner', width: 100, allowEditing: false
                },
                {
                    field: 'NetYarnReqQty', headerText: 'Yarn Req Qty (KG)', width: 100, allowEditing: false
                },
                {
                    field: 'TotalAllocationQty', headerText: 'Allocation Qty (KG)', textAlign: 'center', width: 85, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'BuyerName', headerText: 'Buyer Name', width: 100, allowEditing: false
                },
                {
                    field: 'FabricType', headerText: 'Fabric Type', width: 80, allowEditing: false
                },
                {
                    field: 'ShadeCode', headerText: 'Shade Code', width: 80, allowEditing: false
                },
                {
                    field: 'LotNo', headerText: 'Reference Lot (If Any)', width: 100, allowEditing: false
                },
                {
                    field: 'UnAcknowledgeReason', headerText: 'UnAcknowledge Reason', width: 100, allowEditing: true, visible: status == statusConstants.UN_ACKNOWLEDGE
                },
                {
                    field: 'Remarks', headerText: 'Remarks', width: 100, allowEditing: true
                }
            ];
        }
        else {
            columns = [
                {
                    headerText: 'Commands', width: 80, visible: (_isYA == true && status == statusConstants.PENDING) || (_isYAApprove == true && status == statusConstants.PROPOSED_FOR_APPROVAL), commands: [
                        { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-delete' } },
                        //{ type: 'Save', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-update' } },
                        //{ type: 'Cancel', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-cancel-icon' } }
                    ]
                },
                {
                    field: 'YBChildItemID', headerText: 'YBChildItemID', isPrimaryKey: true, width: 100, visible: false
                },
                {
                    field: 'YBChildID', headerText: 'YBChildID', width: 100, visible: false
                },
                {
                    field: 'YBookingNo', headerText: 'Yarn Booking No', width: 120, allowEditing: false
                },
                {
                    field: 'BookingNo', headerText: 'Booking No', width: 120, allowEditing: false, visible: false
                },
                {
                    field: 'BuyerName', headerText: 'Buyer Name', width: 120, allowEditing: false
                },
                {
                    field: 'BuyerTeamName', headerText: 'Buyer Team', width: 120, allowEditing: false
                },
                {
                    field: 'LotNo', headerText: 'Lot No', width: 100, visible: !_isYA, allowEditing: false
                },
                //{
                //    field: 'SeasonName', headerText: 'Season', width: 100, allowEditing: false
                //},
                {
                    field: 'YarnReqDate', headerText: 'Yarn Req Date(As per FR)', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                },
                //{
                //    field: 'YanrInhouseDate', headerText: 'Yarn Inhouse Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: false
                //},
                //{
                //    field: 'YarnPly', headerText: 'Yarn Ply', width: 100, allowEditing: false
                //},
                //{
                //    field: 'NumericCount', headerText: 'Numeric Count', width: 100, allowEditing: false
                //},
                {
                    field: 'YarnCategory', headerText: 'Yarn Description', width: 140, allowEditing: false
                },
                {
                    field: 'LotNo', headerText: 'Reference Lot (If Any)', width: 100, allowEditing: false
                },
                {
                    field: 'SpinnerName', headerText: 'Reference Spinner (If Any)', width: 100, allowEditing: false
                },
                {
                    field: 'YarnReqQty', headerText: 'Yarn Req Qty', width: 100, allowEditing: false, visible: false
                },
                {
                    field: 'PrevNetYarnReqQty', headerText: 'Prev Net Yarn Req Qty', width: 100, allowEditing: false
                },
                {
                    field: 'NetYarnReqQty', headerText: 'Revised Net Yarn Req Qty', width: 100, allowEditing: false
                },
                {
                    field: 'YD', headerText: 'YD', textAlign: 'Center', width: 100, allowEditing: false, displayAsCheckBox: true, editType: "booleanedit", textAlign: 'Center'
                },
                {
                    field: 'StockQty', headerText: 'Stock Qty(KG)', width: 100, allowEditing: false
                },
                {
                    field: 'AllocatedQty', headerText: 'Allocated Qty(KG)', width: 100, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'PendingAllocationQty', headerText: 'Allocation Balance Qty(KG)', width: 100, allowEditing: false
                },
                {
                    field: 'PlannedPipelineQty', headerText: 'Planned Pipeline Qty(KG)', width: 100, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'PlannedPOQty', headerText: 'Planned PO Qty', width: 100, allowEditing: false
                },
                {
                    field: 'YarnUtilizationQty', headerText: 'Yarn Utilization Qty(KG)', width: 100, allowEditing: false
                },
                {
                    field: 'AdvanceStockAllocationQty', headerText: 'Allocation Qty (KG)', textAlign: 'center', width: 85, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'TotalAllocatedQty', headerText: 'Total Allocated Qty', width: 100, allowEditing: false
                },
                {
                    field: 'PendingAllocationQty', headerText: 'Pending Allocation Qty (KG)', width: 100, allowEditing: false
                },
                {
                    field: 'PipelineStockAllocationQty', headerText: 'Pipeline Qty(KG)', textAlign: 'center', width: 85, allowEditing: false, valueAccessor: displayYarnAllocation
                },
                {
                    field: 'QtyForPO', headerText: 'Qty for Purchase (KG)', width: 100, allowEditing: true
                },
                /*{
                    field: 'AllocationNo', headerText: 'Allocation No', width: 100, allowEditing: false
                },
                {
                    field: 'YarnCertification', headerText: 'Yarn Certification', width: 100, allowEditing: false
                },
                {
                    field: 'YarnBookingStatus', headerText: 'Yarn Booking Status', width: 100, allowEditing: false
                },
                {
                    field: 'FabricType', headerText: 'Fabric Type', width: 100, allowEditing: false
                },
                {
                    field: 'FabricColor', headerText: 'Fabric Color', width: 100, allowEditing: false
                },
                {
                    field: 'FabricQty', headerText: 'Fabric Qty', width: 100, allowEditing: false
                },
                {
                    field: 'InhouseStartDate', headerText: 'Inhouse Start Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: true
                },
                {
                    field: 'InhouseEndDate', headerText: 'Inhouse End Date', textAlign: 'Center', type: 'date', format: _ch_date_format_1, width: 100, allowEditing: true
                },*/
                {
                    field: 'Remarks', headerText: 'Remarks', width: 100, allowEditing: true
                }
            ]
        }
        $tblRevisedChildEl = new ej.grids.Grid({
            dataSource: data,
            allowResizing: true,
            allowPaging: false,
            autofitColumns: true,
            editSettings: {
                allowEditing: true,
                allowAdding: true,
                allowDeleting: true,
                mode: "Normal",
                showDeleteConfirmDialog: true
            },
            columns: columns,
            actionBegin: function (args) {
                if (args.requestType === "add") {

                }
                else if (args.requestType === "save") {

                    if (status != statusConstants.APPROVED) {
                        var totalQty = args.data.AllocatedQty + args.data.PlannedPipelineQty + args.data.PlannedPOQty + args.data.AdvanceStockAllocationQty + args.data.QtyForPO + args.data.PipelineStockAllocationQty;

                        args.data.AdvanceStockAllocationQty = args.rowData.AdvanceStockAllocationQty;
                        args.data.PipelineStockAllocationQty = args.rowData.PipelineStockAllocationQty;
                        args.data.TotalAllocationQty = args.rowData.TotalAllocationQty;
                        masterData.Childs[args.rowIndex].QtyForPO = args.data.QtyForPO;

                        /*
                        if (Math.ceil(totalQty) <= Math.ceil(args.data.NetYarnReqQty)) {
                            args.data.AdvanceStockAllocationQty = args.rowData.AdvanceStockAllocationQty;
                            args.data.PipelineStockAllocationQty = args.rowData.PipelineStockAllocationQty;
                            args.data.TotalAllocationQty = args.rowData.TotalAllocationQty;
                            masterData.Childs[args.rowIndex].QtyForPO = args.data.QtyForPO;
                        }
                        else {

                            toastr.error('Total Qty (' + totalQty + ') cannot be greater than net required qty (' + args.data.NetYarnReqQty + ') !!!');
                            args.data.QtyForPO = args.rowData.QtyForPO;
                            return false;
                        }
                        */
                    }
                }
                else if (args.requestType.toLowerCase() === "delete") {
                    for (var i = 0; i < masterData.SummaryChilds.length; i++) {
                        if (masterData.Childs.filter(y => y.YBookingNo == masterData.SummaryChilds[i].YBookingNo).length <= 1) {
                            const indexToDelete = masterData.SummaryChilds.findIndex(item => item.YBookingNo === masterData.SummaryChilds[i].YBookingNo);

                            if (indexToDelete !== -1) {
                                masterData.SummaryChilds.splice(indexToDelete, 1);
                                initSummaryChild(masterData.SummaryChilds);
                            }
                        }
                    }

                }
            },
            recordClick: function (args) {
                //stockData = [];
                //stockSummary = [];

                _isRevisedChild = true;
                $formEl.find("#btnOk").show();

                setPopupYarnCategoryAndReqQty(args.rowData.YarnCategory, args.rowData.PendingAllocationQty);


                if (args.column && args.column.field == "AdvanceStockAllocationQty") {
                    _isPipelineStock = false;
                    selectedChildIndex = args.rowIndex;

                    if ((_isYA && (status == statusConstants.PENDING || status == statusConstants.REVISE)) || (_isYAApprove == true && status == statusConstants.PROPOSED_FOR_APPROVAL)) {
                        $formEl.find("#divYarnInfo").show();
                        setAllocationQtyOnBtnOk(args.rowData);

                        var operationType = "NewOperation";
                        if (status !== statusConstants.PENDING) operationType = "updateOperation";
                        var yarnCount = replaceInvalidChar(args.rowData.YarnCount);
                        var apiUrl = `/api/yarn-allocation/GetStock/${args.rowData.ItemMasterID}/${args.rowData.AllocationChildID}/${operationType}/${yarnCount}`;
                        initStockInfo([], true, apiUrl);
                        stockSummary = masterData.RevisedChilds[selectedChildIndex].ChildItems;
                        initStockSummary(stockSummary);
                    }
                    else {
                        $formEl.find("#divYarnInfo").hide();
                        axios.get(`/api/yarn-allocation/GetAllocatedStock/${args.rowData.AllocationChildID}`)
                            .then(function (response) {

                                stockSummary = response.data;

                                initStockSummary(stockSummary);
                                $modalPlanningEl.modal('show');
                            })
                            .catch(function (error) {
                                toastr.error(error.response.data.Message);
                            });
                    }

                }
                else if (args.column && args.column.field == "TotalAllocationQty") {

                    //B

                    _isPipelineStock = false;
                    selectedChildIndex = args.rowIndex;

                    if ((_isYA && (status == statusConstants.PENDING || status == statusConstants.REVISE)) ||
                        (_isYAApprove && (status == statusConstants.PROPOSED_FOR_APPROVAL || status == statusConstants.UN_ACKNOWLEDGE))) {

                        $formEl.find("#divYarnInfo").show();

                        var operationType = "NewOperation";
                        if (status !== statusConstants.PENDING) operationType = "updateOperation";
                        var yarnCount = replaceInvalidChar(args.rowData.YarnCount);
                        var apiUrl = `/api/yarn-allocation/GetStock/${args.rowData.ItemMasterId}/${args.rowData.AllocationChildID}/${operationType}/${yarnCount}`;
                        initStockInfo([], true, apiUrl);
                    }
                    else {
                        $formEl.find("#divYarnInfo").hide();
                        axios.get(`/api/yarn-allocation/GetAllocatedStock/${args.rowData.AllocationChildID}`)
                            .then(function (response) {

                                stockSummary = response.data;

                                initStockSummary(stockSummary);
                                $modalPlanningEl.modal('show');
                            })
                            .catch(function (error) {
                                toastr.error(error.response.data.Message);
                            });
                    }

                }
                else if (args.column && args.column.field == "PipelineStockAllocationQty") {
                    _isPipelineStock = true;
                    selectedChildIndex = args.rowIndex;

                    if ((_isYA && (status == statusConstants.PENDING || status == statusConstants.REVISE)) ||
                        (_isYAApprove == true && status == statusConstants.PROPOSED_FOR_APPROVAL)) {

                        $formEl.find("#divYarnInfo").show();

                        var operationType = "NewOperation";
                        if (status !== statusConstants.PENDING) operationType = "updateOperation";
                        var yarnCount = replaceInvalidChar(args.rowData.YarnCount);
                        var apiUrl = `/api/yarn-allocation/GetPipelineStock/${args.rowData.ItemMasterID}/${args.rowData.AllocationChildID}/${operationType}/${yarnCount}`;
                        initStockInfo([], true, apiUrl);
                    }
                    else {
                        $formEl.find("#divYarnInfo").hide();
                        axios.get(`/api/yarn-allocation/GetPipelineAllocatedStock/${args.rowData.AllocationChildID}`)
                            .then(function (response) {

                                stockPipelineSummary = response.data;

                                initStockSummary(stockPipelineSummary);
                                $modalPlanningEl.modal('show');
                            })
                            .catch(function (error) {
                                toastr.error(error.response.data.Message);
                            });
                    }

                }
                else if (args.column && args.column.field == "AllocatedQty") {
                    _isPipelineStock = false;

                    $formEl.find("#divYarnInfo").hide();
                    axios.get(`/api/yarn-allocation/GetAllocatedStockByYBChildItemID/${args.rowData.YBChildItemID}`)
                        .then(function (response) {

                            stockSummary = response.data;

                            initStockSummary(stockSummary);
                            $modalPlanningEl.modal('show');
                        })
                        .catch(function (error) {
                            toastr.error(error.response.data.Message);
                        });


                }
                else if (args.column && args.column.field == "PlannedPipelineQty") {
                    _isPipelineStock = true;
                    _isPlannedPipelinePopup = true;

                    $formEl.find("#divYarnInfo").hide();
                    axios.get(`/api/yarn-allocation/GetPipelineAllocatedStockByYBChildItemID/${args.rowData.YBChildItemID}`)
                        .then(function (response) {

                            stockPipelineSummary = response.data;

                            initStockSummary(stockPipelineSummary);
                            $modalPlanningEl.modal('show');
                        })
                        .catch(function (error) {
                            toastr.error(error.response.data.Message);
                        });

                }

            },
        });
        $tblRevisedChildEl.refreshColumns;
        $tblRevisedChildEl.appendTo(tblRevisedChildId);
    }
    //function getNetYarnReqQty(obj) {
    //    var netYarnReqQty = 0;
    //    if (obj.YD) {
    //        netYarnReqQty = ((obj.YarnReqQty * (1 + (obj.Allowance / 100))) - (100 / (100 - ((obj.YDAllowance / 100) * 100) + 2))).toFixed(2);
    //    } else {
    //        netYarnReqQty = (obj.YarnReqQty * (1 + (obj.Allowance / 100))).toFixed(2);
    //    }
    //    return netYarnReqQty;
    //}
    function TotalAllocationQty(advQty, pipelineQty, pOQty) {
        var result = getDefaultValueWhenInvalidN(parseFloat(advQty) + parseFloat(pipelineQty) + parseFloat(pOQty));
        return result;
    }
    function initStockInfo(data, isPipeline, apiUrl) {
        var pkColumn = null;
        if (isPipeline) {
            pkColumn = {
                field: 'AllocationChildPLItemID', headerText: 'AllocationChildPLItemID', isPrimaryKey: true, visible: false
            };
        } else {
            pkColumn = {
                field: 'AllocationChildItemID', headerText: 'AllocationChildItemID', isPrimaryKey: true, visible: false
            }
        }

        var columnList = [
            {
                field: 'YarnStockSetId', headerText: 'YarnStockSetId', visible: false, allowEditing: false
            },
            {
                field: 'PONos', headerText: 'PO No', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'YarnCategory', headerText: 'Yarn Description', width: 100, allowEditing: false
            },
            {
                field: 'NumericCount', headerText: 'Numeric Count', width: 120, allowEditing: false
            },
            {
                field: 'Suppliers', headerText: 'Supplier', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'Spinner', headerText: 'Spinner', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'PhysicalCount', headerText: 'Physical Count', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'PhysicalLot', headerText: 'Physical Lot', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'AdvanceStockQty', headerText: 'Advance Stock', width: 120, visible: (_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE || status == statusConstants.REVISE), allowEditing: false
            },
            {
                field: 'AdvanceAllocationQty', headerText: 'Advance Allocation', width: 140, visible: _isPipelineStock == false, allowEditing: true
            },
            {
                field: 'SampleStockQty', headerText: 'Sample Stock', width: 120, visible: (_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE || status == statusConstants.REVISE), allowEditing: false
            },
            {
                field: 'SampleAllocationQty', headerText: 'Sample Allocation', width: 140, visible: _isPipelineStock == false, allowEditing: true
            },
            {
                field: 'LeftoverStockQty', headerText: 'Leftover Stock', width: 120, visible: (_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE || status == statusConstants.REVISE), allowEditing: false
            },
            {
                field: 'LeftoverAllocationQty', headerText: 'Leftover Allocation', width: 140, visible: _isPipelineStock == false, allowEditing: true
            },
            {
                field: 'LiabilitiesStockQty', headerText: 'Liabilities Stock', width: 120, visible: (_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL || status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE || status == statusConstants.REVISE), allowEditing: false
            },
            {
                field: 'LiabilitiesAllocationQty', headerText: 'Liabilities Allocation', width: 140, visible: _isPipelineStock == false, allowEditing: true
            },
            {
                field: 'PipelineStockQty', headerText: 'Pipeline Stock', width: 120, visible: (_isYA == true || _isYAApprove == true) && _isPipelineStock == true && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL), allowEditing: false
            },
            {
                field: 'PipelineAllocationQty', headerText: 'Pipeline Allocation', width: 140, visible: _isPipelineStock == true, allowEditing: true
            },
            {
                field: 'POPrice', headerText: 'PO Price', width: 100, allowEditing: false
            },
            {
                field: 'YarnAge', headerText: 'Yarn Age', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'TestResult', headerText: 'Test Result', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'TestResultComments', headerText: 'Comments', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'DeliveryStartDates', headerText: 'Delivery Start Date', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'DeliveryEndDates', headerText: 'Delivery End Date', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'POCompanys', headerText: 'PO Company', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'POFors', headerText: 'PO For', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
        ];

        columnList.unshift(pkColumn);

        columnList = setColumnsHeaderCustomColor(columnList, "AdvanceStockQty,AdvanceAllocationQty", "#0101DF");
        columnList = setColumnsHeaderCustomColor(columnList, "SampleStockQty,SampleAllocationQty", "#4B8A08");
        columnList = setColumnsHeaderCustomColor(columnList, "LeftoverStockQty,LeftoverAllocationQty", "#088A85");
        columnList = setColumnsHeaderCustomColor(columnList, "LiabilitiesStockQty,LiabilitiesAllocationQty", "#8A0868");
        columnList = setColumnsHeaderCustomColor(columnList, "PipelineStockQty,PipelineAllocationQty", "#DF7401");

        $modalPlanningEl.modal('show');
        if ($tblStockInfoEl) $tblStockInfoEl.destroy();

        stockSummaryTemp = DeepClone(stockSummary);
        stockPipelineSummaryTemp = DeepClone(stockPipelineSummary);

        $tblStockInfoEl = new initEJ2Grid({
            tableId: tblStockInfoId,
            autofitColumns: true,
            apiEndPoint: apiUrl,
            columns: columnList,
            allowSorting: true,
            editSettings: { allowAdding: false, allowEditing: true, allowDeleting: false, mode: "Normal" },
            actionBegin: function (args) {
                if (args.requestType === "save") {
                    if (!_isPipelineStock) {
                        args.data.AdvanceAllocationQty = getDefaultValueWhenInvalidN_Float(args.data.AdvanceAllocationQty);
                        args.data.SampleAllocationQty = getDefaultValueWhenInvalidN_Float(args.data.SampleAllocationQty);
                        args.data.LiabilitiesAllocationQty = getDefaultValueWhenInvalidN_Float(args.data.LiabilitiesAllocationQty);
                        args.data.LeftoverAllocationQty = getDefaultValueWhenInvalidN_Float(args.data.LeftoverAllocationQty);

                        if (args.data.AdvanceAllocationQty == 0 &&
                            args.data.SampleAllocationQty == 0 &&
                            args.data.LiabilitiesAllocationQty == 0 &&
                            args.data.LeftoverAllocationQty == 0) {
                            return false;
                        }

                        var totalQty = args.data.AdvanceAllocationQty +
                            args.data.SampleAllocationQty +
                            args.data.LiabilitiesAllocationQty +
                            args.data.LeftoverAllocationQty;

                        args.data.TotalAllocationQty = totalQty;
                        if (totalQty == 0) {
                            //toastr.error('Allocation Qty should not 0!!!');
                            var indexD = stockSummaryTemp.findIndex(x => x.YarnStockSetId == args.data.YarnStockSetId);
                            stockSummaryTemp.splice(indexD, 1);

                            initStockSummary(stockSummaryTemp);
                            return false;
                        }
                        if (args.data.AdvanceAllocationQty > args.data.AdvanceStockQty) {
                            toastr.error(`Advance Allocation Qty (${args.data.AdvanceAllocationQty}) should not greater than Advance Stock Qty (${args.data.AdvanceStockQty}) !!!`);
                            args.data.AdvanceAllocationQty = args.rowData.AdvanceAllocationQty;
                            return false;
                        }
                        else if (args.data.SampleAllocationQty > args.data.SampleStockQty) {
                            toastr.error(`Sample Allocation Qty (${args.data.SampleAllocationQty}) should not greater than Sample Stock Qty (${args.data.SampleStockQty}) !!!`);
                            args.data.SampleAllocationQty = args.rowData.SampleAllocationQty;
                            return false;
                        }
                        else if (args.data.LiabilitiesAllocationQty > args.data.LiabilitiesStockQty) {
                            toastr.error(`Liabilities Allocation Qty (${args.data.LiabilitiesAllocationQty}) should not greater than Liabilities Stock Qty (${args.data.LiabilitiesStockQty}) !!!`);
                            args.data.LiabilitiesAllocationQty = args.rowData.LiabilitiesAllocationQty;
                            return false;
                        }
                        else if (args.data.LeftoverAllocationQty > args.data.LeftoverStockQty) {
                            toastr.error(`Leftover Allocation Qty (${args.data.LeftoverAllocationQty}) should not greater than Leftover Stock Qty (${args.data.LeftoverStockQty}) !!!`);
                            args.data.LeftoverAllocationQty = args.rowData.LeftoverAllocationQty;
                            return false;
                        }

                        var indexF = -1;
                        if (stockSummaryTemp.length > 0) {
                            indexF = stockSummaryTemp.findIndex(x => x.YarnStockSetId == args.data.YarnStockSetId);
                        }
                        else {
                            stockSummaryTemp = [];
                        }

                        if (_isYAApprove == true && (status == statusConstants.ACKNOWLEDGE || status == statusConstants.UN_ACKNOWLEDGE)) {

                            if (stockSummaryTemp.length > 0) {
                                indexF = stockSummaryTemp.findIndex(x => x.YarnStockSetId == args.data.YarnStockSetId);
                            }
                            else {
                                indexF = loadTimeMasterData.ChildItems.findIndex(x => x.YarnStockSetId == args.data.YarnStockSetId);
                            }

                            var rData = {};
                            if (masterData.ChildItems.length > 0) {
                                rData = masterData.ChildItems[0];
                            }
                            else {
                                rData = loadTimeMasterData.ChildItems[0];
                            }
                            if (indexF > -1) {
                                args.data.AllocationChildItemID = rData.AllocationChildItemID;
                                //args.data.IsModified = true;
                                //args.data.IsNew = false;
                            }
                            //else {
                            //    args.data.AllocationChildItemID = 0;
                            //    //args.data.IsModified = false;
                            //    //args.data.IsNew = true;
                            //}

                            args.data.AllocationChildID = rData.AllocationChildID;
                            args.data.BookingNo = rData.BookingNo;
                            args.data.ShadeCode = rData.ShadeCode;
                            args.data.TotalAllocationQty = args.data.AdvanceAllocationQty + args.data.SampleAllocationQty + args.data.LiabilitiesAllocationQty + args.data.LeftoverAllocationQty;
                            args.data.Remarks = rData.Remarks;
                            args.data.UnAcknowledgeReason = rData.UnAcknowledgeReason;
                            args.data.Spinner = rData.Spinner;
                            args.data.AllocatedBy = rData.AllocatedBy;
                            args.data.BuyerName = rData.BuyerName;
                            args.data.FabricType = rData.FabricType;
                            args.data.LotRef = rData.LotRef;
                            args.data.PreProcessRevNo = rData.PreProcessRevNo;
                        }
                        if (indexF > -1) {
                            stockSummaryTemp.splice(indexF, 1);
                            stockSummaryTemp.push(DeepClone(args.data));
                        }
                        else {
                            stockSummaryTemp.push(DeepClone(args.data));
                        }

                        initStockSummary(stockSummaryTemp);
                        args.data.AllocatedQty = args.rowData.AllocatedQty - args.data.AllocatedQty;
                    }
                    else {
                        args.data.PipelineAllocationQty = getDefaultValueWhenInvalidN_Float(args.data.PipelineAllocationQty);

                        var totalQty = args.data.PipelineAllocationQty;
                        if (totalQty == 0) return false;

                        if (args.data.PipelineAllocationQty > args.data.PipelineStockQty) {
                            toastr.error(`Pipeline Allocation Qty (${args.data.PipelineAllocationQty}) should not greater than Pipeline Stock Qty (${args.data.PipelineStockQty}) !!!`);
                            args.data.PipelineAllocationQty = 0;
                            return false;
                        }
                        var indexF = -1;
                        if (stockPipelineSummaryTemp.length > 0) {
                            indexF = stockPipelineSummaryTemp.findIndex(x => x.YarnStockSetId == args.data.YarnStockSetId);
                        }
                        else {
                            stockPipelineSummaryTemp = [];
                        }

                        if (indexF > -1) {
                            stockPipelineSummaryTemp.splice(indexF, 1);
                            stockPipelineSummaryTemp.push(DeepClone(args.data));
                        }
                        else {
                            stockPipelineSummaryTemp.push(DeepClone(args.data));
                        }

                        initStockSummary(stockPipelineSummaryTemp);
                        args.data.AllocatedQty = args.rowData.AllocatedQty - args.data.AllocatedQty;
                    }
                }
            },
        });
    }
    function initStockSummary(data) {
        if ($tblStockSummaryEl) $tblStockSummaryEl.destroy();

        var isDisplayDeleteBtn = true;
        if (_isYAAck && status == statusConstants.UN_ACKNOWLEDGE) {
            isDisplayDeleteBtn = false;
        } else if (status == statusConstants.APPROVED || status == statusConstants.REJECT || status == statusConstants.ALL || status == statusConstants.ACKNOWLEDGE) {
            isDisplayDeleteBtn = false;
        }

        var columnList = [
            {
                headerText: 'Commands', width: 80, visible: isDisplayDeleteBtn,
                commands: [
                    { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-delete' } },
                    //{ type: 'Save', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-update' } },
                    //{ type: 'Cancel', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-cancel-icon' } }
                ]
            },
            {
                field: 'YarnStockSetId', headerText: 'YarnStockSetId', isPrimaryKey: true, visible: false
            },
            {
                field: 'PONos', headerText: 'PO No', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'YarnCategory', headerText: 'Yarn Description', width: 100, allowEditing: false
            },
            {
                field: 'NumericCount', headerText: 'Numeric Count', width: 100, allowEditing: false
            },
            {
                field: 'Suppliers', headerText: 'Supplier', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'Spinner', headerText: 'Spinner', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'PhysicalCount', headerText: 'Physical Count', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'PhysicalLot', headerText: 'Physical Lot', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'QuarantineAllocationQty', headerText: 'Quarantine Allocation', width: 140, visible: _isAutoGenerated, allowEditing: false
            },
            {
                field: 'AdvanceStockQty', headerText: 'Advance Stock', width: 120, visible: !_isAutoGenerated && ((_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL)), allowEditing: false
            },
            {

                //field: 'AdvanceAllocationQty', headerText: 'Advance Allocation', visible: !_isAutoGenerated && _isPipelineStock == false, width: 120, allowEditing: false
                field: 'AdvanceAllocationQty', headerText: 'Advance Allocation', visible: !_isAutoGenerated && _isPipelineStock == false, width: 120, allowEditing: !_isYAAck

            },
            {
                field: 'SampleStockQty', headerText: 'Sample Stock', width: 120, visible: !_isAutoGenerated && ((_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL)), allowEditing: false
            },
            {
                field: 'SampleAllocationQty', headerText: 'Sample Allocation', visible: !_isAutoGenerated && _isPipelineStock == false, width: 120, allowEditing: false
            },
            {
                field: 'LeftoverStockQty', headerText: 'Leftover Stock', width: 120, visible: !_isAutoGenerated && ((_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL)), allowEditing: false
            },
            {
                field: 'LeftoverAllocationQty', headerText: 'Leftover Allocation', visible: !_isAutoGenerated && _isPipelineStock == false, width: 120, allowEditing: false
            },
            {
                field: 'LiabilitiesStockQty', headerText: 'Liabilities Stock', width: 120, visible: !_isAutoGenerated && ((_isYA == true || _isYAApprove == true) && _isPipelineStock == false && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL)), allowEditing: false
            },
            {
                field: 'LiabilitiesAllocationQty', headerText: 'Liabilities Allocation', visible: !_isAutoGenerated && _isPipelineStock == false, width: 120, allowEditing: false
            },
            {
                field: 'PipelineStockQty', headerText: 'Pipeline Stock', width: 120, visible: !_isAutoGenerated && (((_isYA == true && _isPlannedPipelinePopup == false) || _isYAApprove == true) && _isPipelineStock == true && (status == statusConstants.PENDING || status == statusConstants.PROPOSED_FOR_APPROVAL)), allowEditing: false
            },
            {
                field: 'PipelineAllocationQty', headerText: 'Pipeline Allocation', visible: !_isAutoGenerated && _isPipelineStock == true, width: 120, allowEditing: false
            },
            {
                field: 'POPrices', headerText: 'PO Price', width: 100, allowEditing: false
            },
            {
                field: 'YarnAge', headerText: 'Yarn Age', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'TestResult', headerText: 'Test Result', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'TestResultComments', headerText: 'Comments', width: 100, allowEditing: false, visible: _isPipelineStock == false
            },
            {
                field: 'DeliveryStartDates', headerText: 'Delivery Start Date', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'DeliveryEndDates', headerText: 'Delivery End Date', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'POCompanys', headerText: 'PO Company', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
            {
                field: 'POFors', headerText: 'PO For', width: 100, allowEditing: false, visible: _isPipelineStock == true
            },
        ];

        columnList = setColumnsHeaderCustomColor(columnList, "QuarantineAllocationQty", "#DF7401");
        columnList = setColumnsHeaderCustomColor(columnList, "AdvanceStockQty,AdvanceAllocationQty", "#0101DF");
        columnList = setColumnsHeaderCustomColor(columnList, "SampleStockQty,SampleAllocationQty", "#4B8A08");
        columnList = setColumnsHeaderCustomColor(columnList, "LeftoverStockQty,LeftoverAllocationQty", "#088A85");
        columnList = setColumnsHeaderCustomColor(columnList, "LiabilitiesStockQty,LiabilitiesAllocationQty", "#8A0868");
        columnList = setColumnsHeaderCustomColor(columnList, "PipelineStockQty,PipelineAllocationQty", "#DF7401");

        $tblStockSummaryEl = new ej.grids.Grid({
            dataSource: data,
            allowResizing: true,
            allowPaging: false,
            editSettings: { allowAdding: false, allowEditing: false, allowDeleting: true, mode: "Normal", showDeleteConfirmDialog: true },
            columns: columnList,
            actionBegin: function (args) {
                if (args.requestType === "add") {

                }
                else if (args.requestType === "save") {

                }
                else if (args.requestType === "delete") {
                    /*if (!_isPipelineStock) {
                        var indexF = stockData.findIndex(x => x.YarnStockSetId == args.data[0].YarnStockSetId);
                        stockData[indexF].AdvanceAllocationQty = 0;
                        stockData[indexF].SampleAllocationQty = 0;
                        stockData[indexF].LeftoverAllocationQty = 0;
                        stockData[indexF].LiabilitiesAllocationQty = 0;
                        initStockInfo(stockData, false, '');
                    }
                    else {
                        var indexF = stockPipelineData.findIndex(x => x.YarnStockSetId == args.data[0].YarnStockSetId);
                        stockPipelineData[indexF].PipelineAllocationQty = 0;
                        initStockInfo(stockPipelineData, true, '');
                    }*/
                }
            },
        });
        $tblStockSummaryEl.refreshColumns;
        $tblStockSummaryEl.appendTo(tblStockSummaryId);
    }
    // Grey Yarn utilization
    function initGreyYarnUtilization(data) {
        if ($tblGeryYarnUtilizationEL) $tblGeryYarnUtilizationEL.destroy();

        $tblGeryYarnUtilizationEL = new ej.grids.Grid({
            dataSource: data,
            allowResizing: true,
            allowPaging: false,
            editSettings: { allowAdding: false, allowEditing: true, allowDeleting: true, mode: "Normal", showDeleteConfirmDialog: true },
            columns: [
                {
                    headerText: 'Command', width: 100, textAlign: 'Left', visible: true, commands: [
                        { type: 'Edit', title: 'Edit', buttonOption: { cssClass: 'e-flat', iconCss: 'e-edit e-icons' } },
                        { type: 'Delete', buttonOption: { cssClass: 'e-flat', iconCss: 'e-icons e-delete' } }
                    ]
                },
                { field: 'YarnStockSetID', visible: false, isPrimaryKey: true },
                { field: 'Spinner', headerText: 'Spinner', allowEditing: false },
                { field: 'PhysicalLot', headerText: 'Physical Lot', width: 100, allowEditing: false },
                { field: 'PhysicalCount', headerText: 'Physical Count', width: 100, allowEditing: false },
                { field: 'NumaricCount', headerText: 'Numaric Count', width: 100, allowEditing: false },
                { field: 'YarnDetails', headerText: 'Yarn Details', width: 100, allowEditing: false },
                { field: 'SampleStockQty', headerText: 'Sample Stock', width: 100, allowEditing: false, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'UtilizationSampleStock', headerText: 'Utilization Sample Stock', width: 100, allowEditing: true, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'LiabilitiesStockQty', headerText: 'Liabilities Stock', width: 100, allowEditing: false, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'UtilizationLiabilitiesStock', headerText: 'Utilization Liabilities Sock', width: 100, allowEditing: true, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'UnusableStockQty', headerText: 'Unusable Stock', width: 100, allowEditing: false, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'UtilizationUnusableStock', headerText: 'Utilization Unusable Stock', width: 100, allowEditing: true, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'LeftoverStockQty', headerText: 'Leftover Stock', width: 100, allowEditing: false, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'UtilizationLeftoverStock', headerText: 'Utilization Leftover Stock', width: 100, allowEditing: true, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
                { field: 'TotalUtilization', headerText: 'Total Utilization', width: 100, allowEditing: false, edit: { params: { showSpinButton: false, decimals: 4, format: "N4" } } },
            ],
            actionBegin: function (args) {
                if (args.requestType === "add") {

                }
                else if (args.requestType === "save") {
                    var SampleStockQty = 0;
                    var UtilizationSampleStock = 0;
                    var LiabilitiesStockQty = 0;
                    var UtilizationLiabilitiesStock = 0;
                    var UnusableStockQty = 0;
                    var UtilizationUnusableStock = 0;
                    var LeftoverStockQty = 0;
                    var UtilizationLeftoverStock = 0;
                    var TotalUtilization = 0;

                    args.data.SampleStockQty = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.rowData.SampleStockQty);
                    args.data.UtilizationSampleStock = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.data.UtilizationSampleStock);

                    args.data.LiabilitiesStockQty = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.rowData.LiabilitiesStockQty);
                    args.data.UtilizationLiabilitiesStock = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.data.UtilizationLiabilitiesStock);

                    args.data.UnusableStockQty = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.rowData.UnusableStockQty);
                    args.data.UtilizationUnusableStock = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.data.UtilizationUnusableStock);

                    args.data.LeftoverStockQty = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.rowData.LeftoverStockQty);
                    args.data.UtilizationLeftoverStock = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.data.UtilizationLeftoverStock);

                    // alamin
                    if (args.data.SampleStockQty < args.data.UtilizationSampleStock) {
                        //return toastr.error("Invalid: You cannot enter more than Sample Stock");
                    }
                    else if (args.data.LiabilitiesStockQty < args.data.UtilizationLiabilitiesStock) {
                        //return toastr.error("Invalid: You cannot enter more than Utilization Sample Stock");
                    }
                    else if (args.data.UnusableStockQty < args.data.UtilizationUnusableStock) {
                        //return toastr.error("Invalid: You cannot enter more than Unusable Stock");
                    }
                    else if (args.data.LeftoverStockQty < args.data.UtilizationLeftoverStock) {
                        //return toastr.error("Invalid: You cannot enter more than Leftover Stock");
                    }
                    else {
                        args.data.TotalUtilization += args.data.UtilizationSampleStock + args.data.UtilizationLiabilitiesStock + args.data.UtilizationUnusableStock + args.data.UtilizationLeftoverStock;
                    }

                    args.data.TotalUtilization = getDefaultValueWhenInvalidN_FloatWithFourDigit(args.data.TotalUtilization);
                    args.rowData = args.data;
                }
                else if (args.requestType === "delete") {

                }
            },
        });
        $tblGeryYarnUtilizationEL.refreshColumns;
        $tblGeryYarnUtilizationEL.appendTo(tblGeryYarnUtilizationId);
    }
    async function addBooking() {
        var buyerIds = masterData.BuyerID;
        if (buyerIds.length == 0) {
            return toastr.error(`No buyer found.`);
        }

        var finder = new commonFinder({
            title: "Select Booking",
            pageId: pageId,
            height: 320,
            apiEndPoint: `/api/yarn-allocation/GetPendingBooking1/${buyerIds}`,
            fields: "YBookingNo,BuyerName,BuyerTeamName,SeasonName",
            headerTexts: "YBookingNo,Buyer Name,Buyer Team,Season",
            isMultiselect: true,
            autofitColumns: true,
            primaryKeyColumn: "YBookingNo",
            selectedIds: '',//childData.YarnChildPoEWOs,
            seperateSelection: false,
            onMultiselect: function (selectedRecords) {
                finder.hideModal();

                var BookingNos = selectedRecords.map(function (item) {
                    return "'" + item.YBookingNo + "'"
                }).join(",");
                var url = `/api/yarn-allocation/GetYarnBookingWiseChild/${BookingNos}`;
                axios.get(url)
                    .then(function (response) {
                        var retData = response.data.Items;
                        for (var i = 0; i < masterData.Childs.length; i++) {
                            retData = retData.filter(y => y.YBChildItemID != masterData.Childs[i].YBChildItemID);
                        }
                        for (var i = 0; i < retData.length; i++) {
                            masterData.Childs.push(retData[i]);
                            if (masterData.SummaryChilds.filter(y => y.YBookingNo == retData[i].YBookingNo).length == 0) {
                                var obj = {
                                    YBookingNo: retData[i].YBookingNo,
                                    BuyerName: retData[i].BuyerName,
                                    BuyerTeamName: retData[i].BuyerTeamName
                                }
                                masterData.SummaryChilds.push(obj);
                            }
                        }
                        initChild(masterData.Childs);
                        initSummaryChild(masterData.SummaryChilds);
                    })
                    .catch(showResponseError)
            }
        });
        finder.showModal();

    }
    function setPopupYarnCategoryAndReqQty(yarnCategory, reqQty) {
        $formEl.find(".spnYarnCateogy").text(yarnCategory + " - Req Qty : ");
        $formEl.find(".spnReqQty").text(reqQty);
    }
    async function addItem() {
        var rData = {};
        if (masterData.ChildItems.length > 0) {
            rData = masterData.ChildItems[0];
        }
        else {
            rData = loadTimeMasterData.ChildItems[0];
        }

        setPopupYarnCategoryAndReqQty($formEl.find("#YarnCategory").val(), $formEl.find("#YarnReqQty").val());

        _isPipelineStock == false
        //selectedChildIndex = args.rowIndex;
        //if ((_isYA == true && status == statusConstants.PENDING) || (_isYAApprove == true && status == statusConstants.PROPOSED_FOR_APPROVAL)) {
        $formEl.find("#divYarnInfo").show();

        var operationType = "NewOperation";
        if (status !== statusConstants.PENDING) operationType = "updateOperation";
        var yarnCount = replaceInvalidChar(rData.YarnCount);
        var apiUrl = `/api/yarn-allocation/GetStock/${rData.ItemMasterId}/${rData.AllocationChildID}/${operationType}/${yarnCount}`;
        initStockInfo([], false, apiUrl);

        stockSummary = masterData.ChildItems;
        stockSummaryTemp = masterData.ChildItems;
        initStockSummary(stockSummary);
        /*
        axios.get(apiUrl)
            .then(function (response) {
                stockData = response.data;

                stockSummary = masterData.ChildItems;
                if (stockSummary != null) {
                    for (var i = 0; i < stockSummary.length; i++) {
                        var stockObj = stockData.filter(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId);
                        if (stockObj.length != 0) {
                            if (stockSummary[i].AllocationChildItemID == 0) stockSummary[i].AllocationChildItemID = _allocationChildItemID++;

                            stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).AllocationChildItemID = stockSummary[i].AllocationChildItemID;
                            stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).AdvanceAllocationQty = stockSummary[i].AdvanceAllocationQty;
                            stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).SampleAllocationQty = stockSummary[i].SampleAllocationQty;
                            stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).LeftoverAllocationQty = stockSummary[i].LeftoverAllocationQty;
                            stockData.find(y => y.YarnStockSetId == stockSummary[i].YarnStockSetId).LiabilitiesAllocationQty = stockSummary[i].LiabilitiesAllocationQty;
                        }
                        //AdvStockAllocationQty = stockSummary[i].AdvanceAllocationQty + stockSummary[i].SampleAllocationQty + stockSummary[i].LiabilitiesAllocationQty + stockSummary[i].LeftoverAllocationQty;
                    }
                }
                initStockInfo(stockData, false, apiUrl);

                initStockSummary(stockSummary);
                $modalPlanningEl.modal('show');
            })
            .catch(function (error) {
                toastr.error(error.response.data.Message);
            });
        */
        /*}
        else {
            $formEl.find("#divYarnInfo").hide();
            axios.get(`/api/yarn-allocation/GetAllocatedStock/${args.rowData.AllocationChildID}`)
                .then(function (response) {

                    stockSummary = response.data;

                    initStockSummary(stockSummary);
                    $modalPlanningEl.modal('show');
                })
                .catch(function (error) {
                    toastr.error(error.response.data.Message);
                });
        }*/

    }
    function displayYarnAllocation(field, data, column) {
        column.disableHtmlEncode = false;
        return `<a class="btn btn-xs btn-default" href="javascript:void(0)" title="Allocation Qty">
                                     ${data[field] ? data[field] : 0}
                                </a>`;
    }
    function setButton() {
        $formEl.find(".btnAction").hide();

        if (_isYA) {
            if (status == statusConstants.PENDING) {
                $formEl.find("#btnAddBooking,#btnSave").show();
                $toolbarEl.find("#btnCreate").show();
                $("#divtbl" + pageId).find(".btnAddSelectedItem").show();
            }
            else if (status == statusConstants.REVISE) {
                $formEl.find("#btnRevise").show();
            }
        }
        else if (_isYAApprove) {
            if (status == statusConstants.PROPOSED_FOR_APPROVAL) {
                $formEl.find("#btnApprove,#btnReject").show();
            }
            else if (status == statusConstants.ACKNOWLEDGE) {
                $formEl.find("#btnReAllocation,#btnAddItem,#btnAddItemRev").show();
            }
            else if (status == statusConstants.UN_ACKNOWLEDGE) {
                $formEl.find("#btnUnAckRevise,#btnAddItem,#btnAddItemRev").show();
            }
        }
        else if (_isYAAck) {
            if (status == statusConstants.APPROVED) {
                $formEl.find("#btnAcknowledge,#btnUnAcknowledge").show();
            }
        }
    }
    function setDefaultQtyValue(obj) {

        obj.AdvanceAllocationQty = getDefaultValueWhenInvalidN_Float(obj.AdvanceAllocationQty);
        obj.AdvanceStockQty = getDefaultValueWhenInvalidN_Float(obj.AdvanceStockQty);

        obj.SampleAllocationQty = getDefaultValueWhenInvalidN_Float(obj.SampleAllocationQty);
        obj.SampleStockQty = getDefaultValueWhenInvalidN_Float(obj.SampleStockQty);

        obj.LeftoverAllocationQty = getDefaultValueWhenInvalidN_Float(obj.LeftoverAllocationQty);
        obj.LeftoverStockQty = getDefaultValueWhenInvalidN_Float(obj.LeftoverStockQty);

        obj.LiabilitiesAllocationQty = getDefaultValueWhenInvalidN_Float(obj.LiabilitiesAllocationQty);
        obj.LiabilitiesStockQty = getDefaultValueWhenInvalidN_Float(obj.LiabilitiesStockQty);

        obj.PipelineAllocationQty = getDefaultValueWhenInvalidN_Float(obj.PipelineAllocationQty);
        obj.PipelineStockQty = getDefaultValueWhenInvalidN_Float(obj.PipelineStockQty);

        return obj;
    }
    function isPopupDataValid(summaryList, isPipelineStock) {
        if (_isYAApprove && status == statusConstants.UN_ACKNOWLEDGE) return true;

        var hasError = false;
        var totalQty = 0;
        for (var s = 0; s < summaryList.length; s++) {
            var summaryObj = summaryList[s];
            summaryObj = setDefaultQtyValue(summaryObj);

            totalQty += summaryObj.AdvanceAllocationQty;
            totalQty += summaryObj.SampleAllocationQty;
            totalQty += summaryObj.LeftoverAllocationQty;
            totalQty += summaryObj.LiabilitiesAllocationQty;
            totalQty += summaryObj.PipelineAllocationQty;

            if (summaryObj.AdvanceAllocationQty > summaryObj.AdvanceStockQty) {
                toastr.error(`Advance Stock allocation qty ${summaryObj.AdvanceAllocationQty} cannot be greater than Advance qty ${summaryObj.AdvanceStockQty}`);
                hasError = true;
                break;
            }
            if (summaryObj.SampleAllocationQty > summaryObj.SampleStockQty) {
                toastr.error(`Sample Stock allocation qty ${summaryObj.SampleAllocationQty} cannot be greater than Sample qty ${summaryObj.SampleStockQty}`);
                hasError = true;
                break;
            }
            if (summaryObj.LeftoverAllocationQty > summaryObj.LeftoverStockQty) {
                toastr.error(`Leftover Stock allocation qty ${summaryObj.LeftoverAllocationQty} cannot be greater than Leftover qty ${summaryObj.LeftoverStockQty}`);
                hasError = true;
                break;
            }
            if (summaryObj.LiabilitiesAllocationQty > summaryObj.LiabilitiesStockQty) {
                toastr.error(`Liabilities Stock allocation qty ${summaryObj.LiabilitiesAllocationQty} cannot be greater than Liabilities qty ${summaryObj.LiabilitiesStockQty}`);
                hasError = true;
                break;
            }
            if (summaryObj.PipelineAllocationQty > summaryObj.PipelineStockQty) {
                toastr.error(`Pipeline Stock allocation qty ${summaryObj.PipelineAllocationQty} cannot be greater than Pipeline qty ${summaryObj.PipelineStockQty}`);
                hasError = true;
                break;
            }
        }
        if (hasError) return false;

        if (!isPipelineStock) {
            $formEl.find("#btnOk").attr("AdvanceStockAllocationQty", totalQty);
        } else {
            $formEl.find("#btnOk").attr("PipelineStockAllocationQty", totalQty);
        }

        //if (isCheckQtyValidation()) {
        //    var objOfQty = getAllocationQtyOnBtnOk();
        //    if (objOfQty.AdvanceStockAllocationQty + objOfQty.PipelineStockAllocationQty + objOfQty.QtyForPO > objOfQty.ReqQty) {
        //        toastr.error(`Total Qty ${objOfQty.AdvanceStockAllocationQty + objOfQty.PipelineStockAllocationQty + objOfQty.QtyForPO} (
        //                 Advance Stock Allocation Qty : ${objOfQty.AdvanceStockAllocationQty},
        //                 Pipeline Stock Allocation Qty : ${objOfQty.PipelineStockAllocationQty},
        //                 Qty For PO : ${objOfQty.QtyForPO}
        //                 ) cannot be greater than required qty ${objOfQty.ReqQty}`);
        //        return false;
        //    }
        //}
        return true;
    }
    function isCheckQtyValidation() {
        if (_isYAApprove && status == statusConstants.UN_ACKNOWLEDGE) return false;
        return true;
    }
    function save() {
        /*var data = formDataToJson($formEl.serializeArray());*/
        var data = masterData;

        if (data.Childs.length == 0) {
            toastr.error("No item found for allocation.");
            return false;
        }
        var childs = $tblChildEl.getCurrentViewRecords();
        if (childs.length > _maximumSelectedItem) {
            return toastr.error(`You can select maximum ${_maximumSelectedItem} items (Current total items ${childs.length}).`);
        }


        var hasError = false;
        var hasAnyValue = false;
        if (_isYA) {
            var pList = [];
            var qList = [];
            data.Childs = $tblChildEl.getCurrentViewRecords();

            if (_isYA && status == statusConstants.REVISE) {
                data.Childs = $tblRevisedChildEl.getCurrentViewRecords();
                //var allData = $tblChildEl.getCurrentViewRecords();
                //for (var i = 0; i < allData.length; i++) {
                //    var indexF = data.Childs.findIndex(y => y.AllocationChildID == allData[i].AllocationChildID);
                //    if (indexF == -1) {
                //        data.Childs.push(allData[i]);
                //    }
                //}
            }

            //No Need Ratin
            //var topChild = DeepClone(data.Childs[0]);
            //data.Childs.map(x => {
            //    x.AdvanceStockAllocationQty = getDefaultValueWhenInvalidN_Float(topChild.AdvanceStockAllocationQty);
            //    x.PipelineStockAllocationQty = getDefaultValueWhenInvalidN_Float(topChild.PipelineStockAllocationQty);
            //    x.TotalAllocationQty = getDefaultValueWhenInvalidN_Float(topChild.AdvanceStockAllocationQty);
            //    x.AllocatedQty = getDefaultValueWhenInvalidN_Float(topChild.AllocatedQty);
            //    x.PlannedPipelineQty = getDefaultValueWhenInvalidN_Float(topChild.PlannedPipelineQty);
            //    x.QtyForPO = getDefaultValueWhenInvalidN_Float(topChild.QtyForPO);

            //    x.ChildItems = topChild.ChildItems
            //});
            //End No Need

            for (var i = 0; i < data.Childs.length; i++) {

                var rowMessage = ` (at row ${i + 1})`;

                data.Childs[i].AdvanceStockAllocationQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].AdvanceStockAllocationQty);
                data.Childs[i].PipelineStockAllocationQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].PipelineStockAllocationQty);
                data.Childs[i].TotalAllocationQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].AdvanceStockAllocationQty);
                data.Childs[i].AllocatedQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].AllocatedQty);
                data.Childs[i].PlannedPipelineQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].PlannedPipelineQty);
                data.Childs[i].QtyForPO = getDefaultValueWhenInvalidN_Float(data.Childs[i].QtyForPO);

                if (data.Childs[i].AdvanceStockAllocationQty > 0 && data.Childs[i].ChildItems.length == 0) {
                    toastr.error(`Number of allocation popup item mismatch with allocation qty ${rowMessage}.`);
                    hasError = true;
                    break;
                }
                if (data.Childs[i].PipelineStockAllocationQty > 0 && data.Childs[i].ChildPipelineItems.length == 0) {
                    toastr.error(`Number of pipeline allocation popup item mismatch with pipeline allocation qty ${rowMessage}.`);
                    hasError = true;
                    break;
                }

                if (data.Childs[i].ChildItems.length == 0 && data.Childs[i].ChildPipelineItems.length == 0 && data.Childs[i].QtyForPO == 0) {
                    toastr.error(`No information found to save ${rowMessage}.`);
                    hasError = true;
                    break;
                }

                pList.push(...data.Childs[i].ChildPipelineItems);
                qList.push(...data.Childs[i].ChildItems);
            }
            if (hasError) return false;

            //Pipeline Validation
            var itemList = [];
            pList.map(x => {
                var indexF = itemList.findIndex(y => y.YarnStockSetId == x.YarnStockSetId);
                if (indexF == -1) {
                    itemList.push({
                        YarnStockSetId: x.YarnStockSetId,
                        MaxPipelineStockQty: x.PipelineStockQty,
                        PipelineAllocationQty: x.PipelineAllocationQty
                    });
                }
                else {
                    itemList[indexF].MaxPipelineStockQty = x.PipelineStockQty;
                    itemList[indexF].PipelineAllocationQty += x.PipelineAllocationQty;
                }
            });

            for (var i = 0; i < itemList.length; i++) {
                if (itemList[i].PipelineAllocationQty > itemList[i].MaxPipelineStockQty) {
                    toastr.error(`Total pipeline allocation qty ${itemList[i].PipelineAllocationQty} cannot be greater than stock pipeline qty ${itemList[i].MaxPipelineStockQty}`);
                    hasError = true;
                    break;
                }
            }
            if (hasError) return false;
            //Pipeline Validation


            //Qarantine Validation
            itemList = [];
            qList.map(x => {
                var indexF = itemList.findIndex(y => y.YarnStockSetId == x.YarnStockSetId);
                if (indexF == -1) {
                    itemList.push({
                        YarnStockSetId: x.YarnStockSetId,
                        MaxAdvanceStockQty: x.AdvanceStockQty,
                        MaxSampleStockQty: x.SampleStockQty,
                        MaxLeftoverStockQty: x.LeftoverStockQty,
                        MaxLiabilitiesStockQty: x.LiabilitiesStockQty,

                        AdvanceAllocationQty: x.AdvanceAllocationQty,
                        SampleAllocationQty: x.SampleAllocationQty,
                        LeftoverAllocationQty: x.LeftoverAllocationQty,
                        LiabilitiesAllocationQty: x.LiabilitiesAllocationQty
                    });
                }
                else {
                    itemList[indexF].MaxAdvanceStockQty = x.AdvanceStockQty;
                    itemList[indexF].MaxSampleStockQty = x.SampleStockQty;
                    itemList[indexF].MaxLeftoverStockQty = x.LeftoverStockQty;
                    itemList[indexF].MaxLiabilitiesStockQty = x.LiabilitiesStockQty;

                    itemList[indexF].AdvanceAllocationQty += x.AdvanceAllocationQty;
                    itemList[indexF].SampleAllocationQty += x.SampleAllocationQty;
                    itemList[indexF].LeftoverAllocationQty += x.LeftoverAllocationQty;
                    itemList[indexF].LiabilitiesAllocationQty += x.LiabilitiesAllocationQty;
                }
            });

            for (var i = 0; i < itemList.length; i++) {
                if (itemList[i].AdvanceAllocationQty > itemList[i].MaxAdvanceStockQty) {
                    toastr.error(`Total advance allocation qty ${itemList[i].AdvanceAllocationQty} cannot be greater than stock advance qty ${itemList[i].MaxAdvanceStockQty}`);
                    hasError = true;
                    break;
                }
                if (itemList[i].SampleAllocationQty > itemList[i].MaxSampleStockQty) {
                    toastr.error(`Total sample allocation qty ${itemList[i].SampleAllocationQty} cannot be greater than stock sample qty ${itemList[i].MaxSampleStockQty}`);
                    hasError = true;
                    break;
                }
                if (itemList[i].LeftoverAllocationQty > itemList[i].MaxLeftoverStockQty) {
                    toastr.error(`Total leftover allocation qty ${itemList[i].LeftoverAllocationQty} cannot be greater than stock leftover qty ${itemList[i].MaxLeftoverStockQty}`);
                    hasError = true;
                    break;
                }
                if (itemList[i].LiabilitiesAllocationQty > itemList[i].MaxLiabilitiesStockQty) {
                    toastr.error(`Total liabilities allocation qty ${itemList[i].LiabilitiesAllocationQty} cannot be greater than stock liabilities qty ${itemList[i].MaxLiabilitiesStockQty}`);
                    hasError = true;
                    break;
                }
            }
            if (hasError) return false;
            //Qarantine Validation
        } else {
            for (var i = 0; i < data.Childs.length; i++) {
                data.Childs[i].AdvanceStockAllocationQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].AdvanceStockAllocationQty);
                data.Childs[i].PipelineStockAllocationQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].PipelineStockAllocationQty);
                data.Childs[i].TotalAllocationQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].AdvanceStockAllocationQty);
                data.Childs[i].AllocatedQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].AllocatedQty);
                data.Childs[i].PlannedPipelineQty = getDefaultValueWhenInvalidN_Float(data.Childs[i].PlannedPipelineQty);
                data.Childs[i].QtyForPO = getDefaultValueWhenInvalidN_Float(data.Childs[i].QtyForPO);
            }
        }

        var path = '/api/yarn-allocation/save';
        var msg = 'Saved successfully!';

        data.Propose = _statusObj.Propose;
        data.Approve = _statusObj.Approve;
        data.Reject = _statusObj.Reject;
        data.RejectReason = _statusObj.RejectReason;
        data.Acknowledge = _statusObj.Acknowledge;
        data.UnAcknowledge = _statusObj.UnAcknowledge;
        data.UnAcknowledgeReason = _statusObj.UnAcknowledgeReason;

        if (status == statusConstants.REVISE) {
            data.IsRevise = true;
            data.RevisionReason = "";
        }

        if (_statusObj.Propose) {
            data.IsSendForApprove = true;
        }
        if (data.Approve) {
            //path = '/api/yarn-allocation/approve';
            msg = 'Approved successfully!';
        }
        if (data.Reject) {
            //path = '/api/yarn-allocation/reject';
            msg = 'Rejected successfully!';
        }
        /*if (data.Acknowledge) {
            path = '/api/yarn-allocation/acknowledge';
            msg = 'Acknowledged successfully!';
        }
        if (data.UnAcknowledge) {
            path = '/api/yarn-allocation/unacknowledge';
            msg = 'Unacknowledged successfully!';
        }*/
        axios.post(path, data)
            .then(function (response) {
                toastr.success(msg);
                backToList();
            })
            .catch(function (error) {
                toastr.error(error.response.data.Message);
            });
    }
    function saveAcknowledgement(result = "") {
        /*var data = formDataToJson($formEl.serializeArray());*/
        var data = masterData;

        data.ChildItems = $tblChildEl.getCurrentViewRecords();

        if (data.ChildItems.length == 0) {
            toastr.error("No item found for allocation.");
            return false;
        }

        if (result) {
            data.AllocationInternalReviseReason = result;
            data.IsAllocationInternalRevise = true;
        } else {
            data.IsAllocationInternalRevise = false;
        }

        if (_statusObj.ReAllocation || _statusObj.UnAckRevise) {
            if (_yarnStockSetId == 0) {
                toastr.error("Invalid yarn stock set id.");
                return false;
            }
            if (_allocationChildId == 0) {
                toastr.error("Invalid allocation child id.");
                return false;
            }
            data.AllocationChildID = _allocationChildId;
            data.YarnStockSetId = _yarnStockSetId;
            data.AllocationChildItemID = _allocationChildItemID;
        }

        var path = '';
        var msg = '';
        data.Acknowledge = _statusObj.Acknowledge;
        data.UnAcknowledge = _statusObj.UnAcknowledge;
        data.UnAcknowledgeReason = _statusObj.UnAcknowledgeReason;
        if (_statusObj.ReAllocation) {
            data.IsReAllocation = true;
            path = '/api/yarn-allocation/reallocation';
            msg = 'Re-allocated successfully!';
        }
        else if (_statusObj.UnAckRevise) {
            if (data.ChildItems.length == 0) {
                toastr.error("No item found for revision.");
                return false;
            }

            //Qty Validation
            var maxNetYarnReqQty = getDefaultValueWhenInvalidN_Float($formEl.find("#YarnReqQty").val()),
                usedOtherAllocatedQty = getDefaultValueWhenInvalidN_Float($formEl.find("#OtherAllocatedQty").val()),
                currentAllocatedQty = 0;

            data.ChildItems.map(x => {
                currentAllocatedQty += x.TotalAllocationQty;
            });
            currentAllocatedQty = getDefaultValueWhenInvalidN_Float(currentAllocatedQty);
            var totalQty = usedOtherAllocatedQty
                + currentAllocatedQty;

            if (totalQty > maxNetYarnReqQty) {
                var remainingQty = getDefaultValueWhenInvalidN_Float(maxNetYarnReqQty - usedOtherAllocatedQty);
                toastr.error(`Maximum remaining qty is ${remainingQty} but your selected total allocation qty is ${currentAllocatedQty}`);
                return false;
            }
            //Qty Validation

            data.IsUnAckRevise = true;
            path = '/api/yarn-allocation/reallocation';
            msg = 'Revise successfully!';
        }
        else if (data.UnAcknowledge) {
            path = '/api/yarn-allocation/unacknowledge';
            msg = 'Unacknowledged successfully!';
        }
        else if (data.Acknowledge) {
            path = '/api/yarn-allocation/acknowledge';
            msg = 'Acknowledged successfully!';
        }

        axios.post(path, data)
            .then(function (response) {
                toastr.success(msg);
                backToList();
            })
            .catch(function (error) {
                toastr.error(error.response.data.Message);
            });
    }
    function DeepClone(obj) {
        return JSON.parse(JSON.stringify(obj));
    }
    function resetGlobals() {

        _statusObj = {
            Approve: false,
            Acknowledge: false,
            UnAcknowledge: false,
            UnAcknowledgeReason: "",
            Propose: false,
            Reject: false,
            RejectReason: "",
            ReAllocation: false,
            UnAckRevise: false,
            Revise: false
        };
        _allocationChildId = 999999;
        _yarnStockSetId = 0;
        _allocationChildItemID = 0;
        _isAutoGenerated = false;

        resetGlobalArray();
    }
    function actionBtnHideShow() {
        if (_isYA) {
            if (status == statusConstants.PENDING) {
                $formEl.find("#btnSave").show();
            }
        }
        else if (_isYAApprove) {
            if (status == statusConstants.PROPOSED_FOR_APPROVAL) {
                $formEl.find("#btnApprove,#btnReject").show();
            }
        }
        else if (_isYAAck) {
            if (status == statusConstants.APPROVED) {
                $formEl.find("#btnAcknowledge,#btnUnAcknowledge").show();
            }
        }
    }
    function isQtyValid(obj, rowIndex) {
        var maxQty = obj.NetYarnReqQty;
        maxQty = parseFloat(maxQty.toFixed(2));

        var previousTotalQty = parseFloat(obj.AllocatedQty) + parseFloat(obj.PlannedPipelineQty) + parseFloat(obj.PlannedPOQty);
        var currentTotalQty = parseFloat(obj.AdvanceStockAllocationQty) + parseFloat(obj.PipelineStockAllocationQty) + parseFloat(obj.QtyForPO);
        var totalQty = previousTotalQty + currentTotalQty;
        totalQty = parseFloat(totalQty.toFixed(2));

        if (totalQty > maxQty) {
            toastr.error(`Total qty (${totalQty}) cannot be more than Max net yarn req qty (${maxQty}) at row ${rowIndex}`);
            return false;
        }
        return true;
    }
    function resetGlobalArray() {
        stockPipelineSummary = [];
        stockPipelineSummaryTemp = [];

        stockSummary = [];
        stockSummaryTemp = [];
    }
    function getAdvanceAndPipelineAllocationQty(childObj) {
        if (childObj != null) {
            var totalAdvanceStockAllocationQty = 0;
            childObj.ChildItems.map(ci => {
                totalAdvanceStockAllocationQty += getDefaultValueWhenInvalidN_Float(ci.AdvanceAllocationQty);
                totalAdvanceStockAllocationQty += getDefaultValueWhenInvalidN_Float(ci.SampleAllocationQty);
                totalAdvanceStockAllocationQty += getDefaultValueWhenInvalidN_Float(ci.LeftoverAllocationQty);
                totalAdvanceStockAllocationQty += getDefaultValueWhenInvalidN_Float(ci.LiabilitiesAllocationQty);
            });
            childObj.AdvanceStockAllocationQty = totalAdvanceStockAllocationQty;

            var totalPipelineStockAllocationQty = 0;
            childObj.ChildPipelineItems.map(ci => {
                totalPipelineStockAllocationQty += getDefaultValueWhenInvalidN_Float(ci.PipelineAllocationQty);
            });
            childObj.PipelineStockAllocationQty = totalPipelineStockAllocationQty;
            return childObj;
        }
    }
    function displayQtyUsedDetails() {
        if (_isYAApprove && status == statusConstants.UN_ACKNOWLEDGE) {
            var otherAllocatedQty = $formEl.find("#OtherAllocatedQty").val();
            if (otherAllocatedQty == 0) {
                toastr.error("No detail found.");
                return false;
            }
            $modalQtyDetail.modal('show');
            if ($tblQtyDetailEl) $tblQtyDetailEl.destroy();
            $formEl.find("#spnQtyDetail").text("(Total Qty : " + otherAllocatedQty + ")");

            var columnList = [
                {
                    field: 'YarnAllocationNo', headerText: 'Allocation No', width: 100
                },
                {
                    field: 'AdvanceAllocationQty', headerText: 'Advance Allocation', width: 100
                },
                {
                    field: 'SampleAllocationQty', headerText: 'Sample Allocation', width: 100
                },
                {
                    field: 'LeftoverAllocationQty', headerText: 'Leftover Allocation', width: 100
                },
                {
                    field: 'LiabilitiesAllocationQty', headerText: 'Liabilities Allocation', width: 100
                },
                {
                    field: 'PipelineAllocationQty', headerText: 'Pipeline Allocation', width: 100
                },
                {
                    field: 'QtyForPO', headerText: 'Qty For PO', width: 100
                }
            ];

            var ybChildItemID = masterData.YBChildItemID;
            var allocationChildItemID = $formEl.find("#AllocationChildItemID").val();
            if (ybChildItemID > 0 && allocationChildItemID > 0) {
                var apiUrl = `/api/yarn-allocation/get-all-allocation-by-ybChildItemId/${ybChildItemID}/${allocationChildItemID}`;
                $tblQtyDetailEl = new initEJ2Grid({
                    tableId: tblQtyDetailId,
                    autofitColumns: true,
                    apiEndPoint: apiUrl,
                    columns: columnList,
                    allowSorting: true,
                    editSettings: { allowAdding: false, allowEditing: false, allowDeleting: false, mode: "Normal" },
                });
            }
        }
    }
    function isHasFilter() {
        var filterInputs = ["txtFilterBuyer"
            , "txtFilterBuyerTeam"
            , "txtFilterCount"
            , "txtFilterYarnBooking"
            , "txtFilterYarnDescription"
            , "txtFilterFabricShade"
            , "txtFilterFabricType"
            , "txtFilterYarnType"
            , "txtFilterYarnRequisitionType"
            , "txtFilterFabricGSM"
        ];
        var filterInputsAttr = ["selectedBuyerIds"
            , "selectedBuyerTeamIds"
            , "selectedCountIds"
            , "selectedYBookingIds"
            , "selectedYItemMasterIds"
            , "selectedFabricShadeIds"
            , "selectedFabricTypeIds"
            , "selectedYarnTypeIds"
            , "selectedYarnRequisitionTypes"
            , "selectedFabricGSMIds"
        ];
        var filterChk = ["chkD1"
            , "chkD2"
            , "chkD3"
            , "chkD4"
            , "chkD5"
            , "chkF1"
        ];
        var hasFilter = false;
        for (var iF = 0; iF < filterInputs.length; iF++) {
            var selectedIds = getDefaultValueWhenInvalidS($("#" + filterInputs[iF]).attr(filterInputsAttr[iF]));
            if (selectedIds.length > 0) {
                hasFilter = true;
                break;
            }
        }
        if (!hasFilter) {
            for (var iF = 0; iF < filterChk.length; iF++) {
                var isChecked = $('#' + filterChk[iF]).is(':checked')
                if (isChecked) {
                    hasFilter = true;
                    break;
                }
            }
        }
        return hasFilter;
    }
})();