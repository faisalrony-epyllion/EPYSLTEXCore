using Dapper;
using EPYSLTEX.Core.Statics;
using EPYSLTEXCore.Application.Interfaces.Booking;
using EPYSLTEXCore.Infrastructure.Data;
using EPYSLTEXCore.Infrastructure.Entities;
using EPYSLTEXCore.Infrastructure.Entities.Tex.Booking;
using EPYSLTEXCore.Infrastructure.Entities.Tex.CountEntities;
using EPYSLTEXCore.Infrastructure.Entities.Tex.Fabric;
using EPYSLTEXCore.Infrastructure.Entities.Tex.General;
using EPYSLTEXCore.Infrastructure.Entities.Tex.General.Yarn;
using EPYSLTEXCore.Infrastructure.Entities.Tex.Inventory.Yarn;
using EPYSLTEXCore.Infrastructure.Entities.Tex.RND;
using EPYSLTEXCore.Infrastructure.Entities.Tex.SCD;
using EPYSLTEXCore.Infrastructure.Exceptions;
using EPYSLTEXCore.Infrastructure.Static;
using EPYSLTEXCore.Infrastructure.Statics;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EPYSLTEXCore.Application.Services.Booking
{
    public class BDSAcknowledgeService : IBDSAcknowledgeService
    {
        private readonly IDapperCRUDService<FBookingAcknowledge> _service;
        //private readonly ISignatureRepository _signatureRepository;
        private readonly SqlConnection _connection;
        private readonly IDapperCRUDService<SampleBookingMaster> _gmtservice;
        private string _yarnBookingNo = "";
        string _startingDate = "31-May-2024";

        public BDSAcknowledgeService(IDapperCRUDService<SampleBookingMaster> gmtservice
            , IDapperCRUDService<FBookingAcknowledge> service
            //, ISignatureRepository signatureRepository
            )
        {
            _service = service;
            //_signatureRepository = signatureRepository;
            _connection = service.Connection;
            _gmtservice = gmtservice;
            _gmtservice.Connection = service.GetConnection(AppConstants.GMT_CONNECTION);

#if DEBUG
            _startingDate = "31-May-2023";
#else
            _startingDate = "31-May-2024";
#endif

        }

        public async Task<List<FBookingAcknowledge>> GetPagedAsync(Status status, int isBDS, PaginationInfo paginationInfo, LoginUser AppUser)
        {
            string tempGuid = CommonFunction.GetNewGuid();
            bool isUsedTemp = false;

            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BookingID Desc" : paginationInfo.OrderBy;
            string queryIsProjectionAnd = "";
            string queryIsProjectionWhere = "";
            string queryProjConcept = "";
            string queryConceptJoin = "";
            string sFlag = "N";

            if (isBDS == 3)
            {
                queryIsProjectionAnd = " AND FCM.IsBDS = 3 ";
                queryIsProjectionWhere = " WHERE FCM.IsBDS = 3 ";
                queryProjConcept = $@"FCM AS
					(
						SELECT FCM.BookingID 
						FROM FreeConceptMaster FCM 
						WHERE FCM.IsBDS = 3
						GROUP BY FCM.BookingID 
					),";
                queryConceptJoin = " INNER JOIN FCM ON FCM.BookingID = FBC.BookingID ";
            }

            string sql;
            if (status == Status.Pending)
            {
                if (isBDS != 3)
                {
                    sql = AppUser.IsSuperUser ?
                    $@"WITH BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    SBM AS
                    (
                        Select a.BookingID, a.BookingNo, a.BookingDate, a.RevisionNo, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID,
                        a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                        From {DbNames.EPYSL}..SampleBookingMaster a
                        Left Join IMG ON IMG.BookingID = a.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleType ST ON ST.SampleTypeID = a.SampleID AND ST.SampleTypeName <> 'Projection Booking'
                        Where a.SampleID <> 13 AND a.Proposed = 1 AND a.IsCancel=0 And a.BookingDate >= '04/11/2022' And a.ExportOrderID = 0 AND ((a.SwatchAttached=1 AND a.SwatchReceive=1) or (a.SwatchAttached=0 AND a.SwatchReceive=0))
                    ),"
                        :
                    $@"With BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    BT As (
                        Select CategoryTeamID
                        From {DbNames.EPYSL}..EmployeeAssignContactTeam
                        Where EmployeeCode = {AppUser.EmployeeCode} AND IsActive = 1
                        Group By CategoryTeamID
                    ), 
                    B As (
                        Select C.ContactID
                        From {DbNames.EPYSL}..ContactAssignTeam C
                        Inner Join BT On BT.CategoryTeamID = C.CategoryTeamID
                        Group By C.ContactID
                    ), 
                    SBM AS (
                        Select A.BookingID, A.BookingNo, A.BookingDate, A.RevisionNo, A.SLNo, A.StyleNo, A.BuyerID, A.BuyerTeamID, A.SupplierID, A.ExecutionCompanyID, A.SeasonID, A.Remarks, A.OrderQty, A.AddedBy, A.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                        From {DbNames.EPYSL}..SampleBookingMaster A
                        INNER JOIN B ON B.ContactID = A.BuyerID
                        Left Join IMG ON IMG.BookingID = a.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleType ST ON ST.SampleTypeID = A.SampleID AND ST.SampleTypeName <> 'Projection Booking'
                        Where A.SampleID <> 13 AND A.Proposed=1 AND a.IsCancel=0 And A.BookingDate >= '04/11/2022' And A.ExportOrderID = 0 AND ((A.SwatchAttached=1 AND A.SwatchReceive=1) or (A.SwatchAttached=0 AND A.SwatchReceive=0))
                    ),";
                }
                else
                {
                    sql = AppUser.IsSuperUser ?
                    $@"WITH BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    SBM AS
                    (
                        Select a.BookingID, a.BookingNo, a.BookingDate, a.RevisionNo, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID,
                        a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                        From {DbNames.EPYSL}..SampleBookingMaster a
                        Left Join IMG ON IMG.BookingID = a.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleType ST ON ST.SampleTypeID = a.SampleID AND ST.SampleTypeName = 'Projection Booking'
                        Where a.SampleID <> 13 AND a.Proposed = 1 AND a.IsCancel=0 And a.BookingDate >= '04/11/2022' And a.ExportOrderID = 0
                    ),"
                           :
                    $@"With BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    BT As (
                        Select CategoryTeamID
                        From {DbNames.EPYSL}..EmployeeAssignContactTeam
                        Where EmployeeCode = {AppUser.EmployeeCode} AND IsActive = 1
                        Group By CategoryTeamID
                    ), 
                    B As (
                        Select C.ContactID
                        From {DbNames.EPYSL}..ContactAssignTeam C
                        Inner Join BT On BT.CategoryTeamID = C.CategoryTeamID
                        Group By C.ContactID
                    ), 
                    SBM AS (
                        Select A.BookingID, A.BookingNo, A.BookingDate, A.RevisionNo, A.SLNo, A.StyleNo, A.BuyerID, A.BuyerTeamID, A.SupplierID, A.ExecutionCompanyID, A.SeasonID, A.Remarks, A.OrderQty, A.AddedBy, A.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                        From {DbNames.EPYSL}..SampleBookingMaster A
                        INNER JOIN B ON B.ContactID = A.BuyerID
                        Left Join IMG ON IMG.BookingID = a.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleType ST ON ST.SampleTypeID = A.SampleID AND ST.SampleTypeName = 'Projection Booking'
                        Where A.SampleID <> 13 AND A.Proposed=1 AND a.IsCancel=0 And A.BookingDate >= '04/11/2022' And A.ExportOrderID = 0
                    ),";
                }
                sql += $@"
                M AS (
	                 Select SBM.BookingID, SBM.BookingNo, SBM.BookingDate, SBM.SLNo, SBM.StyleNo, SBM.OrderQty, SBM.BuyerID, SBM.BuyerTeamID
		                ,SBM.SupplierID,SBM.ExecutionCompanyID,FBC.ItemMasterID,FBC.ConsumptionID,FBC.SubGroupID,SBM.Remarks,SBM.SeasonID, SBM.AddedBy BookingBy
                        ,PendingRevision= (CASE WHEN FBA.PreRevisionNo <> SBM.RevisionNo THEN 'Booking Revision No ' + CONVERT(VARCHAR(10),SBM.RevisionNo) ELSE '' END), SBM.ImagePath
	                From SBM
	                Inner Join {DbNames.EPYSL}..SampleType ST On SBM.SampleID = ST.SampleTypeID
					LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBM.BookingID
					LEFT JOIN FBookingAcknowledge FBA On FBA.BookingID = SBM.BookingID
                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingID = FBA.BookingID
                   -- Where ST.DisplayCode <> 'LR' AND FBA.BookingID IS NULL
                    Where ST.DisplayCode <> 'LR'  AND (FBA.BookingID IS NULL or FBA.PreRevisionNo <> SBM.RevisionNo)
                ),
                AppList AS
                (
	                SELECT BIG.BookingID, BIG.IsApproved, ApproveDate = case when S1.DateUpdated is not null then S1.DateUpdated else S1.DateAdded end
	                FROM {DbNames.EPYSL}..SampleBookingItemGroup BIG
	                INNER JOIN M ON M.BookingID = BIG.BookingID
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster S1 ON S1.BookingID = M.BookingID
	                WHERE BIG.IsApproved = 1
	                GROUP BY BIG.BookingID, BIG.IsApproved, S1.DateUpdated,S1.DateAdded
                ),
                F AS (
	                SELECT FBA.FBAckID, M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty BookingQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
		                , M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.Remarks, Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy
                        ,M.PendingRevision, M.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, AL.ApproveDate
	                FROM M
	                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
	                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
	                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID AND FBA.IsUnAcknowledge=1
                    Inner Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                    LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID
                    LEFT JOIN AppList AL ON AL.BookingID = M.BookingID
					Group By M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
		                , M.ExecutionCompanyID, CTO.ShortName , CCT.TeamName, C.CompanyName,M.Remarks, Supplier.ShortName,Season.SeasonName, M.BookingBy
                        ,M.PendingRevision,FBA.FBAckID, M.ImagePath, Supplier.MappingCompanyID, AL.ApproveDate
                )

                SELECT *,Count(*) Over() TotalRows FROM F ";
            }
            else if (status == Status.Reject)
            {
                sql = AppUser.IsSuperUser ?
                    $@"WITH BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    SBM AS
                    (
                        Select a.BookingID, a.BookingNo, a.BookingDate, a.RevisionNo, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID,
                        a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                        From {DbNames.EPYSL}..SampleBookingMaster a
                        Left Join IMG ON IMG.BookingID = a.BookingID
                        Where a.Proposed = 1 And a.BookingDate >= '04/11/2022' And a.ExportOrderID = 0
                        AND a.SampleID <> 13 AND a.IsCancel = 1
                    ),"
                    :
                    $@"With BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    BT As (
                        Select CategoryTeamID
                        From {DbNames.EPYSL}..EmployeeAssignContactTeam
                        Where EmployeeCode = {AppUser.EmployeeCode} AND IsActive = 1
                        Group By CategoryTeamID
                    ), 
                    B As (
                        Select C.ContactID
                        From {DbNames.EPYSL}..ContactAssignTeam C
                        Inner Join BT On BT.CategoryTeamID = C.CategoryTeamID
                        Group By C.ContactID
                    ), 
                    {queryProjConcept}
                    SBM AS (
                        Select A.BookingID, A.BookingNo, A.BookingDate, A.RevisionNo, A.SLNo, A.StyleNo, A.BuyerID, A.BuyerTeamID, A.SupplierID, A.ExecutionCompanyID, A.SeasonID, A.Remarks, A.OrderQty, A.AddedBy, A.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                        From {DbNames.EPYSL}..SampleBookingMaster A
                        INNER JOIN B ON B.ContactID = A.BuyerID
                        Left Join IMG ON IMG.BookingID = a.BookingID
                        Where A.Proposed=1 And A.BookingDate >= '04/11/2022' And A.ExportOrderID = 0
                        --AND ((A.SwatchAttached=1 AND A.SwatchReceive=1) or (A.SwatchAttached=0 AND A.SwatchReceive=0))
                        AND a.SampleID <> 13 AND IsCancel = 1
                    ),";

                sql += $@"
                M AS (
	                 Select SBM.BookingID, SBM.BookingNo, SBM.BookingDate, SBM.SLNo, SBM.StyleNo, SBM.OrderQty, SBM.BuyerID, SBM.BuyerTeamID
		                ,SBM.SupplierID,SBM.ExecutionCompanyID,FBC.ItemMasterID,FBC.ConsumptionID,FBC.SubGroupID,SBM.Remarks,SBM.SeasonID, SBM.AddedBy BookingBy
                        ,PendingRevision= (CASE WHEN FBA.PreRevisionNo <> SBM.RevisionNo THEN 'Booking Revision No ' + CONVERT(VARCHAR(10),SBM.RevisionNo) ELSE '' END), SBM.ImagePath
	                From SBM
	                Inner Join {DbNames.EPYSL}..SampleType ST On SBM.SampleID = ST.SampleTypeID
					LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBM.BookingID
					LEFT JOIN FBookingAcknowledge FBA On FBA.BookingID = SBM.BookingID
                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingID = FBA.BookingID
                   -- Where ST.DisplayCode <> 'LR' AND FBA.BookingID IS NULL
                    Where ST.DisplayCode <> 'LR' AND (FBA.BookingID IS NULL or FBA.PreRevisionNo <> SBM.RevisionNo)
                    {queryIsProjectionAnd}
                ),
                AppList AS
                (
	                SELECT BIG.BookingID, BIG.IsApproved, ApproveDate = case when S1.DateUpdated is not null then S1.DateUpdated else S1.DateAdded end
	                FROM {DbNames.EPYSL}..SampleBookingItemGroup BIG
	                INNER JOIN M ON M.BookingID = BIG.BookingID
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster S1 ON S1.BookingID = M.BookingID
	                WHERE BIG.IsApproved = 1
	                GROUP BY BIG.BookingID, BIG.IsApproved, S1.DateUpdated,S1.DateAdded
                ),
                F AS (
	                SELECT FBA.FBAckID, M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty BookingQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
		                , M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.Remarks, Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy
                        ,M.PendingRevision, M.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, AL.ApproveDate
	                FROM M
	                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
	                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
	                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID AND FBA.IsUnAcknowledge=1
                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingID = FBA.BookingID
                    Inner Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                    LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID
                    LEFT JOIN AppList AL ON AL.BookingID = M.BookingID
                    {queryIsProjectionWhere}
					Group By M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
		                , M.ExecutionCompanyID, CTO.ShortName , CCT.TeamName, C.CompanyName,M.Remarks, Supplier.ShortName,Season.SeasonName, M.BookingBy
                        ,M.PendingRevision,FBA.FBAckID, M.ImagePath, Supplier.MappingCompanyID, AL.ApproveDate
                )

                SELECT *,Count(*) Over() TotalRows FROM F ";
            }
            else if (status == Status.Active)
            {
                sql = AppUser.IsSuperUser ?
                    $@"WITH BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    SBM AS (
                        Select a.BookingID, a.BookingNo, a.BookingDate, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID, a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
	                    ,a.SwatchReceive
                        From {DbNames.EPYSL}..SampleBookingMaster a
                        Left Join IMG ON IMG.BookingID = a.BookingID
	                    Where a.SampleID <> 13 AND a.Proposed=1 And a.BookingDate >= '04/11/2022' And a.ExportOrderID = 0 AND a.SwatchAttached=1 AND a.SwatchReceive=0 AND a.IsCancel = 0
                    ),"
                    :
                    $@"With BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    BT As (
                        Select CategoryTeamID
                        From {DbNames.EPYSL}..EmployeeAssignContactTeam
                        Where EmployeeCode = {AppUser.EmployeeCode} AND IsActive = 1
                        Group By CategoryTeamID
                    ), 
                    B As (
                        Select C.ContactID
                        From {DbNames.EPYSL}..ContactAssignTeam C
                        Inner Join BT On BT.CategoryTeamID = C.CategoryTeamID
                        Group By C.ContactID
                    ), 
                    SBM AS (
                        Select a.BookingID, a.BookingNo, a.BookingDate, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID, a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                        ,a.SwatchReceive	                    
                        From {DbNames.EPYSL}..SampleBookingMaster a
                        INNER JOIN B ON B.ContactID = a.BuyerID
                        Left Join IMG ON IMG.BookingID = a.BookingID
	                    Where a.SampleID <> 13 AND a.Proposed=1 And a.BookingDate >= '04/11/2022' And a.ExportOrderID = 0 AND a.SwatchAttached=1 AND a.SwatchReceive=0 AND a.IsCancel = 0  AND a.SampleID <> 13
                    ),";

                sql += $@"
                M AS (
	                 Select SBM.BookingID, SBM.BookingNo, SBM.BookingDate, SBM.SLNo, SBM.StyleNo, SBM.OrderQty, SBM.BuyerID, SBM.BuyerTeamID
		                , SBM.SupplierID,SBM.ExecutionCompanyID,FBC.ItemMasterID,FBC.ConsumptionID,FBC.SubGroupID,SBM.Remarks,SBM.SeasonID, SBM.AddedBy BookingBy, SBM.ImagePath
	                From SBM
	                Inner Join {DbNames.EPYSL}..SampleType ST On SBM.SampleID = ST.SampleTypeID
					LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBM.BookingID
					LEFT JOIN FBookingAcknowledge FBA On FBA.BookingID = SBM.BookingID
                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingID = FBA.BookingID
                    Where ST.DisplayCode <> 'LR' AND (FBA.BookingID IS NULL OR SBM.SwatchReceive = 0)
                )
                , MF AS (
                    SELECT M.BookingID, M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty, M.BuyerID, M.BuyerTeamID
		                , M.SupplierID,M.ExecutionCompanyID
                    FROM M
	                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = M.BookingID
                    WHERE FBC.BookingID IS NULL
                ),
                AppList AS
                (
	                SELECT BIG.BookingID, BIG.IsApproved, ApproveDate = case when S1.DateUpdated is not null then S1.DateUpdated else S1.DateAdded end
	                FROM {DbNames.EPYSL}..SampleBookingItemGroup BIG
	                INNER JOIN M ON M.BookingID = BIG.BookingID
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster S1 ON S1.BookingID = M.BookingID
	                WHERE BIG.IsApproved = 1
	                GROUP BY BIG.BookingID, BIG.IsApproved, S1.DateUpdated,S1.DateAdded
                ),
                F AS (
	                SELECT M.BookingID,M.ItemMasterID,M.ConsumptionID,M.SubGroupID, M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty BookingQty, 
                    M.BuyerID, M.BuyerTeamID, M.SupplierID, M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.Remarks, 
                    Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, 
                    M.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, AL.ApproveDate
	                FROM M
	                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
	                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
	                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                    Inner Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                    LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID
                    LEFT JOIN AppList AL ON AL.BookingID = M.BookingID
                )

                SELECT *,Count(*) Over() TotalRows FROM F";
            }
            else if (status == Status.UnAcknowledge)
            {
                if (isBDS == 3)
                {
                    queryConceptJoin = " LEFT JOIN FCM ON FCM.BookingID = FBC.BookingID ";
                }

                sql = AppUser.IsSuperUser ?
                    $@"WITH BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    LEFT Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    {queryProjConcept}
                    SBM AS (
                        SELECT FBC.FBAckID,	FBC.BookingID,FBC.BookingNo,FBC.BookingDate,FBC.SLNo,
                        FBC.StyleNo,FBC.BookingQty,FBC.BuyerID,FBC.BuyerTeamID,FBC.SupplierID,FBC.ExecutionCompanyID, 
                        FBC.UnAcknowledgeDate, BM.AddedBy BookingBy,
                        LU.Name UnAckByName,
                        ISNULL(IMG.ImagePath,'') ImagePath
                        FROM FBookingAcknowledge FBC
                        {queryConceptJoin}
                        LEFT Join {DbNames.EPYSL}..SampleBookingMaster BM On BM.BookingID = FBC.BookingID
                        LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                        Left Join IMG ON IMG.BookingID = BM.BookingID
                        Where BM.SampleID <> 13 AND FBC.IsUnAcknowledge=1
                    ),"
                    :
                    $@"With BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    LEFT Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    BT As (
                        Select CategoryTeamID
                        From {DbNames.EPYSL}..EmployeeAssignContactTeam
                        Where EmployeeCode = {AppUser.EmployeeCode} AND IsActive = 1
                        Group By CategoryTeamID
                    ), 
                    B As (
                            Select C.ContactID
                            From {DbNames.EPYSL}..ContactAssignTeam C
                            LEFT Join BT On BT.CategoryTeamID = C.CategoryTeamID
                            Group By C.ContactID
                    ), 
                    {queryProjConcept}
                    SBM AS (
                        SELECT FBC.FBAckID,	FBC.BookingID,FBC.BookingNo,FBC.BookingDate,FBC.SLNo,
                        FBC.StyleNo,FBC.BookingQty,FBC.BuyerID,FBC.BuyerTeamID,FBC.SupplierID,FBC.ExecutionCompanyID, 
                        FBC.UnAcknowledgeDate, BM.AddedBy BookingBy,
                        LU.Name UnAckByName,
                        ISNULL(IMG.ImagePath,'') ImagePath
                        FROM FBookingAcknowledge FBC
                        {queryConceptJoin}
                        LEFT Join {DbNames.EPYSL}..SampleBookingMaster BM On BM.BookingID = FBC.BookingID
                        LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                        Left Join IMG ON IMG.BookingID = BM.BookingID
                        LEFT JOIN B ON B.ContactID = FBC.BuyerID
                        Where BM.SampleID <> 13 AND FBC.IsUnAcknowledge=1
                    ),";

                sql += $@"
                AppList AS
                (
	                SELECT BIG.BookingID, BIG.IsApproved, ApproveDate = case when S1.DateUpdated is not null then S1.DateUpdated else S1.DateAdded end
	                FROM {DbNames.EPYSL}..SampleBookingItemGroup BIG
	                LEFT JOIN SBM M ON M.BookingID = BIG.BookingID
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster S1 ON S1.BookingID = M.BookingID
	                WHERE BIG.IsApproved = 1
	                GROUP BY BIG.BookingID, BIG.IsApproved, S1.DateUpdated,S1.DateAdded
                ),
                F AS (
                    SELECT SBM.FBAckID, SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleNo,SBM.BookingQty,
                    SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExecutionCompanyID, SBM.UnAcknowledgeDate,
                    SBM.UnAckByName, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, SBM.BookingBy, 
                    SBM.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,AL.ApproveDate
                    FROM SBM
                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = SBM.BuyerID
				    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = SBM.BuyerTeamID
				    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = SBM.ExecutionCompanyID
                    LEFT Join {DbNames.EPYSL}..Contacts Supplier On SBM.SupplierID = Supplier.ContactID
                    LEFT JOIN AppList AL ON AL.BookingID = SBM.BookingID
                )
                SELECT * INTO #TempData{tempGuid} FROM F
				SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";

                isUsedTemp = true;
            }
            else if (status == Status.Approved)
            {
                sql = AppUser.IsSuperUser ?
                  $@"WITH BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ),
                    {queryProjConcept}
                    SBM AS (
                        SELECT FBC.FBAckID,	FBC.BookingID,FBC.BookingNo,FBC.BookingDate,FBC.SLNo,FBC.StyleNo,FBC.BookingQty,FBC.BuyerID,FBC.BuyerTeamID,FBC.SupplierID,FBC.ExecutionCompanyID, SBM.AddedBy BookingBy, ISNULL(IMG.ImagePath,'') ImagePath
                        FROM FBookingAcknowledge FBC
                        {queryConceptJoin}
                        Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                        Left Join IMG ON IMG.BookingID = SBM.BookingID
                        where SBM.SampleID <> 13 AND FBC.IsUnAcknowledge !='1'
                    ),"
                  :
                  $@"With BIMG As(
	                    Select BookingID, Min(ChildImgID) ChildImgID
	                    From {DbNames.EPYSL}..SampleBookingChildImage Group By BookingID
                    ), 
                    IMG As(
	                    Select I.BookingID, I.ImagePath
	                    From BIMG
	                    Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                    ), 
                    BT As (
                        Select CategoryTeamID
                        From {DbNames.EPYSL}..EmployeeAssignContactTeam
                        Where EmployeeCode = {AppUser.EmployeeCode} AND IsActive = 1
                        Group By CategoryTeamID
                    ), 
                    B As (
                        Select C.ContactID
                        From {DbNames.EPYSL}..ContactAssignTeam C
                        Inner Join BT On BT.CategoryTeamID = C.CategoryTeamID
                        Group By C.ContactID
                    ), 
                    {queryProjConcept}
                    SBM AS (
                        SELECT FBC.FBAckID,	FBC.BookingID,FBC.BookingNo,FBC.BookingDate,FBC.SLNo,FBC.StyleNo,FBC.BookingQty,FBC.BuyerID,FBC.BuyerTeamID,FBC.SupplierID,FBC.ExecutionCompanyID, SBM.AddedBy BookingBy, ISNULL(IMG.ImagePath,'') ImagePath
                        FROM FBookingAcknowledge FBC
                        {queryConceptJoin}
                        Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                        Left Join IMG ON IMG.BookingID = SBM.BookingID
                        INNER JOIN B ON B.ContactID = FBC.BuyerID
                        where SBM.SampleID <> 13 AND FBC.IsUnAcknowledge != '1'
                    ),";

                sql += $@"
                AppList AS
                (
	                SELECT BIG.BookingID, BIG.IsApproved, ApproveDate =  case when S1.DateUpdated is not null then S1.DateUpdated else S1.DateAdded end
	                FROM {DbNames.EPYSL}..SampleBookingItemGroup BIG
	                INNER JOIN SBM M ON M.BookingID = BIG.BookingID
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster S1 ON S1.BookingID = M.BookingID
	                WHERE BIG.IsApproved = 1
	                GROUP BY BIG.BookingID, BIG.IsApproved, S1.DateUpdated,S1.DateAdded
                ),
                F AS (
                    SELECT SBM.FBAckID, SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleNo,SBM.BookingQty,
                    SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExecutionCompanyID,
                    CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, SBM.BookingBy, 
                    SBM.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,AL.ApproveDate
                    FROM SBM
                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = SBM.BuyerID
				    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = SBM.BuyerTeamID
				    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = SBM.ExecutionCompanyID
                    Inner Join {DbNames.EPYSL}..Contacts Supplier On SBM.SupplierID = Supplier.ContactID
                    LEFT JOIN AppList AL ON AL.BookingID = SBM.BookingID
                )
				SELECT * INTO #TempData{tempGuid} FROM F
				SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";

                isUsedTemp = true;
            }
            else if (status == Status.Others)
            {
                orderBy = "";
                string buyerTeamConQuery = "";
                string buyerTeamJoin = "";
                if (!AppUser.IsSuperUser)
                {
                    buyerTeamConQuery = $@" B As (
                            Select C.ContactID
                            From {DbNames.EPYSL}..EmployeeAssignContactTeam A
                            Inner Join {DbNames.EPYSL}..ContactAssignTeam C On C.CategoryTeamID = A.CategoryTeamID
                            Where A.EmployeeCode = {AppUser.EmployeeCode} AND A.IsActive = 1
                            Group By C.ContactID
                        ), ";
                    buyerTeamJoin = $@"  INNER JOIN B ON B.ContactID = FBC.BuyerID ";
                }

                sql = $@";With SIG As
                        (
                            Select SIG.BookingID, Approved = Min(convert(int,SIG.IsApproved))
                            from {DbNames.EPYSL}..SampleBookingItemGroup SIG
                            Group By BookingID
                        ), 
                        BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),
                        {buyerTeamConQuery}
                        {queryProjConcept}
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            INNER JOIN SIG ON SIG.BookingID = SBM.BookingID
                            {buyerTeamJoin}
                            {queryConceptJoin}
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            where SBM.SampleID <> 13 AND SBM.ExportOrderID = 0 AND ISNULL(SIG.Approved,0) = 0 AND SBM.RevisionNo <> FBC.PreRevisionNo
                        ),
                        M AS
	                    (
		                    SELECT FBAckID = ISNULL(FBA.FBAckID,0), SBM.BookingID, SBM.BookingNo, SBM.BookingDate, SBM.SLNo, SBM.StyleNo, BookingQty = SBM.OrderQty, SBM.BuyerID, SBM.BuyerTeamID,
                            SBM.SupplierID, SBM.ExecutionCompanyID, SBM.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
		                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
		                    LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
		                    LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = SBM.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = SBM.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = SBM.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = SBM.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
		                    WHERE SBM.Proposed = 0 AND FBA.FBAckID IS NULL
	                    ),
	                    FinalList AS
	                    (
		                    SELECT * FROM F
		                    UNION
		                    SELECT * FROM M
	                    ),
                        AppList AS
                        (
	                        SELECT BIG.BookingID, BIG.IsApproved, ApproveDate = case when S1.DateUpdated is not null then S1.DateUpdated else S1.DateAdded end
	                        FROM {DbNames.EPYSL}..SampleBookingItemGroup BIG
	                        INNER JOIN FinalList F ON F.BookingID = BIG.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster S1 ON S1.BookingID = F.BookingID
	                        WHERE BIG.IsApproved = 1
	                        GROUP BY BIG.BookingID, BIG.IsApproved, S1.DateUpdated,S1.DateAdded
                        ),
                        R AS (
		                    SELECT R_No_New = Row_Number() Over(Order by FL.BookingID Desc), FL.*,AL.ApproveDate , Count(*) Over() TotalRows
		                    FROM FinalList FL
                            LEFT JOIN AppList AL ON AL.BookingID = FL.BookingID
                            {paginationInfo.FilterBy}
	                    )
                         SELECT * FROM R WHERE {paginationInfo.PageByNew}";
            }
            else
            {

                sFlag = "Y";
                orderBy = "";
                string buyerTeamConQuery = "";
                string buyerTeamJoin = "";
                if (!AppUser.IsSuperUser)
                {
                    buyerTeamConQuery = $@" B As (
                            Select C.ContactID
                            From {DbNames.EPYSL}..EmployeeAssignContactTeam A
                            Inner Join {DbNames.EPYSL}..ContactAssignTeam C On C.CategoryTeamID = A.CategoryTeamID
                            Where A.EmployeeCode = {AppUser.EmployeeCode} AND A.IsActive = 1
                            Group By C.ContactID
                        ), ";
                    buyerTeamJoin = $@"  INNER JOIN B ON B.ContactID = FBC.BuyerID ";
                }

                sql = $@"With BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),
                        {buyerTeamConQuery}
                        {queryProjConcept}
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            {buyerTeamJoin}
                            {queryConceptJoin}
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            where SBM.SampleID <> 13 AND SBM.ExportOrderID = 0 And FBC.IsUnAcknowledge != 1 AND SBM.RevisionNo = FBC.PreRevisionNo
                        ),
                        AppList AS
                        (
	                        SELECT BIG.BookingID, BIG.IsApproved, ApproveDate =  case when S1.DateUpdated is not null then S1.DateUpdated else S1.DateAdded end
	                        FROM {DbNames.EPYSL}..SampleBookingItemGroup BIG
	                        INNER JOIN F ON F.BookingID = BIG.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster S1 ON S1.BookingID = F.BookingID
	                        WHERE BIG.IsApproved = 1
	                        GROUP BY BIG.BookingID, BIG.IsApproved, S1.DateUpdated,S1.DateAdded
                        ),
                        R AS (
	                        SELECT R_No_New = Row_Number() Over(Order by F.BookingID Desc), F.*,AL.ApproveDate, Count(*) Over() TotalRows
	                        FROM F  
	                        LEFT JOIN AppList AL ON AL.BookingID = F.BookingID
                            --WHERE BookingNo LIKE '%PPS-2302446-EFL%'
                            {paginationInfo.FilterBy}
                        )
                        SELECT * FROM R WHERE {paginationInfo.PageByNew}";
            }
            if (status != Status.Completed && status != Status.Others && sFlag != "Y")
            {
                sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";
            }

            if (isUsedTemp)
            {
                sql += $@" DROP TABLE #TempData{tempGuid}";
            }

            return await _service.GetDataAsync<FBookingAcknowledge>(sql);
        }
        public async Task<List<FBookingAcknowledge>> GetBulkPagedAsync(Status status, PaginationInfo paginationInfo, LoginUser AppUser, int paramTypeId)
        {
            bool isNeedImage = true;
            bool isDisplayAgeing = false;
            string tempGuid = CommonFunction.GetNewGuid();
            string revisionCond = "";
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By BookingNo Desc" : paginationInfo.OrderBy;

            string sql = "";
            if ((ParamTypeId)paramTypeId == ParamTypeId.YarnBookingAcknowledge)
            {
                switch (status)
                {
                    case Status.Revise:
                        sql = $@"WITH CutoffDate As
						(
						SELECT ETV.ValueID, ETV.ValueName
						FROM {DbNames.EPYSL}..EntityType ET
						INNER JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.EntityTypeID = ET.EntityTypeID
						WHERE ET.EntityTypeName = 'YarnAllocationCutOffDate'
						),
						OEC As(
	                        Select OECL.OrderBankMasterID, OECL.ExportOrderID, OECL.EventDate 
                            FROM {DbNames.EPYSL}..OrderEventCalander OECL 
	                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                        Where TE.EventDisplayName='Yarn booking'
							GROUP BY OECL.OrderBankMasterID,OECL.ExportOrderID, OECL.EventDate
	                    ),
						OBP As(
	                        Select OBP.OrderBankMasterID,OBP.CalendarDays,OBP.EDD 
                            FROM {DbNames.EPYSL}..OrderBankPO OBP 
							INNER JOIN OEC ON OEC.OrderBankMasterID = OBP.OrderBankMasterID
							GROUP BY OBP.OrderBankMasterID, OBP.CalendarDays, OBP.EDD
	                    ),
                        FBAWOAdd AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,							

	                        case when BM.RevisionNo>0 then MAX(BM.RevisionReason) else '' end RevisionReason,
	                        case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
	                        case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
	                        --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason='',
                            YarnRevisionNo = MAX(YB.RevisionNo), YarnRevisedDate = MAX(YB.RevisedDate)
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN OEC ON OEC.ExportOrderID = a.ExportOrderID
							LEFT JOIN OBP ON OBP.OrderBankMasterID = OEC.OrderBankMasterID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            INNER JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                        --WHERE a.IsApprovedByPMC = 1 AND (YB.IsRevised = 1 OR YB.PreProcessRevNo <> a.RevisionNo) 
                            WHERE a.IsApprovedByPMC = 1 AND (YB.PreProcessRevNo <> a.RevisionNo OR a.IsValidForYarnBookingAcknowledge = 1) 
							--AND YB.RevisionNo > 0
							AND YB.Acknowledge = 1
                            AND a.DateAdded >= '{_startingDate}'
                            AND YB.YBookingDate >=(Select ValueName From CutoffDate)

	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
						FBAAdd AS
                        (
	                        
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,							

	                        case when BM.RevisionNo>0 then MAX(BM.RevisionReason) else '' end RevisionReason,
	                        case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
	                        case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
	                        --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason='',
                            YarnRevisionNo = MAX(YB.RevisionNo), YarnRevisedDate = MAX(YB.RevisedDate)
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN OEC ON OEC.ExportOrderID = a.ExportOrderID
							LEFT JOIN OBP ON OBP.OrderBankMasterID = OEC.OrderBankMasterID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            INNER JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                        --WHERE a.IsApprovedByPMC = 1 AND (YB.IsRevised = 1 OR YB.PreProcessRevNo <> a.RevisionNo) 
                            WHERE YB.IsAddition = 1 AND a.ExportOrderID > 0 AND 
							YB.IsOperationHeadApprove = 1 --AND (YB.PreProcessRevNo <> a.RevisionNo OR a.IsValidForYarnBookingAcknowledge = 1) 
							--AND YB.RevisionNo > 0
							AND YB.Acknowledge = 0 AND YB.UnAcknowledge = 0
                            AND YB.AcknowledgeCount > 0
                            AND a.DateAdded >= '{_startingDate}'
                            AND YB.YBookingDate >=(Select ValueName From CutoffDate)

	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
						FBA AS
						(
						Select * FROM FBAWOAdd
						UNION
						Select * FROM FBAAdd
						),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName,
                            FabricBookingType = CASE WHEN FBA.IsSample = 1 THEN 'SMS' ELSE 'Bulk' END
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT * INTO #TempData{tempGuid} FROM F
					    SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";
                        break;
                    case Status.Revise2:
                        sql = $@"WITH FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,							

	                        case when BM.RevisionNo>0 then MAX(BM.RevisionReason) else '' end RevisionReason,
	                        case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
	                        case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
	                        --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason=''
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        Outer Apply
	                        (
	                            Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
	                            INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                            Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
	                        )OEC
	                        Outer Apply 
	                        (
	                            Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
	                            ORDER BY EDD desc 
	                        )OBP
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            INNER JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                        WHERE a.DateAdded >= '{_startingDate}'
                            AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 AND a.IsInternalRevise = 0
                            AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 1 AND a.IsApprovedByPMC = 1
                            AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                            AND a.ExportOrderID > 0
	                        AND a.PreRevisionNo <> FBA.RevisionNo
                            
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT * INTO #TempData{tempGuid} FROM F
					    SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";
                        break;
                    case Status.Acknowledge:
                        sql = $@"WITH CutoffDate As
						(
						SELECT ETV.ValueID, ETV.ValueName
						FROM {DbNames.EPYSL}..EntityType ET
						INNER JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.EntityTypeID = ET.EntityTypeID
						WHERE ET.EntityTypeName = 'YarnAllocationCutOffDate'
						),
						OEC As(
	                        Select OECL.OrderBankMasterID, OECL.ExportOrderID, OECL.EventDate 
                            FROM {DbNames.EPYSL}..OrderEventCalander OECL 
	                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                        Where TE.EventDisplayName='Yarn booking'
							GROUP BY OECL.OrderBankMasterID,OECL.ExportOrderID, OECL.EventDate
	                    ),
						OBP As(
	                        Select OBP.OrderBankMasterID,OBP.CalendarDays,OBP.EDD 
                            FROM {DbNames.EPYSL}..OrderBankPO OBP 
							INNER JOIN OEC ON OEC.OrderBankMasterID = OBP.OrderBankMasterID
							GROUP BY OBP.OrderBankMasterID, OBP.CalendarDays, OBP.EDD
	                    ),
                        FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,							

	                        case when BM.RevisionNo>0 then MAX(BM.RevisionReason) else '' end RevisionReason,
	                        case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
	                        case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
	                        --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason='',
                            YarnAcknowledgeDate = MIN(YB.AcknowledgeDate),
	                        YarnAcknowledgeBy = ISNULL(E.EmployeeName,'')
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN OEC ON OEC.ExportOrderID = a.ExportOrderID
							LEFT JOIN OBP ON OBP.OrderBankMasterID = OEC.OrderBankMasterID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            INNER JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = YB.AcknowledgeBy
	                        LEFT JOIN {DbNames.EPYSL}..Employee E ON E.EmployeeCode = LU.EmployeeCode
	                        WHERE a.DateAdded >= '{_startingDate}' 
                            --AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 AND a.IsInternalRevise = 0
                            --AND a.ExportOrderID > 0
	                        AND YB.Acknowledge = 1
                            --AND a.RevisionNo = YB.PreProcessRevNo
                            AND YB.YBookingDate >=(Select ValueName From CutoffDate)

	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised, ISNULL(E.EmployeeName,''),
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName,
                            FabricBookingType = CASE WHEN FBA.IsSample = 1 THEN 'SMS' ELSE 'Bulk' END
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT * INTO #TempData{tempGuid} FROM F
					    SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";
                        break;
                    case Status.UnAcknowledge:
                        sql = $@"WITH CutoffDate As
						(
						SELECT ETV.ValueID, ETV.ValueName
						FROM {DbNames.EPYSL}..EntityType ET
						INNER JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.EntityTypeID = ET.EntityTypeID
						WHERE ET.EntityTypeName = 'YarnAllocationCutOffDate'
						),
						OEC As(
	                        Select OECL.OrderBankMasterID, OECL.ExportOrderID, OECL.EventDate 
                            FROM {DbNames.EPYSL}..OrderEventCalander OECL 
	                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                        Where TE.EventDisplayName='Yarn booking'
							GROUP BY OECL.OrderBankMasterID,OECL.ExportOrderID, OECL.EventDate
	                    ),
						OBP As(
	                        Select OBP.OrderBankMasterID,OBP.CalendarDays,OBP.EDD 
                            FROM {DbNames.EPYSL}..OrderBankPO OBP 
							INNER JOIN OEC ON OEC.OrderBankMasterID = OBP.OrderBankMasterID
							GROUP BY OBP.OrderBankMasterID, OBP.CalendarDays, OBP.EDD
	                    ),
                        FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,							

	                        case when BM.RevisionNo>0 then MAX(BM.RevisionReason) else '' end RevisionReason,
	                        case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
	                        case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
	                        --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason = YB.UnAckReason,
                            YarnUnAcknowledgeDate = MIN(YB.UnAcknowledgeDate),
		                    YarnUnAcknowledgeBy = ISNULL(E.EmployeeName,'')
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN OEC ON OEC.ExportOrderID = a.ExportOrderID
							LEFT JOIN OBP ON OBP.OrderBankMasterID = OEC.OrderBankMasterID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            INNER JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = YB.UnAcknowledgeBy
		                    LEFT JOIN {DbNames.EPYSL}..Employee E ON E.EmployeeCode = LU.EmployeeCode
	                        WHERE a.DateAdded >= '{_startingDate}' 
                            AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 AND a.IsInternalRevise = 0
                            AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 1 AND a.IsApprovedByPMC = 1
                            AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                            AND a.ExportOrderID > 0
	                        AND a.PreRevisionNo = FBA.RevisionNo
	                        AND YB.UnAcknowledge = 1
                            AND YB.YBookingDate >=(Select ValueName From CutoffDate)
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised, YB.UnAckReason,ISNULL(E.EmployeeName,''),
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName,
                            FabricBookingType = CASE WHEN FBA.IsSample = 1 THEN 'SMS' ELSE 'Bulk' END
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT * INTO #TempData{tempGuid} FROM F
					    SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";
                        break;
                    default: //Pending
                        sql = $@"WITH CutoffDate As
						(
						SELECT ETV.ValueID, ETV.ValueName
						FROM {DbNames.EPYSL}..EntityType ET
						INNER JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.EntityTypeID = ET.EntityTypeID
						WHERE ET.EntityTypeName = 'YarnAllocationCutOffDate'
						),
						OEC As(
	                        Select OECL.OrderBankMasterID, OECL.ExportOrderID, OECL.EventDate 
                            FROM {DbNames.EPYSL}..OrderEventCalander OECL 
	                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                        Where TE.EventDisplayName='Yarn booking'
							GROUP BY OECL.OrderBankMasterID,OECL.ExportOrderID, OECL.EventDate
	                    ),
						OBP As(
	                        Select OBP.OrderBankMasterID,OBP.CalendarDays,OBP.EDD 
                            FROM {DbNames.EPYSL}..OrderBankPO OBP 
							INNER JOIN OEC ON OEC.OrderBankMasterID = OBP.OrderBankMasterID
							GROUP BY OBP.OrderBankMasterID, OBP.CalendarDays, OBP.EDD
	                    ),
                        FBAWOAdd AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,							

	                        case when BM.RevisionNo>0 then MAX(BM.RevisionReason) else '' end RevisionReason,
	                        case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
	                        case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
	                        --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason=''
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
							LEFT JOIN OEC ON OEC.ExportOrderID = a.ExportOrderID
							LEFT JOIN OBP ON OBP.OrderBankMasterID = OEC.OrderBankMasterID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            INNER JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                        WHERE --a.IsUnAcknowledge = 0 
							YB.IsAddition=0
							AND a.IsInternalRevise = 0
							AND a.IsApprovedByPMC = 1
                            AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                            AND a.ExportOrderID > 0
	                        --AND a.PreRevisionNo = FBA.RevisionNo
                            --AND (
							--ISNULL(YB.PreProcessRevNo,0) = ISNULL(a.RevisionNo,0) 
							--OR 
							--((ISNULL(YB.PreProcessRevNo,0) <> ISNULL(a.RevisionNo,0) OR a.IsValidForYarnBookingAcknowledge = 1))
							--)
	                        AND YB.Acknowledge = 0 AND YB.UnAcknowledge = 0
                            AND YB.YBookingDate >=(Select ValueName From CutoffDate)

	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised, 
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
						FBAAdd AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,							

	                        case when BM.RevisionNo>0 then MAX(BM.RevisionReason) else '' end RevisionReason,
	                        case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
	                        case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
	                        --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason=''
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
							LEFT JOIN OEC ON OEC.ExportOrderID = a.ExportOrderID
							LEFT JOIN OBP ON OBP.OrderBankMasterID = OEC.OrderBankMasterID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            INNER JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                        WHERE --a.IsUnAcknowledge = 0 
							YB.IsAddition=1
							AND a.IsInternalRevise = 0
							AND YB.IsOperationHeadApprove=1
                            AND a.ExportOrderID > 0
	                        --AND a.PreRevisionNo = FBA.RevisionNo
                            --AND (
							--ISNULL(YB.PreProcessRevNo,0) = ISNULL(a.RevisionNo,0) 
							--OR 
							--((ISNULL(YB.PreProcessRevNo,0) <> ISNULL(a.RevisionNo,0) OR a.IsValidForYarnBookingAcknowledge = 1))
							--)
	                        AND YB.Acknowledge = 0 AND YB.UnAcknowledge = 0
							AND YB.RevisionNo = 0 AND YB.AcknowledgeCount = 0
                            AND YB.YBookingDate >=(Select ValueName From CutoffDate)

	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised, 
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
						FBA AS
						(
						Select * FROM FBAWOAdd 
						UNION 
						Select * FROM FBAAdd
						),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName,
                            FabricBookingType = CASE WHEN FBA.IsSample = 1 THEN 'SMS' ELSE 'Bulk' END
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT * INTO #TempData{tempGuid} FROM F
					    SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";
                        break;
                }
            }
            else
            {
                switch (status)
                {
                    case Status.Draft:
                        sql = $@"WITH 
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                        FBAC AS
                        (
                            SELECT FBA1.BookingNo, FBA1.ExportOrderID, MktAcknowledgeDate = MIN(FBAC.AcknowledgeDate), FBAcknowledgeDate = MIN(FBA.AcknowledgeDate)
	                        FROM FBookingAcknowledgeChild FBAC
	                        INNER JOIN FBookingAcknowledge FBA1 ON FBA1.FBAckID = FBAC.AcknowledgeID
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = FBA1.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA1.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA1.BookingID
	                        WHERE (BM.BookingDate >= '{_startingDate}' OR SBM.BookingDate >= '{_startingDate}') AND ISNULL(SendToMktAck,0) > 0 AND ISNULL(IsMktAck,0) = 0 AND ISNULL(IsMktUnAck,0) = 0
	                        AND FBA.RevisionNo = FBA1.PreRevisionNo 
	                        GROUP BY FBA1.BookingNo, FBA1.ExportOrderID
                        ),
                        FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample,
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID,YB.YBookingNo,
	                        IsRevised = CASE WHEN a.PreRevisionNo <> FBA.RevisionNo THEN 1 ELSE 0 END,
	                        StatusText = CASE WHEN a.PreRevisionNo <> FBA.RevisionNo THEN 'Revision Pending' ELSE '' END,
	                        MBookingRevNo = CASE WHEN ISNULL(a.IsSample,0) = 0 THEN ISNULL(BM.RevisionNo,0) ELSE ISNULL(SBM.RevisionNo,0) END,
	                        FabricBookingAckRevNo = FBA.RevisionNo,
	                        
	                        --BookingStatus = CASE WHEN a.IsSample = 0 AND BM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),BM.RevisionNo) 
	                        --				     WHEN a.IsSample = 1 AND SBM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),SBM.RevisionNo)
	                        --					 ELSE '' END,

	                        BookingStatus = CASE WHEN a.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),a.RevisionNo) 
							                        ELSE '' END,

	                        RevisionReason = '',
                            IsMktRevisionPending = CASE WHEN ISNULL(FBAC.BookingNo,'') = '' THEN 0 ELSE 1 END,
                            DateUpdated = MAX(a.DateUpdated),
                            MktAcknowledgeDate = MAX(FBAC.MktAcknowledgeDate),
	                        FBAcknowledgeDate = MAX(FBAC.FBAcknowledgeDate)

	                        FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                            LEFT JOIN FBAC ON FBAC.ExportOrderID = a.ExportOrderID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                        WHERE (BM.BookingDate >= '{_startingDate}' OR SBM.BookingDate >= '{_startingDate}')
                            AND YB.YBookingID IS NOT NULL
	                        AND	a.IsKnittingComplete = 0 
	                        AND a.ExportOrderID > 0
	                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                            --AND a.IsUnAcknowledge = 0
	                        AND PB.ExportOrderID IS NULL
	                        GROUP BY a.BookingNo, a.ExportOrderID,YB.YBookingNo,a.BuyerID,a.BuyerTeamID, a.IsSample, a.PreRevisionNo, FBA.RevisionNo,
	                        ISNULL(BM.RevisionNo,0), ISNULL(SBM.RevisionNo,0),BM.RevisionNo,SBM.RevisionNo,a.RevisionNo,CASE WHEN ISNULL(FBAC.BookingNo,'') = '' THEN 0 ELSE 1 END
                        ),
                        F AS(
	                        SELECT FBA.BookingNo, FBA.BookingDate, FBA.IsSample,
	                        FBA.ExportOrderID, FBA.BuyerID, FBA.BuyerTeamID,FBA.YBookingNo,
	                        FBA.IsRevised,
	                        FBA.StatusText,
	                        FBA.MBookingRevNo,
	                        FBA.FabricBookingAckRevNo,
	                        BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                        IsInvalidBooking = CASE WHEN FBA.MBookingRevNo <> FBA.FabricBookingAckRevNo THEN 1 ELSE 0 END,
	                        FBA.BookingStatus,FBA.RevisionReason, IsMktRevisionPending = MAX(FBA.IsMktRevisionPending),
                            FBA.DateUpdated, FBA.MktAcknowledgeDate, FBA.FBAcknowledgeDate
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        GROUP BY FBA.BookingNo, FBA.BookingDate, FBA.IsSample,
	                        FBA.ExportOrderID, FBA.BuyerID, FBA.BuyerTeamID,FBA.YBookingNo,
	                        FBA.IsRevised,FBA.StatusText,FBA.MBookingRevNo,FBA.FabricBookingAckRevNo,CTO.ShortName, CCT.TeamName,FBA.BookingStatus,FBA.RevisionReason,
                            FBA.DateUpdated,FBA.MktAcknowledgeDate, FBA.FBAcknowledgeDate
                        )
                        SELECT * INTO #TempData{tempGuid} FROM F
					    SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By MktAcknowledgeDate DESC,FBAcknowledgeDate Desc, BookingNo DESC" : paginationInfo.OrderBy;
                        isNeedImage = true;

                        break;
                    case Status.Revise:
                        sql = $@"WITH FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample,
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID
	                        FROM FBookingAcknowledge a
                            INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}'
                            YB.YBookingID IS NOT NULL
		                    AND	a.IsKnittingComplete = 0
                            AND a.ExportOrderID > 0
                            AND a.PreRevisionNo <> FBA.RevisionNo
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
                        )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case Status.Active:
                        sql = $@"WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,


						--BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
						--				     WHEN a.IsSample = 0 AND BM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),BM.RevisionNo) 
						--					 WHEN a.IsSample = 1 AND SBM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),SBM.RevisionNo)
						--					 ELSE '' END,

                        
						BookingStatus = CASE WHEN a.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),a.RevisionNo) 
											 ELSE '' END,

						RevisionReason = '',

	                    YarnBookingStatus = case when a.RevisionNo >0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end,
	                    YarnBookingRevisionDate = case when a.RevisionNo >0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end,

	                    RejectReason = case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end,
                        InternalRivisionReason=a.RivisionReason,
                        DateUpdated = MAX(a.DateUpdated)

                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        --AND a.IsUnAcknowledge = 0 
                        AND a.IsKnittingComplete = 1 
                        AND a.IsApprovedByAllowance = 0 AND a.IsCheckByKnittingHead = 0 AND a.IsApprovedByProdHead = 0 AND a.IsApprovedByPMC = 0
                        AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
	                    BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,
	                    a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance, 
	                    ISNULL(SBM.BookingID,0), Convert(varchar(100),SBM.RevisionNo),SBM.RevisionNo,a.RivisionReason,a.RevisionNo,YB.IsRevised
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    ),
                    Final AS(
	                    Select a.*
	                    FROM F a
                    )
                    SELECT *,Count(*) Over() TotalRows FROM Final";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By DateUpdated Desc" : paginationInfo.OrderBy;
                        isNeedImage = true;
                        break;
                    case Status.APPROVED_Allowance:
                        sql = $@"
                    WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate),  
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
						Reason = CASE WHEN a.IsUnAcknowledge = 1 THEN a.UnAcknowledgeReason
				                WHEN a.IsRejectByPMC = 1 THEN a.RejectReasonPMC
					                WHEN a.IsRejectByProdHead = 1 THEN a.RejectReasonProdHead
					                WHEN a.IsRejectByKnittingHead = 1 THEN a.RejectReasonKnittingHead
					                WHEN a.IsRejectByAllowance = 1 THEN a.RejectReasonAllowance
					                ELSE '' END,

                        --BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
						--				     WHEN a.IsSample = 0 AND BM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),BM.RevisionNo) 
						--					 WHEN a.IsSample = 1 AND SBM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),SBM.RevisionNo)
						--					 ELSE '' END,

                        
						BookingStatus = CASE WHEN a.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),a.RevisionNo) 
											 ELSE '' END,

						RevisionReason = '',
                        ApprovedDateAllowance = MAX(a.ApprovedDateAllowance),

					IsSample = CASE WHEN ISNULL(SBM.BookingID,0) > 0 THEN 1 ELSE 0 END,
					case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
					case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
					case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
					OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
                    MIN(FBA.AcknowledgeDate) FBAcknowledgeDate,
				    case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
					case when a.IsRejectByPMC=1 then a.RejectDatePMC else a.ApprovedDatePMC end ApproveRejectDatePMC,
					case when a.IsRejectByPMC=1 then LURPMCE.EmployeeName else LUAPMCE.EmployeeName end PMCApprovedRejectedBy
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
					Outer Apply
					(
					    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					    ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    --AND a.IsUnAcknowledge = 0 
                    AND a.IsKnittingComplete = 1 
					--AND a.IsUtilizationProposalSend=0 
					AND a.IsUtilizationProposalConfirmed=0
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),a.RevisionNo,
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised, 
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,SBM.RevisionNo,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName, ISNULL(SBM.BookingID,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By ApprovedDateAllowance Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.PendingConfirmation:
                        sql = $@"
                    WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate),  
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
						Reason = CASE WHEN a.IsUnAcknowledge = 1 THEN a.UnAcknowledgeReason
				                WHEN a.IsRejectByPMC = 1 THEN a.RejectReasonPMC
					                WHEN a.IsRejectByProdHead = 1 THEN a.RejectReasonProdHead
					                WHEN a.IsRejectByKnittingHead = 1 THEN a.RejectReasonKnittingHead
					                WHEN a.IsRejectByAllowance = 1 THEN a.RejectReasonAllowance
					                ELSE '' END,

                     --BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
						--				     WHEN a.IsSample = 0 AND BM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),BM.RevisionNo) 
						--					 WHEN a.IsSample = 1 AND SBM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),SBM.RevisionNo)
						--					 ELSE '' END,

                        
						BookingStatus = CASE WHEN a.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),a.RevisionNo) 
											 ELSE '' END,

						RevisionReason = '',
                        UtilizationProposalSendDate = MAX(a.UtilizationProposalSendDate),

					IsSample = CASE WHEN ISNULL(SBM.BookingID,0) > 0 THEN 1 ELSE 0 END,
					case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
					case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
					case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
					OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
                    MIN(FBA.AcknowledgeDate) FBAcknowledgeDate,
				    case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
					case when a.IsRejectByPMC=1 then a.RejectDatePMC else a.ApprovedDatePMC end ApproveRejectDatePMC,
					case when a.IsRejectByPMC=1 then LURPMCE.EmployeeName else LUAPMCE.EmployeeName end PMCApprovedRejectedBy
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
					Outer Apply
					(
					    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					    ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    --AND a.IsUnAcknowledge = 0 
                    AND a.IsKnittingComplete = 1 and a.IsUtilizationProposalConfirmed=0
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),a.RevisionNo,
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised, 
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,SBM.RevisionNo,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName,ISNULL(SBM.BookingID,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By UtilizationProposalSendDate Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.Confirm:
                        sql = $@"
                    WITH
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate),  
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
						Reason = CASE WHEN a.IsUnAcknowledge = 1 THEN a.UnAcknowledgeReason
				                WHEN a.IsRejectByPMC = 1 THEN a.RejectReasonPMC
					                WHEN a.IsRejectByProdHead = 1 THEN a.RejectReasonProdHead
					                WHEN a.IsRejectByKnittingHead = 1 THEN a.RejectReasonKnittingHead
					                WHEN a.IsRejectByAllowance = 1 THEN a.RejectReasonAllowance
					                ELSE '' END,
                    
                    BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' +Convert(varchar(100),MAX(YB.PreProcessRevNo))
                    WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                    CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                    ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,
                    UtilizationProposalConfirmedDate = MAX(a.UtilizationProposalConfirmedDate),

					RevisionReason = '',
					IsSample = CASE WHEN ISNULL(SBM.BookingID,0) > 0 THEN 1 ELSE 0 END,
					case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
					case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
					case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
					OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
                    MIN(FBA.AcknowledgeDate) FBAcknowledgeDate,
				    case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
					case when a.IsRejectByPMC=1 then a.RejectDatePMC else a.ApprovedDatePMC end ApproveRejectDatePMC,
					case when a.IsRejectByPMC=1 then LURPMCE.EmployeeName else LUAPMCE.EmployeeName end PMCApprovedRejectedBy
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
					Outer Apply
					(
					    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					    ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    --AND a.IsUnAcknowledge = 0 
                    AND a.IsKnittingComplete = 1 and a.IsUtilizationProposalConfirmed=1
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised,
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName,ISNULL(SBM.BookingID,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By UtilizationProposalConfirmedDate Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.ProposedForApproval:
                        sql = $@"
                    WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate),  
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
						Reason = CASE WHEN a.IsUnAcknowledge = 1 THEN a.UnAcknowledgeReason
				                WHEN a.IsRejectByPMC = 1 THEN a.RejectReasonPMC
					                WHEN a.IsRejectByProdHead = 1 THEN a.RejectReasonProdHead
					                WHEN a.IsRejectByKnittingHead = 1 THEN a.RejectReasonKnittingHead
					                WHEN a.IsRejectByAllowance = 1 THEN a.RejectReasonAllowance
					                ELSE '' END,
                    
                   --BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
						--				     WHEN a.IsSample = 0 AND BM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),BM.RevisionNo) 
						--					 WHEN a.IsSample = 1 AND SBM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),SBM.RevisionNo)
						--					 ELSE '' END,

                        
						BookingStatus = CASE WHEN a.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),a.RevisionNo) 
											 ELSE '' END,

						RevisionReason = '',
                        UtilizationProposalConfirmedDate = MAX(a.UtilizationProposalConfirmedDate),
                        ApprovedDateAllowance = MAX(a.ApprovedDateAllowance),

					IsSample = CASE WHEN ISNULL(SBM.BookingID,0) > 0 THEN 1 ELSE 0 END,
					case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
					case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
					case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
					OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
                    MIN(FBA.AcknowledgeDate) FBAcknowledgeDate,
				    case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
					case when a.IsRejectByPMC=1 then a.RejectDatePMC else a.ApprovedDatePMC end ApproveRejectDatePMC,
					case when a.IsRejectByPMC=1 then LURPMCE.EmployeeName else LUAPMCE.EmployeeName end PMCApprovedRejectedBy
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
					Outer Apply
					(
					    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					    ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    --AND a.IsUnAcknowledge = 0 
                    AND a.IsKnittingComplete = 1 and a.IsUtilizationProposalConfirmed=1
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0 AND a.IsRejectByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),a.RevisionNo,
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised,
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,SBM.RevisionNo,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName, ISNULL(SBM.BookingID,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By UtilizationProposalConfirmedDate Desc,ApprovedDateAllowance Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.REJECT_Allowance:
                        sql = $@"WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), Reason = a.RejectReasonAllowance,YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
                        RejectDateAllowance = MAX(a.RejectDateAllowance)
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.IsRejectByAllowance = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.RejectReasonAllowance, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By RejectDateAllowance Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.Check:
                        sql = $@"WITH 
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                        FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
                            CheckDateKnittingHead = MAX(a.CheckDateKnittingHead)
                            FROM FBookingAcknowledge a
                            INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                            --AND a.IsUnAcknowledge = 0 
                            AND a.IsKnittingComplete = 1 
                            AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 0 AND a.IsApprovedByPMC = 0
                            AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                            AND a.ExportOrderID > 0
                            AND a.PreRevisionNo = FBA.RevisionNo
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
	                        LEFT JOIN PreBookingAdditionList PBA ON PBA.ExportOrderID = FBA.ExportOrderID
	                        WHERE PBA.ExportOrderID IS NULL
                        )
                        SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By CheckDateKnittingHead Desc" : paginationInfo.OrderBy;

                        isNeedImage = true;


                        break;
                    case Status.CheckReject:
                        sql = $@"WITH
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), Reason = a.RejectReasonKnittingHead,YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
                        RejectDateKnittingHead = MAX(a.RejectDateKnittingHead)
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.IsRejectByKnittingHead = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.RejectReasonKnittingHead, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By RejectDateKnittingHead Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.ApprovedDone:
                        sql = $@"
                        WITH 
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                        FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID), 
	                        BBStatus = 'Approve By Production Head',
	                        RejectReason = '', IsReject = 0,YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                             --BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
						--				     WHEN a.IsSample = 0 AND BM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),BM.RevisionNo) 
						--					 WHEN a.IsSample = 1 AND SBM.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),SBM.RevisionNo)
						--					 ELSE '' END,

                        
						BookingStatus = CASE WHEN a.RevisionNo > 0 then 'Booking Revision No. ' + Convert(varchar(100),a.RevisionNo) 
											 ELSE '' END,

						RevisionReason = a.RivisionReason,

						    YarnBookingStatus = case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end,
						    YarnBookingRevisionDate = case when YB.RevisionNo>0 then Convert(VARCHAR(100),Format(YB.RevisedDate,'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = a.DateAdded,
						    --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
							OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
							case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            UnAcknowledgeReason='',
                            ApprovedDateProdHead = MAX(a.ApprovedDateProdHead)
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
							LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                            LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
							Outer Apply
							(
							    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
							    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
							    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
							)OEC
							Outer Apply 
							(
							    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
							    ORDER BY EDD desc 
							)OBP
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                            WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                            --AND a.IsUnAcknowledge = 0 
                            AND a.IsKnittingComplete = 1 AND a.IsInternalRevise = 0
                            AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 1 AND a.IsApprovedByPMC = 0
                            AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                            AND a.ExportOrderID > 0
	                        AND a.PreRevisionNo = FBA.RevisionNo
                            --AND FBA.UnAcknowledge = 0
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, SBM.RevisionNo,a.RevisionNo, ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
							YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason,
						    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                        ),
                        RejectByBBKI AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),
	                        BBStatus = 'Reject By Knitting Input',
	                        RejectReason = a.UnAcknowledgeReason, IsReject = 1,YB.YBookingNo,
                            StatusText = '',

                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,	

					        RevisionReason = a.RivisionReason,
						    case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
						    case when YB.RevisionNo>0 then Convert(VARCHAR(100),Format(YB.RevisedDate,'yyyy-MM-dd HH:mm')) else '' end YarnBookingRevisionDate,
                            RevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = a.DateAdded,
						    --case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
							OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
							case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
                            a.UnAcknowledgeReason,
                            ApprovedDateProdHead = MAX(a.ApprovedDateProdHead)
                            FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
							LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                            LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
							Outer Apply
							(
							Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
							INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
							Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
							)OEC
							Outer Apply 
							(
							Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
							ORDER BY EDD desc 
							)OBP
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                            AND a.IsUnAcknowledge = 1 AND a.IsInternalRevise = 0
                            AND a.ExportOrderID > 0
	                        AND a.PreRevisionNo = FBA.RevisionNo
                            AND FBA.UnAcknowledge = 0
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.UnAcknowledgeReason, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
							YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason,
						    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
						),
                        CompleteList AS
                        (
	                        SELECT * FROM FBA
                            UNION
							SELECT * FROM RejectByBBKI
                            /*
                            UNION
	                        SELECT * FROM RejectByKI
	                        UNION
	                        SELECT * FROM RejectByAllowance
	                        UNION
	                        SELECT * FROM RejectByCheck
	                        UNION
	                        SELECT * FROM RejectByProdHead
                            */
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM CompleteList FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT *,Count(*) Over() TotalRows FROM F";


                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By ApprovedDateProdHead Desc" : paginationInfo.OrderBy;

                        isNeedImage = true;

                        break;
                    case Status.RejectReview:
                        sql = $@"WITH 
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),Reason = a.RejectReasonProdHead,YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
                        RejectDateProdHead = MAX(a.RejectDateProdHead)
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.IsRejectByProdHead = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI 
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.RejectReasonProdHead, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT * INTO #TempTable{tempGuid} FROM F
					SELECT *,Count(*) Over() TotalRows FROM #TempTable{tempGuid}";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By RejectDateProdHead Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.APPROVED_PMC:
                        sql = $@"WITH 
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                        FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
	                    
                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,

	                        RevisionReason = a.RivisionReason,
	                        YarnBookingStatus = case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end,
	                        --YarnBookingRevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end,
                            YarnBookingRevisionDate = case when YB.RevisionNo>0 then Convert(VARCHAR(100),Format(YB.RevisedDate,'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = a.DateAdded,
	                        RejectReason = case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
	                        ApprovedDatePMC = MAX(a.ApprovedDatePMC),LUE.EmployeeName PMCApprovedBy
                            FROM FBookingAcknowledge a
                            INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
                            LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                        Outer Apply
	                        (
		                        Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
		                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
		                        Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
	                        ) OEC
	                        Outer Apply 
	                        (
		                        Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
		                        ORDER BY EDD desc 
	                        ) OBP
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                        LEFT JOIN {DbNames.EPYSL}..LoginUser U ON U.UserCode=a.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = U.EmployeeCode
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                            --AND a.IsUnAcknowledge = 0 
                            AND a.IsKnittingComplete = 1 
                            AND a.IsApprovedByPMC = 1
                            AND a.ExportOrderID > 0
                            AND a.PreRevisionNo = FBA.RevisionNo
                            AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                            AND YB.IsAddition = 0 AND YB.IsRevised = 0
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,
	                        ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,
	                        a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,convert(varchar, a.ApprovedDatePMC, 20),LUE.EmployeeName,
	                        ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT *,Count(*) Over() TotalRows FROM F";


                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By ApprovedDatePMC Desc" : paginationInfo.OrderBy;
                        isNeedImage = true;
                        break;
                    case Status.REJECT_PMC:
                        sql = $@"
                    WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),Reason = a.RejectReasonPMC,YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,

                        BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,	

					     RevisionReason = a.RivisionReason,
						case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end YarnBookingStatus,
						--case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end YarnBookingRevisionDate,
                        YarnBookingRevisionDate = case when YB.RevisionNo>0 then Convert(VARCHAR(100),Format(YB.RevisedDate,'yyyy-MM-dd HH:mm')) else '' end,
                        RevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else null end,
                        FBAcknowledgeDate = a.DateAdded,
						case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end RejectReason,
						OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
				        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
						Format(a.RejectDatePMC,'yyyy-MM-dd') RejectDatePMC,LUE.EmployeeName PMCRejectedBy
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
						LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
							Outer Apply
							(
							Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
							INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
							Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
							)OEC
							Outer Apply 
							(
							Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
							ORDER BY EDD desc 
							)OBP
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
						LEFT JOIN {DbNames.EPYSL}..LoginUser U ON U.UserCode=a.RejectByPMC
						LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = U.EmployeeCode
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND ISNULL(a.IsUnAcknowledge,0) = 1 AND a.IsKnittingComplete = 1 
                        AND a.IsRejectByPMC = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND YB.IsAddition = 0
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.RejectReasonPMC,ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
							YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason,
						    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,Format(a.RejectDatePMC,'yyyy-MM-dd'),LUE.EmployeeName
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By RejectDatePMC Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.All:
                        sql = $@"
                        WITH
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                        RunningEWO As
                        (
	                        Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                        From {DbNames.EPYSL}..ExportOrderMaster EOM
	                        Where EOM.EWOStatusID = 130
                        ),
                        BM AS
                        (
	                        SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                        BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                        FROM RunningEWO EOM
	                        INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                        GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                        ),
                        SBM AS
                        (
	                        SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                        SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                        FROM RunningEWO EOM
	                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                        GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                        ),
                        AllBooking AS
                        (
	                        SELECT * FROM BM
	                        UNION
	                        SELECT * FROM SBM
                        ),
                        OtherProps AS
                        (
	                        SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                        FROM RunningEWO R
	                        INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                        LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                        WHERE TE.EventDisplayName='Yarn booking'
	                        GROUP BY R.ExportOrderID
                        ),
                        FBooking AS
                        (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                        ),
                        FL AS
                        (
	                        SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                        AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                        IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                        FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                        CreatedByName = LUE1.EmployeeName, 
	                        FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                        FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                        FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                        StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                                WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                                WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                            WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                                WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                        WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                                WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                            WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                            WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                            WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                                ELSE '' END

	                        FROM AllBooking AB
	                        LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy

                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU1 ON LU1.UserCode = FBA.KnittingCompleteBy
                            LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = LU1.EmployeeCode

                            LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                        WHERE PB.ExportOrderID IS NULL
                        ),
                        FinalList AS
                        (
	                        SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                        FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                        FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                        FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                        FROM FL
	                        WHERE ISNULL(FL.StatusText,'') != ''
	                        GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                        FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                        FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                        FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                        )
                        SELECT * INTO #TempData{tempGuid} FROM FinalList
                        SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";

                        isNeedImage = true;
                        isDisplayAgeing = true;

                        break;
                    case Status.Approved2:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND 
	                          a.IsKnittingComplete = 1 AND 
	                          a.IsInternalRevise = 0 AND 
	                          a.ExportOrderID > 0 AND 
	                          a.PreRevisionNoBBKI = a.RevisionNoBBKI AND 
	                          YB.IsAddition = 0 AND
	                          YB.Acknowledge = 1
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case Status.Internal_Rejection:
                        sql = $@"WITH

                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),Reason = a.UnAcknowledgeReason,YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
	                    
                        BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                        WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                        CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                        ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,

	                    RevisionReason = case when a.IsInternalRevise=1 THEN a.InternalReviseReason 
											  when a.IsAllocationInternalRevise = 1 then a.AllocationInternalReviseReason else '' end,
	                    YarnBookingStatus = case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end,
	                    YarnBookingRevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end,
	                    RejectReason = case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead 
						                    when a.IsRejectByProdHead=1 then a.RejectReasonProdHead 
						                    when a.IsRejectByPMC=1 then a.RejectReasonPMC 
						                    when a.IsRejectByAllowance=1 then a.RejectReasonAllowance 
						                    when YB.UnAcknowledge = 1 then YB.UnAckReason else '' end
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND (a.IsRejectByAllowance = 1 OR
		                        a.IsRejectByKnittingHead = 1 OR
		                        a.IsRejectByProdHead = 1 OR 
								(a.IsAllocationInternalRevise = 1 AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1
								AND a.IsUtilizationProposalConfirmed = 1 AND a.IsApprovedByProdHead = 1
								AND a.IsApprovedByPMC = 1) OR
		                        (a.IsInternalRevise = 1 AND a.IsRejectByPMC = 0))
			                    OR YB.UnAcknowledge = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.UnAcknowledgeReason, a.IsSample, 
	                    YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,
	                    a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,YB.UnAcknowledge,YB.UnAckReason,
	                    ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),a.IsInternalRevise,a.InternalReviseReason,YB.IsRevised,
                        a.IsAllocationInternalRevise, a.AllocationInternalReviseReason
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case Status.Additional:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo,
                        AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID --AND YB.IsAddition = 0
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND YB.IsAddition = 1

                        AND YB.IsQtyFinalizationPMCApprove = 0
                        AND YB.IsProdHeadApprove = 0
                        AND YB.IsTextileHeadApprove = 0
                        AND YB.IsKnittingUtilizationApprove = 0
                        AND YB.IsKnittingHeadApprove = 0
                        AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case Status.UnAcknowledge:
                        sql = $@"
                    WITH 
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                    FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),Reason = a.UnAcknowledgeReason,YB.YBookingNo,
                        StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
	                    
                        BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                        WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                        CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                        ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,

	                    RevisionReason = '',
	                    YarnBookingStatus = case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end,
	                    YarnBookingRevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end,
	                    RejectReason = case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND (a.IsUnAcknowledge = 1 OR a.IsRejectByPMC = 1) AND a.IsInternalRevise = 0
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.UnAcknowledgeReason, a.IsSample, 
	                    YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,
	                    a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,
	                    ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),YB.IsRevised
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    ),
					Final AS(
					 Select F.*
					 FROM F
					 GROUP BY F.BookingNo, F.BookingDate, F.IsSample, F.ExportOrderID, F.BuyerID, F.BuyerTeamID, F.CompanyID, F.Reason, F.YBookingNo,
							F.StatusText, F.BookingStatus, F.RevisionReason, F.YarnBookingStatus, F.YarnBookingRevisionDate, F.RejectReason,
							F.BuyerName, F.BuyerTeamName, F.CompanyName
					)

                    SELECT *,Count(*) Over() TotalRows FROM Final";

                        isNeedImage = true;

                        break;
                    case Status.AllStatus:
                        if ((ParamTypeId)paramTypeId == ParamTypeId.AdditionalYarnBooking || (ParamTypeId)paramTypeId == ParamTypeId.AYBQtyFinalizationPMC || (ParamTypeId)paramTypeId == ParamTypeId.AYBProdHeadApproval || (ParamTypeId)paramTypeId == ParamTypeId.AYBTextileHeadApproval || (ParamTypeId)paramTypeId == ParamTypeId.AYBKnittingUtilization || (ParamTypeId)paramTypeId == ParamTypeId.AYBKnittingHeadApproval || (ParamTypeId)paramTypeId == ParamTypeId.AYBOperationHeadApproval)
                        {
                            sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo,
                        StatusText = CASE
                                
                        WHEN YB.IsOperationHeadReject = 1 THEN 'Operation Head Rejected'
						WHEN YB.IsOperationHeadApprove = 1 THEN 'Operation Head Approved'

						WHEN YB.IsKnittingHeadReject = 1 THEN 'Knitting Head Rejected'
						WHEN YB.IsKnittingHeadApprove = 1 THEN 'Waiting For Operation Head Approve'
												
						WHEN YB.IsKnittingUtilizationReject = 1 THEN 'Knitting Utilization Rejected'
						WHEN YB.IsKnittingUtilizationApprove = 1 THEN 'Waiting For Knitting Head Approve'
						
						WHEN YB.IsTextileHeadReject = 1 THEN 'Textile Head Rejected'
						WHEN YB.IsTextileHeadApprove = 1 THEN 'Waiting For Knitting Utilization Approve'
												
						WHEN YB.IsProdHeadReject = 1 THEN 'Prouction Head Rejected'
						WHEN YB.IsProdHeadApprove = 1 THEN 'Waiting For Textile Head Approve'
						
						WHEN YB.IsQtyFinalizationPMCReject = 1 THEN 'Qty Finalized PMC Rejected'
						WHEN YB.IsQtyFinalizationPMCApprove = 1 THEN 'Waiting For Prod Head Approve'
						WHEN YB.IsQtyFinalizationPMCApprove = 0 AND YB.IsQtyFinalizationPMCReject = 0 THEN 'Waiting For Qty Finalized PMC'

				        ELSE '' END,
                        AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' --AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.ExportOrderID > 0 AND YB.IsAddition = 1
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
                        YB.IsQtyFinalizationPMCReject,YB.IsQtyFinalizationPMCApprove,YB.IsProdHeadApprove,YB.IsProdHeadReject,
						YB.IsTextileHeadApprove ,YB.IsTextileHeadReject,YB.IsKnittingUtilizationApprove,YB.IsKnittingUtilizationReject,
						YB.IsKnittingHeadApprove,YB.IsKnittingHeadReject,YB.IsOperationHeadApprove,YB.IsOperationHeadReject, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        }
                        else
                        {
                            sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo,
                        StatusText = CASE
                                
						WHEN YB.IsOperationHeadReject = 1 THEN 'Operation Head Rejected'
						WHEN YB.IsOperationHeadApprove = 1 THEN 'Operation Head Approved'

						WHEN YB.IsKnittingHeadReject = 1 THEN 'Knitting Head Rejected'
						WHEN YB.IsKnittingHeadApprove = 1 THEN 'Waiting For Operation Head Approve'

						WHEN YB.IsKnittingUtilizationReject = 1 THEN 'Knitting Utilization Rejected'
						WHEN YB.IsKnittingUtilizationApprove = 1 THEN 'Waiting For Knitting Head Approve'

						WHEN YB.IsTextileHeadReject = 1 THEN 'Textile Head Rejected'
						WHEN YB.IsTextileHeadApprove = 1 THEN 'Waiting For Knitting Utilization Approve'

						WHEN YB.IsProdHeadReject = 1 THEN 'Production Head Rejected'
						WHEN YB.IsProdHeadApprove = 1 THEN 'Waiting For Textile Head Approve'
						
						WHEN YB.IsQtyFinalizationPMCReject = 1 THEN 'Qty Finalized PMC Rejected'
						WHEN YB.IsQtyFinalizationPMCApprove = 1 THEN 'Waiting For Prod Head Approve'
						WHEN YB.IsQtyFinalizationPMCApprove = 0 THEN 'Waiting For Qty Finalized PMC'

				        ELSE '' END
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.ExportOrderID > 0
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
                        YB.IsQtyFinalizationPMCReject,YB.IsQtyFinalizationPMCApprove,YB.IsProdHeadApprove,YB.IsProdHeadReject,
						YB.IsTextileHeadApprove ,YB.IsTextileHeadReject,YB.IsKnittingUtilizationApprove,YB.IsKnittingUtilizationReject,
						YB.IsKnittingHeadApprove,YB.IsKnittingHeadReject,YB.IsOperationHeadApprove,YB.IsOperationHeadReject
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        }
                        break;
                    case Status.Approved:
                        sql = this.GetBulkMasterGridQuery(Status.Approved, (ParamTypeId)paramTypeId);
                        break;
                    case Status.Reject:
                        sql = this.GetBulkMasterGridQuery(Status.Reject, (ParamTypeId)paramTypeId);
                        break;
                    case Status.PendingExportData:
                        sql = $@"WITH FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
	                    
                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,

	                        RevisionReason = a.RivisionReason,
	                        YarnBookingStatus = case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end,
	                        --YarnBookingRevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end,
                            YarnBookingRevisionDate = case when YB.RevisionNo>0 then Convert(VARCHAR(100),Format(YB.RevisedDate,'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = a.DateAdded,
	                        RejectReason = case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
	                        ApprovedDatePMC = MAX(a.ApprovedDatePMC),LUE.EmployeeName PMCApprovedBy
                            FROM FBookingAcknowledge a
                            INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                        Outer Apply
	                        (
		                        Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
		                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
		                        Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
	                        ) OEC
	                        Outer Apply 
	                        (
		                        Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
		                        ORDER BY EDD desc 
	                        ) OBP
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                        LEFT JOIN {DbNames.EPYSL}..LoginUser U ON U.UserCode=a.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = U.EmployeeCode
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                            AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                            AND a.IsApprovedByPMC = 1
                            AND a.ExportOrderID > 0
                            AND a.PreRevisionNo = FBA.RevisionNo
                            AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                            AND YB.IsAddition = 0 AND YB.IsRevised = 0
                            AND YB.Exported = 0
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,
	                        ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,
	                        a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,convert(varchar, a.ApprovedDatePMC, 20),LUE.EmployeeName,
	                        ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT * FROM F             
                        ";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By ApprovedDatePMC Desc" : paginationInfo.OrderBy;

                        break;
                    case Status.ExportData:
                        sql = $@"WITH FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo,
                            StatusText = CASE WHEN ISNULL(a.IsReviseBBKI,0) = 1 THEN 'Revise' ELSE '' END,
	                    
                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN BM.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),BM.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,

	                        RevisionReason = a.RivisionReason,
	                        YarnBookingStatus = case when a.RevisionNo>0 then 'Internal Revision No. '+Convert(varchar(100),a.RevisionNo) else '' end,
	                        --YarnBookingRevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else '' end,
                            YarnBookingRevisionDate = case when YB.RevisionNo>0 then Convert(VARCHAR(100),Format(YB.RevisedDate,'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when a.RevisionNo>0 then Format(a.RevisionDate,'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = a.DateAdded,
	                        RejectReason = case when a.IsRejectByKnittingHead=1 then a.RejectReasonKnittingHead when a.IsRejectByProdHead=1 then a.RejectReasonProdHead when a.IsRejectByPMC=1 then a.RejectReasonPMC when a.IsRejectByAllowance=1 then a.RejectReasonAllowance else '' end,
	                        OBP.CalendarDays,OBP.EDD FirstShipmentDate,YarnBookingDate = MIN(YB.YBookingDate), --OEC.EventDate YarnBookingDate,
	                        case when YB.IsAddition=1 then 'Add-'+Convert(varchar(100),YB.AdditionNo) when a.RevisionNo>0 then 'Rev-'+Convert(varchar(100),a.RevisionNo) else 'Main' end BookingType,
	                        ApprovedDatePMC = MAX(a.ApprovedDatePMC),LUE.EmployeeName PMCApprovedBy
                            FROM FBookingAcknowledge a
                            INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                        Outer Apply
	                        (
		                        Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
		                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
		                        Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
	                        ) OEC
	                        Outer Apply 
	                        (
		                        Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
		                        ORDER BY EDD desc 
	                        ) OBP
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                        LEFT JOIN {DbNames.EPYSL}..LoginUser U ON U.UserCode=a.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = U.EmployeeCode
	                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                            AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                            AND a.IsApprovedByPMC = 1
                            AND a.ExportOrderID > 0
                            AND a.PreRevisionNo = FBA.RevisionNo
                            AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                            AND YB.IsAddition = 0 AND YB.IsRevised = 0
                            AND YB.Exported = 1
	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,
	                        ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,
	                        a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,convert(varchar, a.ApprovedDatePMC, 20),LUE.EmployeeName,
	                        ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT * FROM F             
                        ";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By ApprovedDatePMC Desc" : paginationInfo.OrderBy;


                        break;
                    case Status.ADDITIONAL_APPROVED_OPERATION_HEAD:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample,YB.Acknowledge, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID 
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND YB.IsAddition = 1
                        AND YB.IsOperationHeadApprove = 1

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo, YB.DateAdded,YB.Acknowledge
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case Status.ADDITIONAL_INTERNAL_REJECTION:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID 
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND YB.IsAddition = 1

                        AND 
						(
                            YB.IsQtyFinalizationPMCReject = 1
						    OR YB.IsProdHeadReject = 1
						    OR YB.IsTextileHeadReject = 1
						    OR YB.IsKnittingUtilizationReject = 1
						    OR YB.IsKnittingHeadReject = 1
						    OR YB.IsOperationHeadReject = 1
                            OR YB.UnAcknowledge = 1
                            OR 
							(
								YB.IsAllocationInternalRevise_Additional = 1 
								AND YB.IsQtyFinalizationPMCApprove = 1 AND YB.IsProdHeadApprove = 1
								AND YB.IsTextileHeadApprove = 1 AND YB.IsKnittingUtilizationApprove = 1
								AND YB.IsKnittingHeadApprove = 1 AND YB.IsOperationHeadApprove = 1
							)
						)

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    default: //Pending
                        sql = $@"WITH
                        PreBookingAdditionList AS
                        (
	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..BookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID

	                        UNION

	                        SELECT BM.ExportOrderID
	                        FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                        WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                        AND ISNULL(BM.AdditionalBooking,0) > 0 
	                        AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                        GROUP BY BM.ExportOrderID
                        ),
                        FBAC AS
                        (
	                        SELECT FBAC.AcknowledgeID, MktAcknowledgeDate = MIN(FBAC.AcknowledgeDate), FBAcknowledgeDate = MIN(FBA.AcknowledgeDate)
	                        FROM FBookingAcknowledgeChild FBAC
	                        INNER JOIN FBookingAcknowledge FBA1 ON FBA1.FBAckID = FBAC.AcknowledgeID
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = FBA1.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA1.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA1.BookingID
	                        WHERE (CONVERT(date,BM.BookingDate) >= CONVERT(date,'{_startingDate}') OR CONVERT(date,SBM.BookingDate) >= CONVERT(date,'{_startingDate}')) AND 
	                        ISNULL(SendToMktAck,0) > 0 AND ISNULL(IsMktAck,0) = 0 AND ISNULL(IsMktUnAck,0) = 0
	                        AND FBA.RevisionNo = FBA1.PreRevisionNo 
	                        GROUP BY FBAC.AcknowledgeID
                        ),
                        FBACIsAck AS
                        (
	                        SELECT FBAC.AcknowledgeID, IsTxtAck = MAX(CAST(IsTxtAck AS INT))
	                        FROM FBookingAcknowledgeChild FBAC
	                        INNER JOIN FBookingAcknowledge FBA1 ON FBA1.FBAckID = FBAC.AcknowledgeID
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = FBA1.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA1.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA1.BookingID
	                        WHERE (CONVERT(date,BM.BookingDate) >= CONVERT(date,'{_startingDate}') OR CONVERT(date,SBM.BookingDate) >= CONVERT(date,'{_startingDate}')) 
	                        AND FBA.RevisionNo = FBA1.PreRevisionNo 
							--AND FBAC.AcknowledgeID in (23230,23231,23234)
	                        GROUP BY FBAC.AcknowledgeID
                        ),
                        F AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, CompanyID = MAX(b.CompanyID),
	                        BuyerName = ISNULL(CTO.ShortName,''), BuyerTeamName = ISNULL(CCT.TeamName,''),
	                        a.RevisionDate,
	                    
                            BookingStatus = CASE WHEN YB.IsRevised = 1 THEN 'YB Revision No ' + Convert(varchar(100),MAX(YB.PreProcessRevNo))
                            WHEN a.RevisionNo>0 then 'Booking Revision No. ' + 
                            CASE WHEN ISNULL(SBM.BookingID,0) = 0 THEN Convert(varchar(100),a.RevisionNo)
                            ELSE Convert(varchar(100),SBM.RevisionNo) END else '' end,

	                        RevisionReason = case when a.RevisionNo>0 then CASE WHEN ISNULL(a.IsSample,0) = 0 THEN MAX(BM.RevisionReason) ELSE '' END else '' end,
                            IsSample = CASE WHEN ISNULL(SBM.BookingID,0) > 0 THEN 1 ELSE 0 END,
                            IsMktRevisionPending = CASE WHEN ISNULL(FBAC.AcknowledgeID,0) = 0 THEN 0 ELSE 1 END,
                            MktAcknowledgeDate = MAX(FBAC.MktAcknowledgeDate),
	                        FBAcknowledgeDate = MAX(FBAC.FBAcknowledgeDate)

	                        FROM FBookingAcknowledge a
	                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = a.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = a.BuyerTeamID
	                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.IsAddition = 0
                            LEFT JOIN FBAC ON FBAC.AcknowledgeID = a.FBAckID
                            LEFT JOIN FBACIsAck ON FBACIsAck.AcknowledgeID = a.FBAckID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                        WHERE 
                            (CONVERT(date,BM.BookingDate) >= CONVERT(date,'{_startingDate}') OR CONVERT(date,SBM.BookingDate) >= CONVERT(date,'{_startingDate}'))
                            AND FBACIsAck.IstxtAck = 1 
                            --a.IsUnAcknowledge = 0 
	                        AND a.IsKnittingComplete = 0
	                        AND a.ExportOrderID > 0
	                        AND (YB.YBookingID IS NULL OR (ISNULL(YB.YBookingID,0) = 0 AND FBA.RevisionNo > 0))
	                        AND a.PreRevisionNo = FBA.RevisionNo
	                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
	                        AND PB.ExportOrderID IS NULL
	                        GROUP BY a.BookingNo, a.ExportOrderID,a.BuyerID, a.BuyerTeamID,
	                        ISNULL(CTO.ShortName,''), ISNULL(CCT.TeamName,''), a.IsSample,a.RevisionDate,
	                        a.RevisionNo, ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo),
	                        ISNULL(SBM.BookingID,0),YB.IsRevised,CASE WHEN ISNULL(FBAC.AcknowledgeID,0) = 0 THEN 0 ELSE 1 END
                        )
                        SELECT * INTO #TempData{tempGuid} FROM F
					    SELECT *,Count(*) Over() TotalRows FROM #TempData{tempGuid}";

                        orderBy = paginationInfo.OrderBy.NullOrEmpty() ? " Order By MktAcknowledgeDate DESC, FBAcknowledgeDate DESC, BookingNo Desc" : paginationInfo.OrderBy;

                        isNeedImage = true;

                        break;
                }
            }
            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            if (status == Status.All || status == Status.Pending || status == Status.Draft)
            {
                sql += $@" DROP TABLE #TempData{tempGuid}";
            }

            var fBookingAcknowledges = await _service.GetDataAsync<FBookingAcknowledge>(sql);

            if (isNeedImage)
            {
                string bookingNos = string.Join("','", fBookingAcknowledges.Select(x => x.BookingNo).Distinct());
                if (bookingNos.IsNotNullOrEmpty())
                {
                    fBookingAcknowledges.Where(x => x.ImagePath.IsNotNullOrEmpty()).ToList().ForEach(x => x.ImagePath = "");
                    fBookingAcknowledges.Where(x => x.ImagePath1.IsNotNullOrEmpty()).ToList().ForEach(x => x.ImagePath1 = "");

                    var fBookingAcknowledgeImages = await _service.GetDataAsync<FBookingAcknowledge>(CommonQueries.GetImagePathQuery(bookingNos, "TP"));
                    fBookingAcknowledgeImages.ForEach(x =>
                    {
                        var obj = fBookingAcknowledges.Find(y => y.BookingNo == x.BookingNo);
                        if (obj.IsNotNull()) fBookingAcknowledges.Find(y => y.BookingNo == x.BookingNo).ImagePath = x.ImagePath;
                    });
                    fBookingAcknowledgeImages = await _service.GetDataAsync<FBookingAcknowledge>(CommonQueries.GetImagePathQuery(bookingNos, "BK"));
                    fBookingAcknowledgeImages.ForEach(x =>
                    {
                        var obj = fBookingAcknowledges.Find(y => y.BookingNo == x.BookingNo);
                        if (obj.IsNotNull()) fBookingAcknowledges.Find(y => y.BookingNo == x.BookingNo).ImagePath1 = x.ImagePath;
                    });
                }
            }

            if (isDisplayAgeing)
            {
                string bookingNos = string.Join("','", fBookingAcknowledges.Select(x => x.BookingNo).Distinct());
                if (bookingNos.IsNotNullOrEmpty())
                {
                    var fbaListDates = await _service.GetDataAsync<FBookingAcknowledge>(CommonQueries.GetAgeing(bookingNos));
                    fBookingAcknowledges.ForEach(x =>
                    {
                        var obj = fbaListDates.Find(y => y.BookingNo == x.BookingNo);

                        if (x.StatusText == "Pending For Allowance") x.StartDate = obj.DateUpdated;
                        else if (x.StatusText == "Pending For Utilization Confirmation") x.StartDate = obj.ApprovedDateAllowance;
                        else if (x.StatusText == "Pending For Knitting Head Approval") x.StartDate = obj.UtilizationProposalConfirmedDate;
                        else if (x.StatusText == "Pending For Prod Head Approval") x.StartDate = obj.CheckDateKnittingHead;
                        else if (x.StatusText == "Pending For Final Approval") x.StartDate = obj.ApprovedDateProdHead;
                        else if (x.StatusText == "Pending For Knitting Info") x.StartDate = obj.DateUpdated;

                        TimeSpan difference = (DateTime.Now - Convert.ToDateTime(x.StartDate));
                        x.Ageing = String.Format("{0}:{1}:{2}",
                                        difference.Hours.ToString("00"),
                                        difference.Minutes.ToString("00"),
                                        difference.Seconds.ToString("00"));
                    });
                }
            }
            return fBookingAcknowledges;
        }
        private string GetBulkMasterGridQuery(Status status, ParamTypeId paramTypeId)
        {
            string sql = string.Empty;
            if (status == Status.Approved)
            {
                switch (paramTypeId)
                {
                    case ParamTypeId.AYBQtyFinalizationPMC:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        AND YB.IsQtyFinalizationPMCApprove = 1
                        AND YB.IsProdHeadApprove = 0
                        AND YB.IsTextileHeadApprove = 0
                        AND YB.IsKnittingUtilizationApprove = 0
                        AND YB.IsKnittingHeadApprove = 0
                        AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBProdHeadApproval:
                        sql = $@"WITH FBA AS
                            (
	                            SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                            a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                                FROM FBookingAcknowledge a
                                INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                            LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                                LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                            WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                                --AND a.IsApprovedByPMC = 1
                                --AND a.ExportOrderID > 0
                                AND a.PreRevisionNo = FBA.RevisionNo
                                AND YB.IsAddition = 1

                                AND YB.IsQtyFinalizationPMCApprove = 1
                                AND YB.IsProdHeadApprove = 1
                                AND YB.IsTextileHeadApprove = 0
                                AND YB.IsKnittingUtilizationApprove = 0
                                AND YB.IsKnittingHeadApprove = 0
                                AND YB.IsOperationHeadApprove = 0

                                AND YB.IsQtyFinalizationPMCReject = 0
                                AND YB.IsProdHeadReject = 0
                                AND YB.IsTextileHeadReject = 0
                                AND YB.IsKnittingUtilizationReject = 0
                                AND YB.IsKnittingHeadReject = 0
                                AND YB.IsOperationHeadReject = 0

	                            GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                            ),
                            F AS(
	                            SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                            FROM FBA
	                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                            )
                            SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBTextileHeadApproval:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        AND YB.IsQtyFinalizationPMCApprove = 1
                        AND YB.IsProdHeadApprove = 1
                        AND YB.IsTextileHeadApprove = 1
                        AND YB.IsKnittingUtilizationApprove = 0
                        AND YB.IsKnittingHeadApprove = 0
                        AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBKnittingUtilization:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        AND YB.IsQtyFinalizationPMCApprove = 1
                        AND YB.IsProdHeadApprove = 1
                        AND YB.IsTextileHeadApprove = 1
                        AND YB.IsKnittingUtilizationApprove = 1
                        AND YB.IsKnittingHeadApprove = 0
                        AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBKnittingHeadApproval:
                        sql = $@"WITH FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                            FROM FBookingAcknowledge a
                            INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                        WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                            --AND a.IsApprovedByPMC = 1
                            --AND a.ExportOrderID > 0
                            AND a.PreRevisionNo = FBA.RevisionNo
                            AND YB.IsAddition = 1

                            AND YB.IsQtyFinalizationPMCApprove = 1
                            AND YB.IsProdHeadApprove = 1
                            AND YB.IsTextileHeadApprove = 1
                            AND YB.IsKnittingUtilizationApprove = 1
                            AND YB.IsKnittingHeadApprove = 1
                            AND YB.IsOperationHeadApprove = 1

                            AND YB.IsQtyFinalizationPMCReject = 0
                            AND YB.IsProdHeadReject = 0
                            AND YB.IsTextileHeadReject = 0
                            AND YB.IsKnittingUtilizationReject = 0
                            AND YB.IsKnittingHeadReject = 0
                            AND YB.IsOperationHeadReject = 0

	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    default: //ParamTypeId.AYBOperationHeadApproval
                        sql = $@"WITH FBA AS
                        (
	                        SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                        a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                            FROM FBookingAcknowledge a
                            INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                            LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                        WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                            --AND a.IsApprovedByPMC = 1
                            AND a.ExportOrderID > 0
                            AND a.PreRevisionNo = FBA.RevisionNo
                            AND YB.IsAddition = 1

                            AND YB.IsQtyFinalizationPMCApprove = 1
                            AND YB.IsProdHeadApprove = 1
                            AND YB.IsTextileHeadApprove = 1
                            AND YB.IsKnittingUtilizationApprove = 1
                            AND YB.IsKnittingHeadApprove = 1
                            AND YB.IsOperationHeadApprove = 1

                            AND YB.IsQtyFinalizationPMCReject = 0
                            AND YB.IsProdHeadReject = 0
                            AND YB.IsTextileHeadReject = 0
                            AND YB.IsKnittingUtilizationReject = 0
                            AND YB.IsKnittingHeadReject = 0
                            AND YB.IsOperationHeadReject = 0

	                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                        ),
                        F AS(
	                        SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                        FROM FBA
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        )
                        SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                }

            }
            else if (status == Status.Reject)
            {
                switch (paramTypeId)
                {
                    case ParamTypeId.AYBQtyFinalizationPMC:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        --AND YB.IsQtyFinalizationPMCApprove = 0
                        --AND YB.IsProdHeadApprove = 0
                        --AND YB.IsTextileHeadApprove = 0
                        --AND YB.IsKnittingUtilizationApprove = 0
                        --AND YB.IsKnittingHeadApprove = 0
                        --AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 1
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBProdHeadApproval:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        --AND YB.IsQtyFinalizationPMCApprove = 0
                        --AND YB.IsProdHeadApprove = 0
                        --AND YB.IsTextileHeadApprove = 0
                        --AND YB.IsKnittingUtilizationApprove = 0
                        --AND YB.IsKnittingHeadApprove = 0
                        --AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 1
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBTextileHeadApproval:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        --AND YB.IsQtyFinalizationPMCApprove = 0
                        --AND YB.IsProdHeadApprove = 0
                        --AND YB.IsTextileHeadApprove = 0
                        --AND YB.IsKnittingUtilizationApprove = 0
                        --AND YB.IsKnittingHeadApprove = 0
                        --AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 1
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBKnittingUtilization:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        --AND YB.IsQtyFinalizationPMCApprove = 0
                        --AND YB.IsProdHeadApprove = 0
                        --AND YB.IsTextileHeadApprove = 0
                        --AND YB.IsKnittingUtilizationApprove = 0
                        --AND YB.IsKnittingHeadApprove = 0
                        --AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 1
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    case ParamTypeId.AYBKnittingHeadApproval:
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        --AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        --AND YB.IsQtyFinalizationPMCApprove = 0
                        --AND YB.IsProdHeadApprove = 0
                        --AND YB.IsTextileHeadApprove = 0
                        --AND YB.IsKnittingUtilizationApprove = 0
                        --AND YB.IsKnittingHeadApprove = 0
                        --AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 1
                        AND YB.IsOperationHeadReject = 0

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                    default: //ParamTypeId.AYBOperationHeadApproval
                        sql = $@"WITH FBA AS
                    (
	                    SELECT a.BookingNo, BookingDate = MIN(a.BookingDate), a.IsSample, 
	                    a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, YB.YBookingNo, AddYarnBookingDate = YB.DateAdded
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID
	                    WHERE a.DateAdded >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        --AND a.IsApprovedByPMC = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND YB.IsAddition = 1

                        --AND YB.IsQtyFinalizationPMCApprove = 0
                        --AND YB.IsProdHeadApprove = 0
                        --AND YB.IsTextileHeadApprove = 0
                        --AND YB.IsKnittingUtilizationApprove = 0
                        --AND YB.IsKnittingHeadApprove = 0
                        --AND YB.IsOperationHeadApprove = 0

                        AND YB.IsQtyFinalizationPMCReject = 0
                        AND YB.IsProdHeadReject = 0
                        AND YB.IsTextileHeadReject = 0
                        AND YB.IsKnittingUtilizationReject = 0
                        AND YB.IsKnittingHeadReject = 0
                        AND YB.IsOperationHeadReject = 1

	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo, YB.DateAdded
                    ),
                    F AS(
	                    SELECT FBA.*, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
	                    FROM FBA
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                    )
                    SELECT *,Count(*) Over() TotalRows FROM F";
                        break;
                }
            }
            return sql;
        }
        public async Task<List<FBookingAcknowledge>> GetBulkFabricAckPagedAsync(Status status, PaginationInfo paginationInfo, LoginUser AppUser)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BKAcknowledgeDate Desc, FBAcknowledgeDate Desc" : paginationInfo.OrderBy;
            string sql;
            string sts = status == Status.New ? "N" : status == Status.Revise ? "R" : status == Status.Completed ? "A" : "";
            if (status == Status.New)
            {
                sql = $@"With RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM As 
                    (
	                    Select BookingID, BookingNo, BM.ExportOrderID, SupplierID, SubGroupID, WithOutOB = Convert(bit,0),
	                    EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
	                    from {DbNames.EPYSL}..BookingMaster BM
	                    Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
                        where BM.IsCancel = 0 And BM.SubGroupID in (1,11,12)
	                    Union All
	                    Select BookingID, BookingNo, BM.ExportOrderID, SupplierID, 1 SubGroupID, WithOutOB = Convert(bit,1),
	                    EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
	                    from {DbNames.EPYSL}..SampleBookingMaster BM
	                    Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
                        where BM.IsCancel = 0 And BM.ExportOrderID <> 0 and BM.Proposed = 1 /**/
                    ),
                    ISG As
                    (
	                    Select * from {DbNames.EPYSL}..ItemSubGroup
	                    Where SubGroupName in ('Fabric','Collar','Cuff')
                    ),
                    BKList As
                    (
	                    Select BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, BookingID = Min(BM.BookingID),0 BOMMasterID, ISourcing = CAI.InHouse, BM.BuyerTeamID, ContactID = BM.SupplierID, BM.WithOutOB, RevisionNo = Max(BM.RevisionNo)
	                    FROM BM
	                    Inner Join ISG On ISG.SubGroupID = BM.SubGroupID
	                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI On CAI.ContactID = BM.SupplierID
	                    Where ISNULL(CAI.InHouse,0) = 1
	                    Group By BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, CAI.InHouse, BM.BuyerTeamID, BM.SupplierID, BM.WithOutOB
                    ),BAck as (
	                    Select BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
	                    FROM BKList BC
                        Inner Join {DbNames.EPYSL}..BookingItemAcknowledge BIA On BIA.BookingID = BC.BookingID And BIA.WithoutOB = BC.WithOutOB
	                    Group By BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
                    ),InHouseItemList as (
	                    SELECT BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, ISourcing = Max(convert(int,BC.ISourcing)), BC.RevisionNo, AcknowledgeDate = Null, BC.WithOutOB,BKAcknowledgeDate = Max(BC.AcknowledgeDate)
	                    FROM BAck BC
	                    Group By BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, BC.ISourcing, BC.WithOutOB, BC.RevisionNo
	                    having BC.ISourcing = 1
                    ),
                    ACKList as
                    (
                        Select OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.BookingID,OSI.BookingNo, 
	                    RevisionNo = ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,
	                    RevStatus = Case When OSI.WithOutOB = 1 then 1 
                                            When Isnull(EL.FabBSCAckStatus,'') = 'Acknowledged' And Isnull(EL.FabBSCAckStatus,'') <> '' Then 1 Else 0 End,
	                    BKAcknowledgeDate = Max(OSI.BKAcknowledgeDate), FBAcknowledgeDate = Max(FBA.AcknowledgeDate), OSI.WithoutOB
                        From InHouseItemList OSI
	                    Left Join {DbNames.EPYSL}..ExportWorkOrderLifeCycleChild EL On EL.ExportOrderID = OSI.ExportOrderID And EL.BookingID = OSI.BookingID And EL.ContactID = OSI.ContactID
                        Left Join FabricBookingAcknowledge FBA On FBA.BookingID = OSI.BookingID 
                        Where FBA.AcknowledgeID IS NULL
		                    Group By OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.ExportOrderID,ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,Isnull(EL.FabBSCAckStatus,''),
		                    OSI.BookingID,OSI.BookingNo, OSI.WithoutOB
                    )
                    ,       
                    F AS(
                    SELECT BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName BuyerTeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BookingNo, BK.WithoutOB
                    From ACKList BK
                    Inner Join {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = BK.BuyerTeamID
                    Group By BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BK.BookingNo, BK.WithoutOB
                    
                    )

                SELECT *,Count(*) Over() TotalRows FROM F";
            }
            else if (status == Status.Revise)
            {
                sql = $@"With RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM As 
                    (
	                    Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, BM.SubGroupID, WithOutOB = Convert(bit,0),
	                    EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
	                    from {DbNames.EPYSL}..BookingMaster BM
	                    Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
	                    left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
                        where BM.IsCancel = 0 And BM.SubGroupID in (1,11,12) AND FBA.PreRevisionNo <> BM.RevisionNo
	                    Union All
	                    Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, 1 SubGroupID, WithOutOB = Convert(bit,1),
	                    EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
	                    from {DbNames.EPYSL}..SampleBookingMaster BM
	                    Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
	                    left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
                        where BM.IsCancel = 0 And BM.ExportOrderID <> 0 AND FBA.PreRevisionNo <> BM.RevisionNo
                    ),
                    ISG As
                    (
	                    Select * from {DbNames.EPYSL}..ItemSubGroup
	                    Where SubGroupName in ('Fabric','Collar','Cuff')
                    ),
                    BKList As
                    (
	                    Select BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, BookingID = Min(BM.BookingID),0 BOMMasterID, ISourcing = CAI.InHouse, BM.BuyerTeamID, ContactID = BM.SupplierID, BM.WithOutOB, RevisionNo = Max(BM.RevisionNo)
	                    FROM BM
	                    Inner Join ISG On ISG.SubGroupID = BM.SubGroupID
	                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI On CAI.ContactID = BM.SupplierID
	                    Where ISNULL(CAI.InHouse,0) = 1
	                    Group By BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, CAI.InHouse, BM.BuyerTeamID, BM.SupplierID, BM.WithOutOB
                    ),BAck as (
	                    Select BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
	                    FROM BKList BC
                        Inner Join {DbNames.EPYSL}..BookingItemAcknowledge BIA On BIA.BookingID = BC.BookingID And BIA.WithoutOB = BC.WithOutOB
	                    Group By BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
                    ),InHouseItemList as (
	                    SELECT BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, ISourcing = Max(convert(int,BC.ISourcing)), BC.RevisionNo, AcknowledgeDate = Null, BC.WithOutOB,BKAcknowledgeDate = Max(BC.AcknowledgeDate)
	                    FROM BAck BC
	                    Group By BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, BC.ISourcing, BC.WithOutOB, BC.RevisionNo
	                    having BC.ISourcing = 1
                    ),
                    ACKList as
                    (
                        Select OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.BookingID,OSI.BookingNo, 
	                    RevisionNo = ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,
	                    RevStatus = Case When OSI.WithOutOB = 1 then 1 
                                            When Isnull(EL.FabBSCAckStatus,'') = 'Acknowledged' And Isnull(EL.FabBSCAckStatus,'') <> '' Then 1 Else 0 End,
	                    BKAcknowledgeDate = Max(OSI.BKAcknowledgeDate), FBAcknowledgeDate = Max(FBA.AcknowledgeDate), OSI.WithoutOB
                        From InHouseItemList OSI
	                    Left Join {DbNames.EPYSL}..ExportWorkOrderLifeCycleChild EL On EL.ExportOrderID = OSI.ExportOrderID And EL.BookingID = OSI.BookingID And EL.ContactID = OSI.ContactID
                        Left Join FabricBookingAcknowledge FBA On FBA.BookingID = OSI.BookingID  And FBA.SubGroupID = OSI.SubGroupID And FBA.ItemGroupID = OSI.ItemGroupID And FBA.WithoutOB = OSI.WithoutOB
                        /* Where Case When FBA.AcknowledgeID IS NULL Then 0
					                    When FBA.AcknowledgeID IS NOT NULL And ISNULL(FBA.PreProcessRevNo,0) <> ISNULL(FBA.RevisionNo,0) Then 2 Else 1 End 
			                    = Case When '{sts}'='N' Then 0
					                    When '{sts}'='R' Then 2 Else 1 End */
		                    Group By OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.ExportOrderID,ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,Isnull(EL.FabBSCAckStatus,''),
		                    OSI.BookingID,OSI.BookingNo, OSI.WithoutOB
                    )
                    ,       
                    F AS(
                    SELECT BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName BuyerTeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BookingNo, BK.WithoutOB
                    From ACKList BK
                    Inner Join {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = BK.BuyerTeamID
                    Group By BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BK.BookingNo, BK.WithoutOB
                    
                    )

                SELECT *,Count(*) Over() TotalRows FROM F";
            }
            else if (status == Status.Completed)
            {

                sql = $@"With RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM As 
                    (
	                    Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, BM.SubGroupID, WithOutOB = Convert(bit,0),
						EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
						from {DbNames.EPYSL}..BookingMaster BM
						Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
						left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
						where BM.IsCancel = 0 And BM.SubGroupID in (1,11,12) AND FBA.PreRevisionNo = BM.RevisionNo
						Union All
						Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, 1 SubGroupID, WithOutOB = Convert(bit,1),
						EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
						from {DbNames.EPYSL}..SampleBookingMaster BM
						Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
						left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
						where BM.IsCancel = 0 And BM.ExportOrderID <> 0 AND FBA.PreRevisionNo = BM.RevisionNo
                    ),
                    ISG As
                    (
	                    Select * from {DbNames.EPYSL}..ItemSubGroup
	                    Where SubGroupName in ('Fabric','Collar','Cuff')
                    ),
                    BKList As
                    (
	                    Select BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, BookingID = Min(BM.BookingID),0 BOMMasterID, ISourcing = CAI.InHouse, BM.BuyerTeamID, ContactID = BM.SupplierID, BM.WithOutOB, RevisionNo = Max(BM.RevisionNo)
	                    FROM BM
	                    Inner Join ISG On ISG.SubGroupID = BM.SubGroupID
	                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI On CAI.ContactID = BM.SupplierID
	                    Where ISNULL(CAI.InHouse,0) = 1
	                    Group By BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, CAI.InHouse, BM.BuyerTeamID, BM.SupplierID, BM.WithOutOB
                    ),BAck as (
	                    Select BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
	                    FROM BKList BC
                        Inner Join {DbNames.EPYSL}..BookingItemAcknowledge BIA On BIA.BookingID = BC.BookingID And BIA.WithoutOB = BC.WithOutOB
	                    Group By BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
                    ),InHouseItemList as (
	                    SELECT BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, ISourcing = Max(convert(int,BC.ISourcing)), BC.RevisionNo, AcknowledgeDate = Null, BC.WithOutOB,BKAcknowledgeDate = Max(BC.AcknowledgeDate)
	                    FROM BAck BC
	                    Group By BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, BC.ISourcing, BC.WithOutOB, BC.RevisionNo
	                    having BC.ISourcing = 1
                    ),
                    ACKList as
                    (
                        Select OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.BookingID,OSI.BookingNo, 
	                    RevisionNo = ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,
	                    RevStatus = Case When OSI.WithOutOB = 1 then 1 
                                            When Isnull(EL.FabBSCAckStatus,'') = 'Acknowledged' And Isnull(EL.FabBSCAckStatus,'') <> '' Then 1 Else 0 End,
	                    BKAcknowledgeDate = Max(OSI.BKAcknowledgeDate), FBAcknowledgeDate = Max(FBA.AcknowledgeDate), OSI.WithoutOB
                        From InHouseItemList OSI
	                    Left Join {DbNames.EPYSL}..ExportWorkOrderLifeCycleChild EL On EL.ExportOrderID = OSI.ExportOrderID And EL.BookingID = OSI.BookingID And EL.ContactID = OSI.ContactID
                        Inner Join FabricBookingAcknowledge FBA On FBA.BookingID = OSI.BookingID
                        Left Join FBookingAcknowledgeChild FBC On FBC.BookingID = OSI.BookingID
                        Where (IsNull(FBC.IsMktAck,0)=1)  Or ( IsNull(FBC.IsMktUnAck,0)=0 And IsNull(FBC.IsTxtAck,0) = 0 And FBA.Status=1)
		                    Group By OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.ExportOrderID,ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,Isnull(EL.FabBSCAckStatus,''),
		                    OSI.BookingID,OSI.BookingNo, OSI.WithoutOB
                    )
                    ,       
                    F AS(
                    SELECT BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName BuyerTeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BookingNo, BK.WithoutOB
                    From ACKList BK
                    Inner Join {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = BK.BuyerTeamID
                    Group By BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BK.BookingNo, BK.WithoutOB
                    
                    )

                SELECT *,Count(*) Over() TotalRows FROM F";

            }
            else if (status == Status.ProposedForAcknowledge)
            {

                sql = $@"With RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM As 
                    (
	                    Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, BM.SubGroupID, WithOutOB = Convert(bit,0),
						EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
						from {DbNames.EPYSL}..BookingMaster BM
						Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
						left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
						where BM.IsCancel = 0 And BM.SubGroupID in (1,11,12) AND FBA.PreRevisionNo = BM.RevisionNo
						Union All
						Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, 1 SubGroupID, WithOutOB = Convert(bit,1),
						EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
						from {DbNames.EPYSL}..SampleBookingMaster BM
						Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
						left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
						where BM.IsCancel = 0 And BM.ExportOrderID <> 0 AND FBA.PreRevisionNo = BM.RevisionNo
                    ),
                    ISG As
                    (
	                    Select * from {DbNames.EPYSL}..ItemSubGroup
	                    Where SubGroupName in ('Fabric','Collar','Cuff')
                    ),
                    BKList As
                    (
	                    Select BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, BookingID = Min(BM.BookingID),0 BOMMasterID, ISourcing = CAI.InHouse, BM.BuyerTeamID, ContactID = BM.SupplierID, BM.WithOutOB, RevisionNo = Max(BM.RevisionNo)
	                    FROM BM
	                    Inner Join ISG On ISG.SubGroupID = BM.SubGroupID
	                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI On CAI.ContactID = BM.SupplierID
	                    Where ISNULL(CAI.InHouse,0) = 1
	                    Group By BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, CAI.InHouse, BM.BuyerTeamID, BM.SupplierID, BM.WithOutOB
                    ),BAck as (
	                    Select BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
	                    FROM BKList BC
                        Inner Join {DbNames.EPYSL}..BookingItemAcknowledge BIA On BIA.BookingID = BC.BookingID And BIA.WithoutOB = BC.WithOutOB
	                    Group By BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
                    ),InHouseItemList as (
	                    SELECT BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, ISourcing = Max(convert(int,BC.ISourcing)), BC.RevisionNo, AcknowledgeDate = Null, BC.WithOutOB,BKAcknowledgeDate = Max(BC.AcknowledgeDate)
	                    FROM BAck BC
	                    Group By BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, BC.ISourcing, BC.WithOutOB, BC.RevisionNo
	                    having BC.ISourcing = 1
                    ),
                    ACKList as
                    (
                        Select OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.BookingID,OSI.BookingNo, 
	                    RevisionNo = ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,
	                    RevStatus = Case When OSI.WithOutOB = 1 then 1 
                                            When Isnull(EL.FabBSCAckStatus,'') = 'Acknowledged' And Isnull(EL.FabBSCAckStatus,'') <> '' Then 1 Else 0 End,
	                    BKAcknowledgeDate = Max(OSI.BKAcknowledgeDate), FBAcknowledgeDate = Max(FBA.AcknowledgeDate), OSI.WithoutOB
                        From InHouseItemList OSI
	                    Left Join {DbNames.EPYSL}..ExportWorkOrderLifeCycleChild EL On EL.ExportOrderID = OSI.ExportOrderID And EL.BookingID = OSI.BookingID And EL.ContactID = OSI.ContactID
                        Inner Join FabricBookingAcknowledge FBA On FBA.BookingID = OSI.BookingID
                        Left Join FBookingAcknowledgeChild FBC On FBC.BookingID = OSI.BookingID
                        Where IsNull(FBC.SendToMktAck,0)=1 And IsNull(FBC.IsMktAck,0)=0 And IsNull(FBC.IsMktUnAck,0)=0 And IsNull(FBC.IsTxtAck,0) = 0 And IsNull(FBC.IsTxtAck,0) = 0 And FBA.Status=1
		                    Group By OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.ExportOrderID,ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,Isnull(EL.FabBSCAckStatus,''),
		                    OSI.BookingID,OSI.BookingNo, OSI.WithoutOB
                    )
                    ,       
                    F AS(
                    SELECT BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName BuyerTeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BookingNo, BK.WithoutOB
                    From ACKList BK
                    Inner Join {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = BK.BuyerTeamID
                    Group By BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BK.BookingNo, BK.WithoutOB
                    
                    )

                SELECT *,Count(*) Over() TotalRows FROM F";

            }
            else if (status == Status.UnAcknowledge)
            {

                sql = $@"With RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM As 
                    (
                        Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, BM.SubGroupID, WithOutOB = Convert(bit,0),
						EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
						from {DbNames.EPYSL}..BookingMaster BM
						Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
						left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
						where BM.IsCancel = 0 And BM.SubGroupID in (1,11,12) AND FBA.PreRevisionNo = BM.RevisionNo
						Union All
						Select BM.BookingID, BM.BookingNo, BM.ExportOrderID, BM.SupplierID, 1 SubGroupID, WithOutOB = Convert(bit,1),
						EOM.ExportOrderNo, EOM.StyleMasterID, BM.RevisionNo, EOM.BuyerID, EOM.BuyerTeamID
						from {DbNames.EPYSL}..SampleBookingMaster BM
						Inner Join RunningEWO EOM On EOM.ExportOrderID = BM.ExportOrderID
						left join FBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
						where BM.IsCancel = 0 And BM.ExportOrderID <> 0 AND FBA.PreRevisionNo = BM.RevisionNo
                    ),
                    ISG As
                    (
	                    Select * from {DbNames.EPYSL}..ItemSubGroup
	                    Where SubGroupName in ('Fabric','Collar','Cuff')
                    ),
                    BKList As
                    (
	                    Select BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, BookingID = Min(BM.BookingID),0 BOMMasterID, ISourcing = CAI.InHouse, BM.BuyerTeamID, ContactID = BM.SupplierID, BM.WithOutOB, RevisionNo = Max(BM.RevisionNo)
	                    FROM BM
	                    Inner Join ISG On ISG.SubGroupID = BM.SubGroupID
	                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI On CAI.ContactID = BM.SupplierID
	                    Where ISNULL(CAI.InHouse,0) = 1
	                    Group By BM.BookingNo, BM.ExportOrderID, BM.ExportOrderNo, CAI.InHouse, BM.BuyerTeamID, BM.SupplierID, BM.WithOutOB
                    ),BAck as (
	                    Select BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
	                    FROM BKList BC
                        Inner Join {DbNames.EPYSL}..BookingItemAcknowledge BIA On BIA.BookingID = BC.BookingID And BIA.WithoutOB = BC.WithOutOB
	                    Group By BC.BookingID, BC.BookingNo, BC.ExportOrderID, BC.ExportOrderNo, BC.BOMMasterID,BC.ContactID, BC.BuyerTeamID, BC.ISourcing, BIA.RevisionNo, BIA.SubGroupID, BIA.ItemGroupID, BIA.AcknowledgeDate, BIA.WithoutOB
                    ),InHouseItemList as (
	                    SELECT BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, ISourcing = Max(convert(int,BC.ISourcing)), BC.RevisionNo, AcknowledgeDate = Null, BC.WithOutOB,BKAcknowledgeDate = Max(BC.AcknowledgeDate)
	                    FROM BAck BC
	                    Group By BC.BOMMasterID,BC.ExportOrderID, BC.ExportOrderNo, BC.BookingID, BC.BookingNo, BC.BuyerTeamID, BC.SubGroupID, BC.ItemGroupID,BC.ContactID, BC.ISourcing, BC.WithOutOB, BC.RevisionNo
	                    having BC.ISourcing = 1
                    ),
                    ACKList as
                    (
                        Select OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.BookingID,OSI.BookingNo, 
	                    RevisionNo = ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,
	                    RevStatus = Case When OSI.WithOutOB = 1 then 1 
                                            When Isnull(EL.FabBSCAckStatus,'') = 'Acknowledged' And Isnull(EL.FabBSCAckStatus,'') <> '' Then 1 Else 0 End,
	                    BKAcknowledgeDate = Max(OSI.BKAcknowledgeDate), FBAcknowledgeDate = Max(FBA.AcknowledgeDate), OSI.WithoutOB
                        From InHouseItemList OSI
	                    Left Join {DbNames.EPYSL}..ExportWorkOrderLifeCycleChild EL On EL.ExportOrderID = OSI.ExportOrderID And EL.BookingID = OSI.BookingID And EL.ContactID = OSI.ContactID
                        Inner Join FabricBookingAcknowledge FBA On FBA.BookingID = OSI.BookingID
                        Left Join FBookingAcknowledgeChild FBC On FBC.BookingID = OSI.BookingID
                        Where IsNull(FBC.IsMktUnAck,0)=1 And IsNull(FBC.SendToTxtAck,0)=1 
		                    Group By OSI.ExportOrderID,OSI.ExportOrderNo,OSI.BOMMasterID,OSI.ExportOrderID,ISNULL(FBA.RevisionNo,0), OSI.BuyerTeamID,Isnull(EL.FabBSCAckStatus,''),
		                    OSI.BookingID,OSI.BookingNo, OSI.WithoutOB
                    )
                    ,       
                    F AS(
                    SELECT BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName BuyerTeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BookingNo, BK.WithoutOB
                    From ACKList BK
                    Inner Join {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = BK.BuyerTeamID
                    Group By BK.ExportOrderID,BK.ExportOrderNo,BK.BOMMasterID,BK.RevisionNo, CCT.TeamName,BK.RevStatus, 
                    BK.BKAcknowledgeDate, BK.FBAcknowledgeDate,BK.BookingID,BK.BookingNo, BK.WithoutOB
                    
                    )

                SELECT *,Count(*) Over() TotalRows FROM F";

            }
            else //Pending
            {
                sql = $@"WITH FBA1 AS
                        (
	                        SELECT a.YBookingID,a.YBookingNo,a.YBookingDate,a.BookingID,a.SubGroupID,
	                        a.Remarks,a.ExportOrderID, a.BuyerID, a.BuyerTeamID,a.CompanyID,
	                        b.BookingNo,b.BookingDate,b.ExportOrderNo,a.WithoutOB
                            FROM YarnBookingMaster_New a
	                        INNER JOIN {DbNames.EPYSL}..BookingMaster b ON b.BookingID = a.BookingID
	                        WHERE a.WithoutOB = 0 AND a.SubGroupID=1 AND a.BookingID NOT IN (SELECT AA.BookingID FROM FBookingAcknowledge AA)
                        ),
                        FBA2 AS
                        (
	                        SELECT a.YBookingID,a.YBookingNo,a.YBookingDate,a.BookingID,a.SubGroupID,
	                        a.Remarks,a.ExportOrderID, a.BuyerID, a.BuyerTeamID,a.CompanyID,
	                        b.BookingNo,b.BookingDate,ExportOrderNo='',a.WithoutOB
	                        FROM YarnBookingMaster_New a
	                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster b ON b.BookingID = a.BookingID
	                        WHERE a.WithoutOB = 1 AND a.SubGroupID=1 AND a.BookingID NOT IN (SELECT AA.BookingID FROM FBookingAcknowledge AA)
                        ),
                        FBA AS
                        (
	                        SELECT *FROM FBA1
	                        UNION
	                        SELECT *FROM FBA2
                        ),
                        F AS(
                        SELECT FBA.*,BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName, C.CompanyName
                        FROM FBA
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID)

                        SELECT *,Count(*) Over() TotalRows FROM F";
            }

            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            var fBookingAcknowledge = await _service.GetDataAsync<FBookingAcknowledge>(sql);
            return fBookingAcknowledge;
        }
        public async Task<List<FBookingAcknowledge>> GetLabDipPagedAsync(Status status, PaginationInfo paginationInfo, LoginUser AppUser)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BookingNo Desc" : paginationInfo.OrderBy;
            string sql = String.Empty;
            if (status == Status.Pending)
            {
                sql = $@"WITH BIMG As(
	                        Select BookingID, Min(ChildImgID) ChildImgID
	                        From {DbNames.EPYSL}..SampleBookingChildImage 
	                        Group By BookingID
                        ), 
                        IMG As(
	                        Select I.BookingID, I.ImagePath
	                        From BIMG
	                        Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                        ),
                        SBM AS
                        (
                            Select a.BookingID, a.BookingNo, a.BookingDate, a.RevisionNo,isnull(a.LabdipRevisionNo,0)LabdipRevisionNo, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID,
                            a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath
                            From {DbNames.EPYSL}..SampleBookingMaster a
                            Left Join IMG ON IMG.BookingID = a.BookingID
                            Where a.SampleID = 13 AND (ISNULL(a.LabdipAcknowledge,0) = 0 AND ISNULL(a.LabdipUnAcknowledge,0)=0) or a.RevisionNo<>isnull(a.LabdipRevisionNo,0)
                        ),
                        M AS (
	                        Select SBM.BookingID, SBM.BookingNo, SBM.BookingDate, SBM.SLNo, SBM.StyleNo, SBM.OrderQty, SBM.BuyerID, SBM.BuyerTeamID
	                        ,SBM.SupplierID,SBM.ExecutionCompanyID,FBC.ItemMasterID,FBC.ConsumptionID,FBC.SubGroupID,SBM.Remarks,SBM.SeasonID, SBM.AddedBy BookingBy
                            ,PendingRevision = (CASE WHEN FBA.PreRevisionNo <> SBM.RevisionNo THEN 'Booking Revision No ' + CONVERT(VARCHAR(10),SBM.RevisionNo) WHEN SBM.LabdipRevisionNo <> SBM.RevisionNo THEN 'Booking Revision No ' + CONVERT(VARCHAR(10),SBM.RevisionNo) ELSE '' END), SBM.ImagePath
	                        From SBM
	                        Inner Join {DbNames.EPYSL}..SampleType ST On SBM.SampleID = ST.SampleTypeID
	                        LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBM.BookingID
	                        LEFT JOIN FBookingAcknowledge FBA On FBA.BookingID = SBM.BookingID
	                        LEFT JOIN FreeConceptMaster FCM ON FCM.BookingID = FBA.BookingID
	                        Where FBA.FBAckID IS NULL or SBM.RevisionNo<>isnull(SBM.LabdipRevisionNo,0)
                        )
                        , F AS (
	                        SELECT FBA.FBAckID, M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty BookingQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
	                        ,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.Remarks, Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy
	                        ,M.PendingRevision, M.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
	                        FROM M
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
	                        LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID AND FBA.IsUnAcknowledge=1
	                        Inner Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
	                        LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID
	                        Group By M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
	                        , M.ExecutionCompanyID, CTO.ShortName , CCT.TeamName, C.CompanyName,M.Remarks, Supplier.ShortName,Season.SeasonName, M.BookingBy
	                        ,M.PendingRevision,FBA.FBAckID, M.ImagePath, Supplier.MappingCompanyID
                        )

                        SELECT *,Count(*) Over() TotalRows FROM F ";
            }
            else if (status == Status.Reject)
            {
                sql = $@"WITH BIMG As(
	                        Select BookingID, Min(ChildImgID) ChildImgID
	                        From {DbNames.EPYSL}..SampleBookingChildImage 
	                        Group By BookingID
                        ), 
                        IMG As(
	                        Select I.BookingID, I.ImagePath
	                        From BIMG
	                        Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                        ),
                         SBM AS
                        (
                            Select a.BookingID, a.BookingNo, a.BookingDate, a.RevisionNo, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID,
                            a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath,a.LabdipUnAcknowledgeReason
                            From {DbNames.EPYSL}..SampleBookingMaster a
                            Left Join IMG ON IMG.BookingID = a.BookingID
                            Where a.SampleID = 13 AND ISNULL(a.LabdipAcknowledge,0) = 0 AND ISNULL(a.LabdipUnAcknowledge,0)=1 AND a.RevisionNo=isnull(a.LabdipRevisionNo,0)
                        ),
                        M AS (
	                        Select SBM.BookingID, SBM.BookingNo, SBM.BookingDate, SBM.SLNo, SBM.StyleNo, SBM.OrderQty, SBM.BuyerID, SBM.BuyerTeamID
	                        ,SBM.SupplierID,SBM.ExecutionCompanyID,FBC.ItemMasterID,FBC.ConsumptionID,FBC.SubGroupID,SBM.Remarks,SBM.SeasonID, SBM.AddedBy BookingBy
                            ,PendingRevision = (CASE WHEN ISNULL(FBA.PreRevisionNo,0) <> ISNULL(SBM.RevisionNo,0) THEN 'Booking Revision No ' + CONVERT(VARCHAR(10),SBM.RevisionNo) ELSE '' END), SBM.ImagePath,SBM.LabdipUnAcknowledgeReason
	                        From SBM
	                        Inner Join {DbNames.EPYSL}..SampleType ST On SBM.SampleID = ST.SampleTypeID
	                        LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBM.BookingID
	                        LEFT JOIN FBookingAcknowledge FBA On FBA.BookingID = SBM.BookingID
	                        LEFT JOIN FreeConceptMaster FCM ON FCM.BookingID = FBA.BookingID
	                        --Where FBA.FBAckID IS NULL OR ISNULL(SBM.RevisionNo,0) > 0
                        )
                        , F AS (
	                        SELECT FBA.FBAckID, M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty BookingQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
	                        ,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.Remarks, Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy
	                        ,M.PendingRevision, M.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,M.LabdipUnAcknowledgeReason
	                        FROM M
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
	                        LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID AND FBA.IsUnAcknowledge=1
	                        Inner Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
	                        LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID
	                        Group By M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
	                        , M.ExecutionCompanyID, CTO.ShortName , CCT.TeamName, C.CompanyName,M.Remarks, Supplier.ShortName,Season.SeasonName, M.BookingBy
	                        ,M.PendingRevision,FBA.FBAckID, M.ImagePath, Supplier.MappingCompanyID,M.LabdipUnAcknowledgeReason
                        )

                        SELECT *,Count(*) Over() TotalRows FROM F ";
            }
            else if (status == Status.Revise)
            {
                sql = $@"With BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),
						R AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            where FBC.IsUnAcknowledge <> 1 AND SBM.SampleID = 13 AND FBC.PreRevisionNo <> SBM.RevisionNo AND SBM.LabdipAcknowledge=1
                        ),
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            WHERE FBC.IsUnAcknowledge <> 1 
	                        AND SBM.SampleID = 13 AND FBC.BookingID not in (select BookingID from R)
	                        --AND FBC.PreRevisionNo = SBM.RevisionNo 
	                        --AND FBC.PreRevisionNoLabdip = FBC.RevisionNoLabdip
                        )
                        SELECT * FROM F";
                /*
                 sql = $@"With BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            WHERE FBC.IsUnAcknowledge <> 1 
	                        AND SBM.SampleID = 13 
	                        AND SBM.LabdipAcknowledge=1
	                        --AND FBC.PreRevisionNo = SBM.RevisionNo 
	                        --AND FBC.PreRevisionNoLabdip = FBC.RevisionNoLabdip
                        )
                        SELECT * FROM F";
                 */
            }
            else if (status == Status.UnAcknowledge)
            {
                sql = $@"With BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),R AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            where FBC.IsUnAcknowledge <> 1 AND SBM.SampleID = 13 AND FBC.PreRevisionNo <> SBM.RevisionNo AND SBM.LabdipAcknowledge=1
                        ),
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,
                            FBC.UnAcknowledgeDate, E.EmployeeName UnAckByName, UnAcknowledgeReason = FBC.UnAcknowledgeReason,
                            ImagePath = ISNULL(SBC.ImagePath,''), SupplierName = Supplier.ShortName,
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, Season.SeasonName
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            LEFT JOIN {DbNames.EPYSL}..Employee E ON E.EmployeeCode = LU.EmployeeCode
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            LEFT Join {DbNames.EPYSL}..ContactSeason Season On Season.SeasonID = SBM.SeasonID
                            WHERE FBC.IsUnAcknowledge = 1 
	                        AND SBM.SampleID = 13  AND FBC.BookingID not in (select BookingID from R)
	                        --AND FBC.PreRevisionNo = SBM.RevisionNo
	                        AND FBC.PreRevisionNoLabdip = FBC.RevisionNoLabdip
                        )
                        SELECT * FROM F";
                /*
                 sql = $@"With BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,
                            FBC.UnAcknowledgeDate, E.EmployeeName UnAckByName, UnAcknowledgeReason = FBC.UnAcknowledgeReason,
                            ImagePath = ISNULL(SBC.ImagePath,''), SupplierName = Supplier.ShortName,
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, Season.SeasonName
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            LEFT JOIN {DbNames.EPYSL}..Employee E ON E.EmployeeCode = LU.EmployeeCode
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            LEFT Join {DbNames.EPYSL}..ContactSeason Season On Season.SeasonID = SBM.SeasonID
                            WHERE FBC.IsUnAcknowledge = 1 
	                        AND SBM.SampleID = 13 
	                        AND FBC.PreRevisionNo = SBM.RevisionNo
	                        AND FBC.PreRevisionNoLabdip = FBC.RevisionNoLabdip
                        )
                        SELECT * FROM F";
                 */
            }
            else if (status == Status.ReviseForAcknowledge)
            {
                sql = $@"With BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            where FBC.IsUnAcknowledge <> 1 AND SBM.SampleID = 13 AND FBC.PreRevisionNo <> SBM.RevisionNo AND SBM.LabdipAcknowledge=1
                        )
                        SELECT * FROM F";
                /*
                 sql = $@"With BIMG As(
                            Select BookingID, Min(ChildImgID) ChildImgID
                            From {DbNames.EPYSL}..SampleBookingChildImage
                            Group By BookingID
                        ),
                        F AS (
                            SELECT FBC.FBAckID, FBC.BookingID, FBC.BookingNo, FBC.BookingDate, FBC.SLNo, FBC.StyleNo, FBC.BookingQty, FBC.BuyerID, FBC.BuyerTeamID,
                            FBC.SupplierID, FBC.ExecutionCompanyID, FBC.DateAdded, SBM.AddedBy BookingBy, LU.Name AckByName,
                            CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName, 
                            ImagePath = ISNULL(SBC.ImagePath,''),
                            ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                            FROM FBookingAcknowledge FBC
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster SBM On SBM.BookingID = FBC.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBC.AddedBy
                            Left Join BIMG ON BIMG.BookingID = SBM.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingChildImage SBC ON SBC.ChildImgID = BIMG.ChildImgID
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBC.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBC.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBC.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBC.SupplierID
                            where FBC.IsUnAcknowledge != 1 AND SBM.SampleID = 13 AND FBC.PreRevisionNo <> SBM.RevisionNo
                        )
                        SELECT * FROM F";
                 */
            }
            else
            {
                sql = $@"WITH BIMG As(
	                        Select BookingID, Min(ChildImgID) ChildImgID
	                        From {DbNames.EPYSL}..SampleBookingChildImage 
	                        Group By BookingID
                        ), 
                        IMG As(
	                        Select I.BookingID, I.ImagePath
	                        From BIMG
	                        Inner Join {DbNames.EPYSL}..SampleBookingChildImage I On I.ChildImgID = BIMG.ChildImgID
                        ),
                        SBM AS
                        (
                            Select a.BookingID, a.BookingNo, a.BookingDate, a.RevisionNo, a.SLNo, a.StyleNo, a.BuyerID, a.BuyerTeamID, a.SupplierID,
                            a.ExecutionCompanyID, a.SeasonID, a.Remarks, a.OrderQty, a.AddedBy, a.SampleID, ISNULL(IMG.ImagePath,'') ImagePath,
                            a.LabdipAcknowledge, a.LabdipAcknowledgeBY, a.LabdipAcknowledgeDate
                            From {DbNames.EPYSL}..SampleBookingMaster a
                            Left Join IMG ON IMG.BookingID = a.BookingID
                            Where a.SampleID = 13 AND ISNULL(a.LabdipAcknowledge,0) = 1
                        ),
                        M AS (
	                        Select SBM.BookingID, SBM.BookingNo, SBM.BookingDate, SBM.SLNo, SBM.StyleNo, SBM.OrderQty, SBM.BuyerID, SBM.BuyerTeamID
                            ,SBM.LabdipAcknowledge, SBM.LabdipAcknowledgeBY, SBM.LabdipAcknowledgeDate
	                        ,SBM.SupplierID,SBM.ExecutionCompanyID,FBC.ItemMasterID,FBC.ConsumptionID,FBC.SubGroupID,SBM.Remarks,SBM.SeasonID, SBM.AddedBy BookingBy
                            ,PendingRevision = (CASE WHEN FBA.PreRevisionNo <> SBM.RevisionNo THEN 'Booking Revision No ' + CONVERT(VARCHAR(10),SBM.RevisionNo) ELSE '' END), SBM.ImagePath
	                        From SBM
	                        Inner Join {DbNames.EPYSL}..SampleType ST On SBM.SampleID = ST.SampleTypeID
	                        LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBM.BookingID
	                        LEFT JOIN FBookingAcknowledge FBA On FBA.BookingID = SBM.BookingID
	                        LEFT JOIN FreeConceptMaster FCM ON FCM.BookingID = FBA.BookingID
                            Where FBA.FBAckID IS NULL
                        )
                        , F AS (
	                        SELECT FBA.FBAckID, M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty BookingQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
	                        ,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.Remarks, Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy
	                        ,M.PendingRevision, M.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,M.LabdipAcknowledge, M.LabdipAcknowledgeBY, M.LabdipAcknowledgeDate, StatusText = ''
	                        FROM M
	                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
	                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
	                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
	                        LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
	                        Inner Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
	                        LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID
	                        Group By M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
	                        ,M.ExecutionCompanyID, CTO.ShortName , CCT.TeamName, C.CompanyName,M.Remarks, Supplier.ShortName,Season.SeasonName, M.BookingBy
	                        ,M.PendingRevision,FBA.FBAckID, M.ImagePath, Supplier.MappingCompanyID,M.LabdipAcknowledge, M.LabdipAcknowledgeBY, M.LabdipAcknowledgeDate
                        ),
                        RevisionList AS
                        (
	                        SELECT FBA.FBAckID, M.BookingID,M.BookingNo, M.BookingDate, M.SLNo, M.StyleNo, M.OrderQty BookingQty, M.BuyerID, M.BuyerTeamID, M.SupplierID
	                        ,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.Remarks, Supplier.ShortName [SupplierName],Season.SeasonName, BookingBy = M.AddedBy
	                        ,PendingRevision = 0, M.ImagePath, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,M.LabdipAcknowledge, M.LabdipAcknowledgeBY, M.LabdipAcknowledgeDate, StatusText = 'Revise'
                            FROM FBookingAcknowledge FBA
                            Inner Join {DbNames.EPYSL}..SampleBookingMaster M On M.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = FBA.AddedBy
                            LEFT JOIN {DbNames.EPYSL}..Employee E ON E.EmployeeCode = LU.EmployeeCode
                            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
                            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
                            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.ExecutionCompanyID
                            Inner Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBA.SupplierID
                            LEFT Join {DbNames.EPYSL}..ContactSeason Season On Season.SeasonID = M.SeasonID
                            WHERE M.SampleID = 13 
	                        AND FBA.PreRevisionNo = M.RevisionNo
	                        AND FBA.PreRevisionNoLabdip <> FBA.RevisionNoLabdip
                        ),
                        FinalList AS
                        (
	                        SELECT * FROM F
	                        UNION
	                        SELECT * FROM RevisionList
                        )
                        SELECT *,Count(*) Over() TotalRows FROM FinalList";

                orderBy = "Order By LabdipAcknowledgeDate Desc";
            }
            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            var fBookingAcknowledge = await _service.GetDataAsync<FBookingAcknowledge>(sql);
            return fBookingAcknowledge;
        }
        public async Task<CountListItem> GetListCountBBKI(EnumBDSAcknowledgeParamType menuType)
        {
            string query = "";

            switch (menuType)
            {
                case EnumBDSAcknowledgeParamType.BulkBookingYarnAllowance:
                    query = $@"
                    WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    PendingListAll AS
                    (
	                    SELECT a.BookingNo, a.ExportOrderID
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.IsApprovedByAllowance = 0 AND a.IsCheckByKnittingHead = 0 AND a.IsApprovedByProdHead = 0 AND a.IsApprovedByPMC = 0
                        AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND PB.ExportOrderID IS NULL
                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
                        BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,
                        a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance, 
                        ISNULL(SBM.BookingID,0), Convert(varchar(100),SBM.RevisionNo),SBM.RevisionNo,a.RivisionReason,a.RevisionNo,YB.IsRevised
			      ),
	                PendingList AS(
		                Select a.*
		                FROM PendingListAll a
	                ),


                SendForApprivalListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
					FROM FBookingAcknowledge a
					INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
					LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
					Outer Apply
					(
					    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					    ORDER BY EDD desc 
					)OBP
					LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
					LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
					LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
					LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
					LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
					LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
					LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
					 WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
					--AND a.IsUtilizationProposalSend=0 
					AND a.IsUtilizationProposalConfirmed=0
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
					GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),
					a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
					LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised,
					a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
					YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,SBM.RevisionNo,
					a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName, ISNULL(SBM.BookingID,0)
                   
				),
                SendForApprivalList AS(
	                Select a.*
	                FROM SendForApprivalListAll a
                ),

                RejectListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsRejectByAllowance = 1
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.RejectReasonAllowance, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                    
				),
                RejectList AS(
	                Select a.*
	                FROM RejectListAll a
                ),


                --For All List
              RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM AS
                    (
	                    SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                    BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                    ),
                    SBM AS
                    (
	                    SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                    SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                    ),
                    AllBooking AS
                    (
	                    SELECT * FROM BM
	                    UNION
	                    SELECT * FROM SBM
                    ),
                    OtherProps AS
                    (
	                    SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                    FROM RunningEWO R
	                    INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                    LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                    WHERE TE.EventDisplayName='Yarn booking'
	                    GROUP BY R.ExportOrderID
                    ),
                    FBooking AS
                    (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                    ),
                    FL AS
                    (
	                    SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                    AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                    IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                    FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                    CreatedByName = LUE1.EmployeeName, 
	                    FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                    FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                    FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                    StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                            WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                        WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                            WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                    WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                            WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                        WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                        WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                        WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                    WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                            ELSE '' END

	                    FROM AllBooking AB
	                    LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = FBA.KnittingCompleteBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                    WHERE PB.ExportOrderID IS NULL
                    ),
                    AllList AS
                    (
	                    SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                    FROM FL
	                    WHERE ISNULL(FL.StatusText,'') != ''
	                    GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                    ),
                FinalObj AS
                (
	                SELECT Pending = COUNT(PendingList.BookingNo), SendingForApproval = 0, 
	                Reject = 0, AllCount = 0
	                FROM PendingList
	                UNION
	                SELECT Pending = 0, SendingForApproval = COUNT(SendForApprivalList.BookingNo), 
	                Reject = 0, AllCount = 0
	                FROM SendForApprivalList
	                UNION
	                SELECT Pending = 0, SendingForApproval = 0, 
	                Reject = COUNT(RejectList.BookingNo), AllCount = 0
	                FROM RejectList
	                UNION
	                SELECT Pending = 0, SendingForApproval = 0, 
	                Reject = 0, AllCount = COUNT(AllList.BookingNo)
	                FROM AllList
                )
                SELECT Pending = SUM(Pending), SendingForApproval = SUM(SendingForApproval), Reject = SUM(Reject), AllCount = SUM(AllCount) FROM FinalObj";
                    break;
                case EnumBDSAcknowledgeParamType.BulkBookingCheck:
                    query = $@"WITH 
                PreBookingAdditionList AS
                (
	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..BookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID

	                UNION

	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID
                ),
                PendingListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
					Outer Apply
					(
					    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					    ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 and a.IsUtilizationProposalConfirmed=1
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0 AND a.IsRejectByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised,
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,SBM.RevisionNo,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName, ISNULL(SBM.BookingID,0)
				),
                PendingList AS(
	                Select a.*
	                FROM PendingListAll a
                ),

                CheckListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 0 AND a.IsApprovedByPMC = 0
                    AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
				),
                CheckList AS(
	                Select a.*
	                FROM CheckListAll a
                ),


                RejectListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsRejectByKnittingHead = 1
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.RejectReasonKnittingHead, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
			   ),
                RejectList AS(
	                Select a.*
	                FROM RejectListAll a
                ),


                --For All List
                RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM AS
                    (
	                    SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                    BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                    ),
                    SBM AS
                    (
	                    SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                    SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                    ),
                    AllBooking AS
                    (
	                    SELECT * FROM BM
	                    UNION
	                    SELECT * FROM SBM
                    ),
                    OtherProps AS
                    (
	                    SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                    FROM RunningEWO R
	                    INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                    LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                    WHERE TE.EventDisplayName='Yarn booking'
	                    GROUP BY R.ExportOrderID
                    ),
                    FBooking AS
                    (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                    ),
                    FL AS
                    (
	                    SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                    AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                    IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                    FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                    CreatedByName = LUE1.EmployeeName, 
	                    FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                    FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                    FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                    StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                            WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                        WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                            WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                    WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                            WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                        WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                        WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                        WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                    WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                            ELSE '' END

	                    FROM AllBooking AB
	                    LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = FBA.KnittingCompleteBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                    WHERE PB.ExportOrderID IS NULL
                    ),
                    AllList AS
                    (
	                    SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                    FROM FL
	                    WHERE ISNULL(FL.StatusText,'') != ''
	                    GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                    ),
                FinalObj AS
                (
	                SELECT Pending = COUNT(PendingList.BookingNo), CheckCount = 0, 
	                Reject = 0, AllCount = 0
	                FROM PendingList
	                UNION
	                SELECT Pending = 0, CheckCount = COUNT(CheckList.BookingNo), 
	                Reject = 0, AllCount = 0
	                FROM CheckList
	                UNION
	                SELECT Pending = 0, CheckCount = 0, 
	                Reject = COUNT(RejectList.BookingNo), AllCount = 0
	                FROM RejectList
	                UNION
	                SELECT Pending = 0, CheckCount = 0, 
	                Reject = 0, AllCount = COUNT(AllList.BookingNo)
	                FROM AllList
                )
                SELECT Pending = SUM(Pending), CheckCount = SUM(CheckCount), Reject = SUM(Reject), AllCount = SUM(AllCount) FROM FinalObj";
                    break;

                case EnumBDSAcknowledgeParamType.BulkBookingApprove:
                    query = $@"WITH 
                PreBookingAdditionList AS
                (
	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..BookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID

	                UNION

	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID
                ),
                PendingListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 0 AND a.IsApprovedByPMC = 0
                    AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                ),
                PendingList AS(
	                Select a.*
	                FROM PendingListAll a
                ),

                List1All AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
	                INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 1 AND a.IsApprovedByPMC = 0
                    AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                    AND a.ExportOrderID > 0
	                AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                ),
                List1 AS(
	                Select a.*
	                FROM List1All a
                ),
                RejectByBBKI AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
	                INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                Outer Apply
	                (
	                Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
	                INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
	                )OEC
	                Outer Apply 
	                (
	                Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
	                ORDER BY EDD desc 
	                )OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    AND a.IsUnAcknowledge = 1 AND a.IsInternalRevise = 0
                    AND a.ExportOrderID > 0
	                AND a.PreRevisionNo = FBA.RevisionNo
                    AND FBA.UnAcknowledge = 0
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.UnAcknowledgeReason, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason,
	                a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                ),
                CompleteList AS
                (
	                SELECT * FROM List1
                    UNION
	                SELECT * FROM RejectByBBKI

                ),
                ApprovedList AS(
	                SELECT FBA.BookingNo
	                FROM CompleteList FBA
                ),
                CheckListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 0 AND a.IsApprovedByPMC = 0
                    AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                ),
                CheckList AS(
	                Select a.*
	                FROM CheckListAll a
                ),


                RejectListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsRejectByProdHead = 1
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.RejectReasonProdHead, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                ),
                RejectList AS(
	                Select a.*
	                FROM RejectListAll a
                ),


                --For All List
                RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM AS
                    (
	                    SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                    BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                    ),
                    SBM AS
                    (
	                    SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                    SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                    ),
                    AllBooking AS
                    (
	                    SELECT * FROM BM
	                    UNION
	                    SELECT * FROM SBM
                    ),
                    OtherProps AS
                    (
	                    SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                    FROM RunningEWO R
	                    INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                    LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                    WHERE TE.EventDisplayName='Yarn booking'
	                    GROUP BY R.ExportOrderID
                    ),
                    FBooking AS
                    (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                    ),
                    FL AS
                    (
	                    SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                    AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                    IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                    FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                    CreatedByName = LUE1.EmployeeName, 
	                    FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                    FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                    FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                    StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                            WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                        WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                            WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                    WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                            WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                        WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                        WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                        WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                    WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                            ELSE '' END

	                    FROM AllBooking AB
	                    LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = FBA.KnittingCompleteBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                    WHERE PB.ExportOrderID IS NULL
                    ),
                    AllList AS
                    (
	                    SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                    FROM FL
	                    WHERE ISNULL(FL.StatusText,'') != ''
	                    GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                    ),
                FinalObj AS
                (
	                SELECT Pending = COUNT(PendingList.BookingNo), Approved = 0, 
	                Reject = 0, AllCount = 0
	                FROM PendingList
	                UNION
	                SELECT Pending = 0, Approved = COUNT(ApprovedList.BookingNo), 
	                Reject = 0, AllCount = 0
	                FROM ApprovedList
	                UNION
	                SELECT Pending = 0, Approved = 0, 
	                Reject = COUNT(RejectList.BookingNo), AllCount = 0
	                FROM RejectList
	                UNION
	                SELECT Pending = 0, Approved = 0, 
	                Reject = 0, AllCount = COUNT(AllList.BookingNo)
	                FROM AllList
                )
                SELECT Pending = SUM(Pending), Approved = SUM(Approved), Reject = SUM(Reject), AllCount = SUM(AllCount) FROM FinalObj";
                    break;

                case EnumBDSAcknowledgeParamType.BulkBookingFinalApprove:
                    query = $@"WITH 
                PreBookingAdditionList AS
                (
	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..BookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID

	                UNION

	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID
                ),
                List1All AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
	                FROM FBookingAcknowledge a
	                INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                Outer Apply
	                (
		                Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
		                INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
		                Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
	                )OEC
	                Outer Apply 
	                (
		                Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
		                ORDER BY EDD desc 
	                )OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 AND a.IsInternalRevise = 0
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1 AND a.IsApprovedByProdHead = 1 AND a.IsApprovedByPMC = 0
                    AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                    AND a.ExportOrderID > 0
	                AND a.PreRevisionNo = FBA.RevisionNo
                    AND FBA.UnAcknowledge = 0
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, SBM.RevisionNo,a.RevisionNo, ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason,
	                a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                ),
                List1 AS(
	                Select a.*
	                FROM List1All a
                ),



                RejectByKIAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
	                INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                Outer Apply
	                (
	                Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
	                INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
	                )OEC
	                Outer Apply 
	                (
	                Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
	                ORDER BY EDD desc 
	                )OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    AND a.IsUnAcknowledge = 1 AND a.IsInternalRevise = 0
                    AND a.ExportOrderID > 0
	                AND a.PreRevisionNo = FBA.RevisionNo
                    AND FBA.UnAcknowledge = 0
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), a.UnAcknowledgeReason, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
	                YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason,
	                a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance
                ),
                RejectByKI AS(
	                Select a.*
	                FROM RejectByKIAll a
                ),


                CompleteList AS
                (
	                SELECT * FROM List1
                    UNION
	                SELECT * FROM RejectByKI
                ),
                PendingList AS(
	                SELECT FBA.BookingNo
	                FROM CompleteList FBA
                ),
                ApproveListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
                    Outer Apply
                    (
	                    Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                    Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
                    ) OEC
                    Outer Apply 
                    (
	                    Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
	                    ORDER BY EDD desc 
                    ) OBP
                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN {DbNames.EPYSL}..LoginUser U ON U.UserCode=a.ApprovedByPMC
                    LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = U.EmployeeCode
                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsApprovedByPMC = 1
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                    AND YB.IsAddition = 0 AND YB.IsRevised = 0
                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,
                    ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
                    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
                    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,
                    a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,convert(varchar, a.ApprovedDatePMC, 20),LUE.EmployeeName,
                    ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason
                ),
                ApproveList AS(
	                Select a.*
	                FROM ApproveListAll a
                ),

                RejectListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
                    FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                    AND a.IsRejectByPMC = 1
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                    AND YB.IsAddition = 0
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.RejectReasonPMC, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0)
                ),
                RejectList AS(
	                Select a.*
	                FROM RejectListAll a
                ),



                --For All List
               RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM AS
                    (
	                    SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                    BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                    ),
                    SBM AS
                    (
	                    SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                    SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                    ),
                    AllBooking AS
                    (
	                    SELECT * FROM BM
	                    UNION
	                    SELECT * FROM SBM
                    ),
                    OtherProps AS
                    (
	                    SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                    FROM RunningEWO R
	                    INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                    LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                    WHERE TE.EventDisplayName='Yarn booking'
	                    GROUP BY R.ExportOrderID
                    ),
                    FBooking AS
                    (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                    ),
                    FL AS
                    (
	                    SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                    AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                    IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                    FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                    CreatedByName = LUE1.EmployeeName, 
	                    FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                    FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                    FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                    StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                            WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                        WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                            WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                    WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                            WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                        WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                        WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                        WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                    WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                            ELSE '' END

	                    FROM AllBooking AB
	                    LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = FBA.KnittingCompleteBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                    WHERE PB.ExportOrderID IS NULL
                    ),
                    AllList AS
                    (
	                    SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                    FROM FL
	                    WHERE ISNULL(FL.StatusText,'') != ''
	                    GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                    ),
                FinalObj AS
                (
	                SELECT Pending = COUNT(PendingList.BookingNo), Approved = 0, 
	                Reject = 0, AllCount = 0
	                FROM PendingList
	                UNION
	                SELECT Pending = 0, Approved = COUNT(ApproveList.BookingNo), 
	                Reject = 0, AllCount = 0
	                FROM ApproveList
	                UNION
	                SELECT Pending = 0, Approved = 0, 
	                Reject = COUNT(RejectList.BookingNo), AllCount = 0
	                FROM RejectList
	                UNION
	                SELECT Pending = 0, Approved = 0, 
	                Reject = 0, AllCount = COUNT(AllList.BookingNo)
	                FROM AllList
                )
                SELECT Pending = SUM(Pending), Approved = SUM(Approved), Reject = SUM(Reject), AllCount = SUM(AllCount) FROM FinalObj";
                    break;
                case EnumBDSAcknowledgeParamType.BulkBookingUtilizationProposal:
                    query = $@"WITH 

                PreBookingAdditionList AS
                (
	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..BookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID

	                UNION

	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID
                ),
                UtilizationProposalListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
					FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
					Outer Apply
					(
					Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                    AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
					--AND a.IsUtilizationProposalSend=0 
					AND a.IsUtilizationProposalConfirmed=0
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised,
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,SBM.RevisionNo,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName, ISNULL(SBM.BookingID,0)
		
				),
                UtilizationProposalList AS(
	                Select a.*
	                FROM UtilizationProposalListAll a
                ),


                --For All List
                RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM AS
                    (
	                    SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                    BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                    ),
                    SBM AS
                    (
	                    SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                    SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                    ),
                    AllBooking AS
                    (
	                    SELECT * FROM BM
	                    UNION
	                    SELECT * FROM SBM
                    ),
                    OtherProps AS
                    (
	                    SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                    FROM RunningEWO R
	                    INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                    LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                    WHERE TE.EventDisplayName='Yarn booking'
	                    GROUP BY R.ExportOrderID
                    ),
                    FBooking AS
                    (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                    ),
                    FL AS
                    (
	                    SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                    AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                    IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                    FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                    CreatedByName = LUE1.EmployeeName, 
	                    FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                    FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                    FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                    StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                            WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                        WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                            WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                    WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                            WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                        WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                        WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                        WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                    WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                            ELSE '' END

	                    FROM AllBooking AB
	                    LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = FBA.KnittingCompleteBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                    WHERE PB.ExportOrderID IS NULL
                    ),
                    AllList AS
                    (
	                    SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                    FROM FL
	                    WHERE ISNULL(FL.StatusText,'') != ''
	                    GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                    ),
                FinalObj AS
                (
	                SELECT UtilizationProposalPending = COUNT(UtilizationProposalList.BookingNo),AllCount = 0
	                FROM UtilizationProposalList
	                UNION
	                SELECT UtilizationProposalPending = 0, AllCount = COUNT(AllList.BookingNo)
	                FROM AllList
                )
                SELECT UtilizationProposalPending = SUM(UtilizationProposalPending), AllCount = SUM(AllCount) FROM FinalObj";
                    break;
                case EnumBDSAcknowledgeParamType.BulkBookingUtilizationConfirmation:
                    query = $@"WITH 

                PreBookingAdditionList AS
                (
	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..BookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID

	                UNION

	                SELECT BM.ExportOrderID
	                FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                AND ISNULL(BM.AdditionalBooking,0) > 0 
	                AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                GROUP BY BM.ExportOrderID
                ),
                UtilizationConfirmationPendingListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
	                FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
					Outer Apply
					(
					Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 and a.IsUtilizationProposalConfirmed=0
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised,
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,SBM.RevisionNo,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName,ISNULL(SBM.BookingID,0)
                    
				),
                UtilizationConfirmationPendingList AS(
	                Select a.*
	                FROM UtilizationConfirmationPendingListAll a
                ),


                UtilizationConfirmedListAll AS
                (
	                SELECT a.BookingNo, a.ExportOrderID
	                 FROM FBookingAcknowledge a
                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
				    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
					LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
					Outer Apply
					(
					Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
					INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
					Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
					)OEC
					Outer Apply 
					(
					Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
					ORDER BY EDD desc 
					)OBP
	                LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
					LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = a.AddedBy
	                LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = LU.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LUAPMC ON LUAPMC.UserCode = a.ApprovedByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LUAPMCE ON LUAPMCE.EmployeeCode = LUAPMC.EmployeeCode
	                LEFT JOIN {DbNames.EPYSL}..LoginUser LURPMC ON LURPMC.UserCode = a.RejectByPMC
	                LEFT JOIN {DbNames.EPYSL}..Employee LURPMCE ON LURPMCE.EmployeeCode = LURPMC.EmployeeCode
                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 and a.IsUtilizationProposalConfirmed=1
                    AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 0
                    AND a.ExportOrderID > 0
                    AND a.PreRevisionNo = FBA.RevisionNo
                    AND PB.ExportOrderID IS NULL
	                GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
					a.IsApprovedByPMC,a.IsRejectByPMC,a.IsApprovedByProdHead,a.IsRejectByProdHead,Convert(varchar(100),SBM.RevisionNo),
	                a.IsCheckByKnittingHead,a.IsRejectByKnittingHead,a.IsApprovedByAllowance,a.IsRejectByAllowance, a.IsKnittingComplete,
	                LUE.EmployeeName,LUAPMCE.EmployeeName,LURPMCE.EmployeeName,YB.IsRevised,
	                a.RejectReasonPMC,a.RejectReasonProdHead,a.RejectReasonKnittingHead,a.RejectReasonAllowance, a.IsUnAcknowledge,a.UnAcknowledgeReason,OBP.CalendarDays,OBP.EDD,OEC.EventDate,
				    YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,a.RevisionNo,a.RevisionDate,
				    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,a.RejectDatePMC,a.ApprovedDatePMC,LUE.EmployeeName,ISNULL(SBM.BookingID,0)
			    ),
                UtilizationConfirmedList AS(
	                Select a.*
	                FROM UtilizationConfirmedListAll a
                ),

                --For All List
                RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM AS
                    (
	                    SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                    BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                    ),
                    SBM AS
                    (
	                    SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                    SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                    ),
                    AllBooking AS
                    (
	                    SELECT * FROM BM
	                    UNION
	                    SELECT * FROM SBM
                    ),
                    OtherProps AS
                    (
	                    SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                    FROM RunningEWO R
	                    INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                    LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                    WHERE TE.EventDisplayName='Yarn booking'
	                    GROUP BY R.ExportOrderID
                    ),
                    FBooking AS
                    (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                    ),
                    FL AS
                    (
	                    SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                    AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                    IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                    FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                    CreatedByName = LUE1.EmployeeName, 
	                    FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                    FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                    FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                    StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                            WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                        WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                            WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                    WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                            WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                        WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                        WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                        WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                    WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                            ELSE '' END

	                    FROM AllBooking AB
	                    LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = FBA.KnittingCompleteBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                    WHERE PB.ExportOrderID IS NULL
                    ),
                    AllList AS
                    (
	                    SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                    FROM FL
	                    WHERE ISNULL(FL.StatusText,'') != ''
	                    GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                    ),
                FinalObj AS
                (
	                SELECT UtilizationConfirmationPending = COUNT(UtilizationConfirmationPendingList.BookingNo),UtilizationConfirmed=0,AllCount = 0
	                FROM UtilizationConfirmationPendingList
	                UNION
	                SELECT UtilizationConfirmationPending=0,UtilizationConfirmed = COUNT(UtilizationConfirmedList.BookingNo),AllCount = 0
	                FROM UtilizationConfirmedList
	                UNION
	                SELECT UtilizationConfirmationPending = 0,UtilizationConfirmed=0, AllCount = COUNT(AllList.BookingNo)
	                FROM AllList
                )
                SELECT UtilizationConfirmationPending = SUM(UtilizationConfirmationPending),UtilizationConfirmed = SUM(UtilizationConfirmed), AllCount = SUM(AllCount) FROM FinalObj";
                    break;
                default:

                    //menuType == EnumBDSAcknowledgeParamType.BulkBookingAck

                    query = $@"
                 
                    WITH 
                    PreBookingAdditionList AS
                    (
	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..BookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID

	                    UNION

	                    SELECT BM.ExportOrderID
	                    FROM {DbNames.EPYSL}..SampleBookingMaster BM
	                    WHERE ISNULL(BM.ExportOrderID,0) > 0 
	                    AND ISNULL(BM.AdditionalBooking,0) > 0 
	                    AND CONVERT(date, BM.BookingDate) < CONVERT(date,'{_startingDate}')
	                    GROUP BY BM.ExportOrderID
                    ),
                    PendingList AS
                    (
	                    SELECT a.BookingNo, a.ExportOrderID
	                    FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupID = a.SubGroupID
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = a.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = a.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = a.BuyerTeamID
	                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.IsAddition = 0
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE (BM.BookingDate >= '{_startingDate}' OR SBM.BookingDate >= '{_startingDate}') AND a.IsUnAcknowledge = 0 
	                    AND a.IsKnittingComplete = 0
	                    AND a.ExportOrderID > 0
	                    AND (YB.YBookingID IS NULL OR (ISNULL(YB.YBookingID,0) = 0 AND FBA.RevisionNo > 0))
	                    AND a.PreRevisionNo = FBA.RevisionNo
	                    AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
	                    AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID,a.BuyerID, a.BuyerTeamID, b.CompanyID,
	                    ISNULL(CTO.ShortName,''), ISNULL(CCT.TeamName,''), a.IsSample,a.RevisionDate,
	                    BM.RevisionNo, Convert(varchar(100),SBM.RevisionNo),
	                    ISNULL(SBM.BookingID,0)
                    ),
                    DraftList AS
                    (
	                    SELECT a.BookingNo, a.ExportOrderID
	                    FROM FBookingAcknowledge a
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE (BM.BookingDate >= '{_startingDate}' OR SBM.BookingDate >= '{_startingDate}') AND YB.YBookingID IS NOT NULL
	                    AND	a.IsKnittingComplete = 0 
	                    AND a.ExportOrderID > 0
	                    AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        --AND a.IsUnAcknowledge = 0
	                    AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID,YB.YBookingNo,a.BuyerID,a.BuyerTeamID, a.IsSample, a.PreRevisionNo, FBA.RevisionNo,
	                    ISNULL(BM.RevisionNo,0), ISNULL(SBM.RevisionNo,0),BM.RevisionNo,SBM.RevisionNo
                    ),
                    SendingForApprovalList AS
                    (
	                    SELECT a.BookingNo, YB.YBookingNo, a.ExportOrderID
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.IsApprovedByAllowance = 0 AND a.IsCheckByKnittingHead = 0 AND a.IsApprovedByProdHead = 0 AND a.IsApprovedByPMC = 0
                        AND a.IsRejectByAllowance = 0 AND a.IsRejectByKnittingHead = 0 AND a.IsRejectByProdHead = 0 AND a.IsRejectByPMC = 0
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),
	                    BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,
	                    a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance, 
	                    ISNULL(SBM.BookingID,0), Convert(varchar(100),SBM.RevisionNo),SBM.RevisionNo,a.RivisionReason,a.RevisionNo,YB.IsRevised
                    ),
                    RejectList AS
                    (
	                    SELECT a.BookingNo, a.ExportOrderID
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND (a.IsUnAcknowledge = 1 OR a.IsRejectByPMC = 1) AND a.IsInternalRevise = 0
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
	                    AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, b.CompanyID,a.UnAcknowledgeReason, a.IsSample, 
	                    YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,
	                    a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,
	                    ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),YB.IsRevised    
                    ),
                    ApprovedList AS
                    (
                        SELECT a.BookingNo, a.ExportOrderID
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                        LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
                        Outer Apply
                        (
	                        Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
	                        INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                        Where OECL.ExportOrderID=a.ExportOrderID and TE.EventDisplayName='Yarn booking'
                        ) OEC
                        Outer Apply 
                        (
	                        Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
	                        ORDER BY EDD desc 
                        ) OBP
                        LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN {DbNames.EPYSL}..LoginUser U ON U.UserCode=a.ApprovedByPMC
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = U.EmployeeCode
                        WHERE FBA.AcknowledgeDate >= '{_startingDate}' 
                        AND a.IsUnAcknowledge = 0 AND a.IsKnittingComplete = 1 
                        AND a.IsApprovedByPMC = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND YB.IsAddition = 0 AND YB.IsRevised = 0
                        GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.IsSample, YB.YBookingNo,
                        ISNULL(a.IsReviseBBKI,0),OBP.CalendarDays,OBP.EDD,OEC.EventDate,
                        YB.IsAddition,YB.AdditionNo,BM.RevisionNo,BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
                        a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,a.IsRejectByPMC,
                        a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,convert(varchar, a.ApprovedDatePMC, 20),LUE.EmployeeName,
                        ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),YB.IsRevised,YB.RevisionNo, YB.RevisedDate, a.DateAdded,a.RivisionReason
                    ),
                    InternalRejectList AS
                    (
	                    SELECT a.BookingNo, a.ExportOrderID
                        FROM FBookingAcknowledge a
                        INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = a.BookingID AND FBA.SubGroupId = a.SubGroupId
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = a.BookingID
	                    LEFT JOIN FreeConceptMaster b ON b.BookingID = a.BookingID
                        LEFT JOIN YarnBookingMaster_New YB ON YB.BookingID = a.BookingID AND YB.SubGroupID = a.SubGroupID AND YB.IsAddition = 0
                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = a.ExportOrderID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND (a.IsRejectByAllowance = 1 OR
		                        a.IsRejectByKnittingHead = 1 OR
		                        a.IsRejectByProdHead = 1 OR 
								(a.IsAllocationInternalRevise = 1 AND a.IsApprovedByAllowance = 1 AND a.IsCheckByKnittingHead = 1
								AND a.IsUtilizationProposalConfirmed = 1 AND a.IsApprovedByProdHead = 1
								AND a.IsApprovedByPMC = 1) OR
		                        (a.IsInternalRevise = 1 AND a.IsRejectByPMC = 0))
			                    OR YB.UnAcknowledge = 1
                        AND a.ExportOrderID > 0
                        AND a.PreRevisionNo = FBA.RevisionNo
                        AND a.PreRevisionNoBBKI = a.RevisionNoBBKI
                        AND PB.ExportOrderID IS NULL
	                    GROUP BY a.BookingNo, a.ExportOrderID, a.BuyerID, a.BuyerTeamID, a.UnAcknowledgeReason, a.IsSample, 
	                    YB.YBookingNo,ISNULL(a.IsReviseBBKI,0),BM.RevisionNo,FBA.RevisionNo,a.RevisionNo,a.RevisionDate,
	                    a.IsRejectByKnittingHead,a.RejectReasonKnittingHead,a.IsRejectByProdHead,a.RejectReasonProdHead,
	                    a.IsRejectByPMC,a.RejectReasonPMC,a.IsRejectByAllowance,a.RejectReasonAllowance,YB.UnAcknowledge,YB.UnAckReason,
	                    ISNULL(SBM.BookingID,0),Convert(varchar(100),SBM.RevisionNo), ISNULL(SBM.BookingID,0),a.IsInternalRevise,a.InternalReviseReason,YB.IsRevised,
                        a.IsAllocationInternalRevise, a.AllocationInternalReviseReason     
                    ),
                    --For All List (OK)
                    RunningEWO As
                    (
	                    Select EOM.ExportOrderID, EOM.ExportOrderNo, EOM.StyleMasterID, EOM.BuyerID, EOM.BuyerTeamID
	                    From {DbNames.EPYSL}..ExportOrderMaster EOM
	                    Where EOM.EWOStatusID = 130
                    ),
                    BM AS
                    (
	                    SELECT BM.BookingNo, BookingDate = MIN(BM.BookingDate), IsSample = 0,
	                    BM.ExportOrderID, BM.BuyerID, BM.BuyerTeamID, BM.CompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = BM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND BM.ExportOrderID > 0 AND BM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY BM.BookingNo,BM.ExportOrderID,BM.BuyerID,BM.BuyerTeamID,BM.CompanyID
                    ),
                    SBM AS
                    (
	                    SELECT SBM.BookingNo, BookingDate = MIN(SBM.BookingDate), IsSample = 1,
	                    SBM.ExportOrderID, SBM.BuyerID, SBM.BuyerTeamID, CompanyID = SBM.ExecutionCompanyID
	                    FROM RunningEWO EOM
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.ExportOrderID = EOM.ExportOrderID
	                    INNER JOIN FabricBookingAcknowledge FBA ON FBA.BookingID = SBM.BookingID
	                    WHERE FBA.AcknowledgeDate >= '{_startingDate}' AND SBM.ExportOrderID > 0 AND SBM.IsCancel = 0 AND FBA.Status=1
	                    GROUP BY SBM.BookingNo,SBM.ExportOrderID,SBM.BuyerID,SBM.BuyerTeamID,SBM.ExecutionCompanyID
                    ),
                    AllBooking AS
                    (
	                    SELECT * FROM BM
	                    UNION
	                    SELECT * FROM SBM
                    ),
                    OtherProps AS
                    (
	                    SELECT R.ExportOrderID,CalendarDays = MAX(OBP.CalendarDays),EDD = MAX(OBP.EDD), EventDate = MAX(OECL.EventDate)
	                    FROM RunningEWO R
	                    INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID = R.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID = OECL.EventID
	                    LEFT JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID = OECL.OrderBankMasterID
	                    WHERE TE.EventDisplayName='Yarn booking'
	                    GROUP BY R.ExportOrderID
                    ),
                    FBooking AS
                    (
                            SELECT FBA.BookingNo, 
							YBookingNo = MAX(YBM.YBookingNo), 
							IsKnittingComplete = MAX(CAST(FBA.IsKnittingComplete AS INT)),
	                        IsUnAcknowledge = MAX(CAST(FBA.IsUnAcknowledge AS INT)), 
							UnAcknowledgeBy = MAX(CAST(FBA.UnAcknowledgeBy AS INT)),
							IsApprovedByAllowance = MAX(CAST(FBA.IsApprovedByAllowance AS INT)),
							IsUtilizationProposalConfirmed = MAX(CAST(FBA.IsUtilizationProposalConfirmed AS INT)), 
							IsCheckByKnittingHead = MAX(CAST(FBA.IsCheckByKnittingHead AS INT)), 
							IsApprovedByProdHead = MAX(CAST(FBA.IsApprovedByProdHead AS INT)), 
							IsApprovedByPMC = MAX(CAST(FBA.IsApprovedByPMC AS INT)), 
							IsRejectByAllowance = MAX(CAST(FBA.IsRejectByAllowance AS INT)), 
							IsRejectByKnittingHead = MAX(CAST(FBA.IsRejectByKnittingHead AS INT)), 
							IsRejectByProdHead = MAX(CAST(FBA.IsRejectByProdHead AS INT)), 
							IsInternalRevise = MAX(CAST(FBA.IsInternalRevise AS INT)), 
							IsRejectByPMC = MAX(CAST(FBA.IsRejectByPMC AS INT)), 
	                        KnittingCompleteBy = MAX(ISNULL(FBA.KnittingCompleteBy,0)), 
							RejectByPMC = MAX(ISNULL(FBA.RejectByPMC,0)),
	                        BookingType = case when MAX(CAST(YBM.IsAddition AS INT)) = 1 then 'Add-'+Convert(varchar(100),MAX(YBM.AdditionNo)) when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then 'Rev-'+Convert(varchar(100),MAX(ISNULL(FBA.RevisionNo,0))) else 'Main' end,
	                        YarnBookingRevisionDate = case when MAX(ISNULL(YBM.RevisionNo,0)) > 0 then Convert(VARCHAR(100),Format(MAX(YBM.RevisedDate),'yyyy-MM-dd HH:mm')) else '' end,
                            RevisionDate = case when MAX(ISNULL(FBA.RevisionNo,0)) > 0 then Format(MAX(FBA.RevisionDate),'yyyy-MM-dd HH:mm') else null end,
                            FBAcknowledgeDate = MAX(FBA.DateAdded),
	                        RejectReason = case when MAX(CAST(FBA.IsRejectByKnittingHead AS INT)) = 1 then MAX(FBA.RejectReasonKnittingHead) when MAX(CAST(FBA.IsRejectByProdHead AS INT))=1 then MAX(FBA.RejectReasonProdHead) when MAX(CAST(FBA.IsRejectByPMC AS INT)) = 1 then MAX(FBA.RejectReasonPMC) when MAX(CAST(FBA.IsRejectByAllowance AS INT)) = 1 then MAX(FBA.RejectReasonAllowance) else '' end,
	                        CalendarDays = MAX(OP.CalendarDays),
							FirstShipmentDate = MAX(OP.EDD),
							YarnBookingDate = MAX(OP.EventDate),

	                        PMCApprovedRejectedBy = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN MAX(LUEA.EmployeeName) ELSE MAX(LUER.EmployeeName) END,
	                        ApproveRejectDatePMC = CASE WHEN ISNULL(MAX(FBA.ApprovedByPMC),0) > 0 THEN CAST(MAX(FBA.ApprovedDatePMC) AS DATE) ELSE CAST(MAX(FBA.RejectDatePMC) AS DATE) END

	                        FROM FBookingAcknowledge FBA
	                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                        LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                            LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                        LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = FBA.ExportOrderID
	                        LEFT JOIN OtherProps OP ON OP.ExportOrderID = FBA.ExportOrderID

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UA ON UA.UserCode = FBA.ApprovedByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUEA ON LUEA.EmployeeCode = UA.EmployeeCode

	                        LEFT JOIN {DbNames.EPYSL}..LoginUser UR ON UR.UserCode = FBA.RejectByPMC
	                        LEFT JOIN {DbNames.EPYSL}..Employee LUER ON LUER.EmployeeCode = UR.EmployeeCode
                            WHERE FBA.DateAdded >= '{_startingDate}'
                            AND PB.ExportOrderID IS NULL
							GROUP BY FBA.BookingNo
                    ),
                    FL AS
                    (
	                    SELECT AB.BookingNo, AB.BookingDate, AB.IsSample,
	                    AB.ExportOrderID, AB.BuyerID, AB.BuyerTeamID, AB.CompanyID,
	                    IsRevisionValid = CASE WHEN FBA.IsKnittingComplete = 1 THEN 1 ELSE 0 END,
	                    FBA.YBookingNo, BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
	                    CreatedByName = LUE1.EmployeeName, 
	                    FBA.BookingType, FBA.YarnBookingRevisionDate, FBA.RevisionDate, FBA.FBAcknowledgeDate,
	                    FBA.CalendarDays,FBA.FirstShipmentDate,FBA.YarnBookingDate,
	                    FBA.RejectReason, FBA.PMCApprovedRejectedBy, FBA.ApproveRejectDatePMC,

	                    StatusText = CASE   WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Unacknowledged'
                                            WHEN ISNULL(FBA.IsKnittingComplete,0) = 0 THEN 'Pending For Knitting Info'
                                            WHEN ISNULL(FBA.IsUnAcknowledge,0) = 1 THEN 'Booking Rejected By ' + LUE.EmployeeName
					                        WHEN (FBA.IsRejectByAllowance = 1 OR FBA.IsRejectByKnittingHead = 1 OR FBA.IsRejectByProdHead = 1 OR (FBA.IsInternalRevise = 1 AND FBA.IsRejectByPMC = 0)) THEN 'Revision Pending for Internal Rejection'
                                            WHEN ISNULL(FBA.IsRejectByPMC,0) = 1 THEN 'Final Rejected By ' + LUE2.EmployeeName
						                    WHEN ISNULL(FBA.IsApprovedByPMC,0) = 1 THEN 'Final Approval Done'					                        
                                            WHEN ISNULL(FBA.IsApprovedByProdHead,0) = 1 THEN 'Pending For Final Approval'
					                        WHEN ISNULL(FBA.IsCheckByKnittingHead,0) = 1 THEN 'Pending For Prod Head Approval'
					                        WHEN ISNULL(FBA.IsUtilizationProposalConfirmed,0) = 1 THEN 'Pending For Knitting Head Approval'
					                        WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 1 THEN 'Pending For Utilization Confirmation'
					                        WHEN ISNULL(FBA.IsKnittingComplete,0) = 1 THEN 'Pending For Allowance'
						                    WHEN ISNULL(FBA.IsApprovedByAllowance,0) = 0 AND ISNULL(FBA.IsRejectByAllowance,0) = 0 THEN 'Pending For Knitting Info'
				                            ELSE '' END

	                    FROM AllBooking AB
	                    LEFT JOIN FBooking FBA ON FBA.BookingNo = AB.BookingNo
	                    LEFT JOIN PreBookingAdditionList PB ON PB.ExportOrderID = AB.ExportOrderID
	                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = AB.BuyerID
	                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = AB.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE ON LUE.EmployeeCode = FBA.UnAcknowledgeBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE1 ON LUE1.EmployeeCode = FBA.KnittingCompleteBy
                        LEFT JOIN {DbNames.EPYSL}..Employee LUE2 ON LUE2.EmployeeCode = FBA.RejectByPMC
	                    WHERE PB.ExportOrderID IS NULL
                    ),
                    AllList AS
                    (
	                    SELECT FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
	                    FROM FL
	                    WHERE ISNULL(FL.StatusText,'') != ''
	                    GROUP BY FL.BookingNo, FL.BookingDate, FL.IsSample, FL.ExportOrderID, FL.BuyerID, FL.BuyerTeamID, FL.CompanyID,
	                    FL.IsRevisionValid, FL.YBookingNo, FL.BuyerName, FL.BuyerTeamName, FL.CreatedByName, FL.BookingType, 
	                    FL.YarnBookingRevisionDate, FL.RevisionDate, FL.FBAcknowledgeDate, FL.CalendarDays,FL.FirstShipmentDate,
	                    FL.YarnBookingDate, FL.RejectReason, FL.PMCApprovedRejectedBy, FL.ApproveRejectDatePMC, FL.StatusText
                    ),
                    FinalObj AS
                    (
	                    SELECT Pending = COUNT(PendingList.BookingNo), Draft = 0, SendingForApproval = 0, Reject = 0, Approved = 0, Reject2 = 0, AllCount = 0 FROM PendingList
	                    UNION
	                    SELECT Pending = 0, Draft = COUNT(DraftList.BookingNo), SendingForApproval = 0, Reject = 0, Approved = 0, Reject2 = 0, AllCount = 0 FROM DraftList
	                    UNION
	                    SELECT Pending = 0, Draft = 0, SendingForApproval = COUNT(SendingForApprovalList.BookingNo), Reject = 0, Reject2 = 0, Approved = 0, AllCount = 0 FROM SendingForApprovalList
	                    UNION
	                    SELECT Pending = 0, Draft = 0, SendingForApproval = 0, Reject = COUNT(RejectList.BookingNo), Approved = 0, Reject2 = 0, AllCount = 0 FROM RejectList
	                    UNION
	                    SELECT Pending = 0, Draft = 0, SendingForApproval = 0, Reject = 0, Approved = COUNT(ApprovedList.BookingNo), Reject2 = 0, AllCount = 0 FROM ApprovedList
	                    UNION
	                    SELECT Pending = 0, Draft = 0, SendingForApproval = 0, Reject = 0, Approved = 0, Reject2 = COUNT(InternalRejectList.BookingNo), AllCount = 0 FROM InternalRejectList
	                    UNION
	                    SELECT Pending = 0, Draft = 0, SendingForApproval = 0, Reject = 0, Approved = 0, Reject2 = 0, AllCount = COUNT(AllList.BookingNo) FROM AllList
                    )
                    SELECT Pending = SUM(Pending), Draft = SUM(Draft), SendingForApproval = SUM(SendingForApproval), Reject = SUM(Reject), Reject2 = SUM(Reject2), Approved = SUM(Approved), AllCount = SUM(AllCount) FROM FinalObj";
                    break;
            }

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                CountListItem data = records.Read<CountListItem>().FirstOrDefault();
                Guard.Against.NullObject(data);
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetNewAsync(int bookingId)
        {
            var query =
                $@"-- Master Data
                 WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
				LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
				LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
		        LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

               ----- Sample Booking Consumption Child (Fabric)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,SBC.ItemGroupID,SBC.SubGroupID,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,SBC.Segment3Desc Color
                ,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,SBC.Segment7Desc KnittingType,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,SBC.Price,SBC.SuggestedPrice,SBC.RequiredQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID,
                SBM.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
				IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType, SBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                ,DayValidDurationId = ISNULL(SBC.DayValidDurationId,0)
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID=1;

                ----- Sample Booking Consumption Child (Collor & Cuff)
                SELECT ROW_NUMBER() OVER(ORDER BY ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,
                SBC.ItemGroupID,SBC.SubGroupID,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,
                SBC.Price,SBC.SuggestedPrice,SBC.RequiredQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID, SBM.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, SBC.Remarks Instruction, SBC.ForBDSStyleNo,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType,
                SBC.Segment1Desc Description,SBC.Segment2Desc Type, SBC.Segment3Desc Length, SBC.Segment4Desc Height, SBC.Segment5Desc Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,Construction = ISV1.SegmentValue
                ,Composition = ISV2.SegmentValue
                ,DayValidDurationId = ISNULL(SBC.DayValidDurationId,0)
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID IN (11, 12);

               ----Sample Booking Consumption AddProcess
                SELECT  BookingID ,ProcessID,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionAddProcess where BookingID={bookingId};

                ----- Sample Booking Consumption Child Details
                SELECT ConsumptionID,BookingID,ItemGroupID,SubGroupID,ItemMasterID,RequiredQty BookingQty ,ConsumptionQty,RequiredUnitID BookingUnitID, 0 As TechnicalNameId
                FROM {DbNames.EPYSL}..SampleBookingConsumptionChild where BookingID={bookingId}

                ----- Sample Booking Consumption Garment Part
                SELECT  BookingID ,FUPartID,ConsumptionID
                 FROM {DbNames.EPYSL}..SampleBookingConsumptionGarmentPart where BookingID={bookingId}

                ---Sample Booking Consumption Process
                SELECT BookingID,ProcessID,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionProcess where BookingID={bookingId}

                ------ Sample Booking Consumption Text
                SELECT BookingID,UsesIn,AdditionalProcess,ApplicableProcess,YarnSubProgram,GarmentsColor GmtColor,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionText  where BookingID={bookingId}

                ------ Sample Booking Child Distribution 
                SELECT *
                FROM {DbNames.EPYSL}..SampleBookingChildDistribution  where BookingID={bookingId}

                ----- SampleBooking ConsumptionYarn Sub Brand
                SELECT SBKC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBKC.ReferenceNo,SBKC.ColorReferenceNo,SBKC.YarnSourceID,SCYS.BookingID, SCYS.YarnSubBrandID, SCYS.ConsumptionID, YSB.YarnSubBrandName
				FROM {DbNames.EPYSL}..SampleBookingConsumptionYarnSubBrand SCYS
				Inner Join {DbNames.EPYSL}..SampleBookingConsumption SBKC On SCYS.BookingID = SBKC.BookingID And SCYS.ConsumptionID = SBKC.ConsumptionID
                Inner Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBKC.ItemGroupID
                Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBKC.SubGroupID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBKC.ReferenceSourceID
                Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBKC.YarnSourceID
				Inner Join (
					Select ETV.ValueID YarnSubBrandID, ETV.ValueName YarnSubBrandName
					From {DbNames.EPYSL}..EntityTypeValue ETV
					Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
				) YSB On YSB.YarnSubBrandID = SCYS.YarnSubBrandID
				Where SCYS.BookingID = {bookingId};

                ----- SampleBookingChildImage
                SELECT BookingID,ImagePath
                FROM {DbNames.EPYSL}..SampleBookingChildImage where BookingID={bookingId}

                --Free Concept
                Select SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,FB.BookingID, FB.BookingNo, FB.BookingDate ConceptDate, SBC.RequiredQty Qty,
                CC.ItemMasterID, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment3ValueID ColorId, Color.SegmentValue ColorName, IM.Segment4ValueID GSMId,
                IM.Segment7ValueID KnittingTypeId, IM.SubGroupID,FB.ExecutionCompanyID CompanyID, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster FB ON FB.BookingID = SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Construction ON Construction.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Composition ON Composition.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Color ON Color.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Gsm ON Gsm.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Width ON Width.SegmentValueID = IM.Segment5ValueID
                --LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue DT ON DT.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue KT ON KT.SegmentValueID = IM.Segment7ValueID
                --LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG ON ISG.SubGroupID = FB.SubGroupID
                Left Join  {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FB.SupplierID
                where FB.BookingID={bookingId};

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                 --YarnSource data load
				Select Cast(a.ValueID as varchar) id, a.ValueName [text]
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Where b.EntityTypeName = 'Yarn Source'

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                 GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
               ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                --Liability Process
				Select LChildID = 0,BookingChildID = 0,AcknowledgeID = 0,BookingID = 0,UnitID = 0, Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=0
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Where b.EntityTypeName = 'Process Liability';

                --Liability Process data load
				Select LChildID = IsNull(F.LChildID,0),BookingChildID = IsNull(F.BookingChildID,0),AcknowledgeID = IsNull(F.AcknowledgeID,0),BookingID = IsNull(F.BookingID,0),UnitID = IsNull(F.UnitID,0), Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=IsNull(F.LiabilityQty,0)
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Left Join (Select LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty From FBookingAcknowledgementLiabilityDistribution Where BookingID = {bookingId} Group By LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty)F On F.LiabilitiesProcessID = a.ValueID
				Where b.EntityTypeName = 'Process Liability';

                -- DayValidDuration
                {CommonQueries.GetDayValidDurations()}";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                data.WithoutOB = true;
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();

                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                data.FreeConcepts = records.Read<FreeConceptMaster>().ToList();
                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                data.YarnSourceNameList = await records.ReadAsync<Select2OptionModel>();

                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> LiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> FBookingAckLiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();

                #region DayValidDurations

                data.DayValidDurations = await records.ReadAsync<Select2OptionModel>();
                data.Childs = new List<FBookingAcknowledgeChild>();
                data.Childs.AddRange(bookingChilds);
                data.Childs.AddRange(bookingChildsCollarCuff);
                data.DayValidDurations = CommonFunction.GetDayValidDurations(data.DayValidDurations, string.Join(",", data.Childs.Where(x => x.DayValidDurationId > 0).Select(x => x.DayValidDurationId).Distinct()));
                data.Childs = new List<FBookingAcknowledgeChild>();

                #endregion

                //criteriaNames.ForEach(cn =>
                //{
                //    cn.FBAChildPlannings = fbaChildPlannings.Where(x => x.CriteriaName == cn.CriteriaName).ToList();
                //});

                List<FBookingAcknowledgementLiabilityDistribution> tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChilds.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChilds[i].ChildAckLiabilityDetails.AddRange(tmpLB);// = tmpLB.ConvertAll(x => new FBookingAcknowledgementLiabilityDistribution(x)).ToList();
                    }
                    bookingChilds[i].CriteriaNames = criteriaNames;
                    bookingChilds[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChilds[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChilds[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }
                    }
                }

                tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChildsCollarCuff.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChildsCollarCuff[i].ChildAckLiabilityDetails.AddRange(tmpLB); //= tmpLB.ConvertAll(x => new FBookingAcknowledgementLiabilityDistribution(x)).ToList();
                    }
                    bookingChildsCollarCuff[i].CriteriaNames = criteriaNames;
                    bookingChildsCollarCuff[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChildsCollarCuff[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChildsCollarCuff[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }

                    }
                }

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();

                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                data.FBookingChild.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });
                data.FBookingChildCollor.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });
                data.FBookingChildCuff.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetNewForReviseAsync(int bookingId)
        {
            var query =
                $@"-- Master Data
                 WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo, FBA.RevisionNo
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
				LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
				LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
		        LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

               ----- Sample Booking Consumption Child (Fabric)
                SELECT FBAC.BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,SBC.ItemGroupID,SBC.SubGroupID,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,SBC.Segment3Desc Color
                ,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,SBC.Segment7Desc KnittingType,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,SBC.Price,SBC.SuggestedPrice,SBC.RequiredQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID,
                SBM.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
				IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType, SBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                ,DayValidDurationId = SBC.DayValidDurationId

                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID --And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID = {bookingId} AND SBC.SubGroupID=1;

                ----- Sample Booking Consumption Child (Collor & Cuff)
                 SELECT FBAC.BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,
                SBC.ItemGroupID,SBC.SubGroupID,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,
                SBC.Price,SBC.SuggestedPrice,SBC.RequiredQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID, SBM.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, SBC.Remarks Instruction, SBC.ForBDSStyleNo,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType,
                SBC.Segment1Desc Description,SBC.Segment1Desc Construction,
				SBC.Segment2Desc Type, SBC.Segment2Desc Composition, 
				SBC.Segment3Desc Length, SBC.Segment4Desc Height, SBC.Segment5Desc Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,DayValidDurationId = SBC.DayValidDurationId
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID --And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID = {bookingId} AND SBC.SubGroupID IN (11, 12);

               ----Sample Booking Consumption AddProcess
                SELECT  BookingID ,ProcessID,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionAddProcess where BookingID={bookingId};

                ----- Sample Booking Consumption Child Details
                SELECT ConsumptionID,BookingID,ItemGroupID,SubGroupID,ItemMasterID,RequiredQty BookingQty ,ConsumptionQty,RequiredUnitID BookingUnitID, 0 As TechnicalNameId
                FROM {DbNames.EPYSL}..SampleBookingConsumptionChild where BookingID={bookingId}

                ----- Sample Booking Consumption Garment Part
                SELECT  BookingID ,FUPartID,ConsumptionID
                 FROM {DbNames.EPYSL}..SampleBookingConsumptionGarmentPart where BookingID={bookingId}

                ---Sample Booking Consumption Process
                SELECT BookingID,ProcessID,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionProcess where BookingID={bookingId}

                ------ Sample Booking Consumption Text
                SELECT BookingID,UsesIn,AdditionalProcess,ApplicableProcess,YarnSubProgram,GarmentsColor GmtColor,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionText  where BookingID={bookingId}

                ------ Sample Booking Child Distribution 
                SELECT *
                FROM {DbNames.EPYSL}..SampleBookingChildDistribution  where BookingID={bookingId}

                ----- SampleBooking ConsumptionYarn Sub Brand
                SELECT SBKC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBKC.ReferenceNo,SBKC.ColorReferenceNo,SBKC.YarnSourceID,SCYS.BookingID, SCYS.YarnSubBrandID, SCYS.ConsumptionID, YSB.YarnSubBrandName
				FROM {DbNames.EPYSL}..SampleBookingConsumptionYarnSubBrand SCYS
				Inner Join {DbNames.EPYSL}..SampleBookingConsumption SBKC On SCYS.BookingID = SBKC.BookingID And SCYS.ConsumptionID = SBKC.ConsumptionID
                Inner Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBKC.ItemGroupID
                Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBKC.SubGroupID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBKC.ReferenceSourceID
                Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBKC.YarnSourceID
				Inner Join (
					Select ETV.ValueID YarnSubBrandID, ETV.ValueName YarnSubBrandName
					From {DbNames.EPYSL}..EntityTypeValue ETV
					Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
				) YSB On YSB.YarnSubBrandID = SCYS.YarnSubBrandID
				Where SCYS.BookingID = {bookingId};

                ----- SampleBookingChildImage
                SELECT BookingID,ImagePath
                FROM {DbNames.EPYSL}..SampleBookingChildImage where BookingID={bookingId}

                --Free Concept
                Select SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,FB.BookingID, FB.BookingNo, FB.BookingDate ConceptDate, SBC.RequiredQty Qty,
                CC.ItemMasterID, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment3ValueID ColorId, Color.SegmentValue ColorName, IM.Segment4ValueID GSMId,
                IM.Segment7ValueID KnittingTypeId, IM.SubGroupID,FB.ExecutionCompanyID CompanyID, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster FB ON FB.BookingID = SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Construction ON Construction.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Composition ON Composition.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Color ON Color.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Gsm ON Gsm.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Width ON Width.SegmentValueID = IM.Segment5ValueID
                --LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue DT ON DT.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue KT ON KT.SegmentValueID = IM.Segment7ValueID
                --LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG ON ISG.SubGroupID = FB.SubGroupID
                Left Join  {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FB.SupplierID
                where FB.BookingID={bookingId};

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                 --YarnSource data load
				Select Cast(a.ValueID as varchar) id, a.ValueName [text]
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Where b.EntityTypeName = 'Yarn Source'

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                 GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
               ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                --Liability Process
				Select LChildID = 0,BookingChildID = 0,AcknowledgeID = 0,BookingID = 0,UnitID = 0, Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=0
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Where b.EntityTypeName = 'Process Liability';

                --Liability Process data load
				Select LChildID = IsNull(F.LChildID,0),BookingChildID = IsNull(F.BookingChildID,0),AcknowledgeID = IsNull(F.AcknowledgeID,0),BookingID = IsNull(F.BookingID,0),UnitID = IsNull(F.UnitID,0), Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=IsNull(F.LiabilityQty,0)
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Left Join (Select LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty From FBookingAcknowledgementLiabilityDistribution Where BookingID = {bookingId} Group By LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty)F On F.LiabilitiesProcessID = a.ValueID
				Where b.EntityTypeName = 'Process Liability';

                -- DayValidDuration
                {CommonQueries.GetDayValidDurations()}";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                data.WithoutOB = true;
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();

                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                data.FreeConcepts = records.Read<FreeConceptMaster>().ToList();
                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                data.YarnSourceNameList = await records.ReadAsync<Select2OptionModel>();

                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> LiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> FBookingAckLiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();

                #region DayValidDurations

                data.DayValidDurations = await records.ReadAsync<Select2OptionModel>();
                data.Childs = new List<FBookingAcknowledgeChild>();
                data.Childs.AddRange(bookingChilds);
                data.Childs.AddRange(bookingChildsCollarCuff);
                data.DayValidDurations = CommonFunction.GetDayValidDurations(data.DayValidDurations, string.Join(",", data.Childs.Where(x => x.DayValidDurationId > 0).Select(x => x.DayValidDurationId).Distinct()));
                data.Childs = new List<FBookingAcknowledgeChild>();

                #endregion

                List<FBookingAcknowledgementLiabilityDistribution> tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                int bookingChildID = 1;
                for (int i = 0; i < bookingChilds.Count; i++)
                {
                    if (bookingChilds[i].BookingChildID == 0) bookingChilds[i].BookingChildID = bookingChildID++;

                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChilds[i].ChildAckLiabilityDetails.AddRange(tmpLB);// = tmpLB.ConvertAll(x => new FBookingAcknowledgementLiabilityDistribution(x)).ToList();
                    }
                    bookingChilds[i].CriteriaNames = criteriaNames;
                    bookingChilds[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChilds[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChilds[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }
                    }
                }

                tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChildsCollarCuff.Count; i++)
                {
                    if (bookingChildsCollarCuff[i].BookingChildID == 0) bookingChildsCollarCuff[i].BookingChildID = bookingChildID++;

                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChildsCollarCuff[i].ChildAckLiabilityDetails.AddRange(tmpLB); //= tmpLB.ConvertAll(x => new FBookingAcknowledgementLiabilityDistribution(x)).ToList();
                    }
                    bookingChildsCollarCuff[i].CriteriaNames = criteriaNames;
                    bookingChildsCollarCuff[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChildsCollarCuff[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChildsCollarCuff[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }

                    }
                }

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                data.FBookingChild.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });
                data.FBookingChildCollor.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });
                data.FBookingChildCuff.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetNewAsyncLabdip(int bookingId)
        {
            var query =
                $@"-- Master Data
                 WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
				LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
				LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
		        LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;
                --FBookingAcknowledgeList
                WITH 
                Bkk As 
                (
	                Select BookingNo From {DbNames.EPYSL}..BookingMaster Where BookingID = {bookingId}
                    Union
                    Select BookingNo From {DbNames.EPYSL}..SampleBookingMaster Where BookingID = {bookingId}
                ),
                BKKK As 
                (
                    Select BookingID From {DbNames.EPYSL}..BookingMaster Where BookingNo in (Select BookingNo From Bkk)
                    Union
                    Select BookingID From {DbNames.EPYSL}..SampleBookingMaster Where BookingNo in (Select BookingNo From Bkk)
                ),
                FBA1 AS
                (
                    SELECT B.BookingID,A.BOMMasterID,BC.ItemGroupID,BC.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,
	                b.BookingNo,b.BookingDate,b.Remarks,b.ExportOrderID,SLNo='',
	                SM.StyleMasterID, SM.StyleNo, SM.SeasonID, SM.FinancialYearID,
	                b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,WithoutOB=0,BookingQty= SUM(BC.BookingQty)
                    FROM {DbNames.EPYSL}..BookingMaster B
                    Inner Join {DbNames.EPYSL}..BookingChild BC On BC.BookingID = B.BookingID
	                LEFT JOIN FabricBookingAcknowledge A on b.BookingID = a.BookingID
	                LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EO ON EO.ExportOrderID = B.ExportOrderID
	                LEFT JOIN {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = EO.StyleMasterID
                    WHERE B.BookingNo in (Select BookingNo From BKK)
					Group By B.BookingID,A.BOMMasterID,BC.ItemGroupID,BC.SubGroupID,a.Status,a.PreProcessRevNo,
	                b.BookingNo,b.BookingDate,b.Remarks,b.ExportOrderID,
	                SM.StyleMasterID, SM.StyleNo, SM.SeasonID, SM.FinancialYearID,
	                b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,BC.BookingQty
                ),
                FBA2 AS
                (
                    SELECT Distinct b.BookingID,a.BOMMasterID,SBIG.ItemGroupID,SBIG.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,
	                b.BookingNo,b.BookingDate,b.Remarks,b.ExportOrderID,b.SLNo,
	                b.StyleMasterID, StyleNo = CASE WHEN ISNULL(b.StyleMasterID,0) = 0 THEN b.StyleNo ELSE SM.StyleNo END, b.SeasonID, 
                    FinancialYearID = (Select top 1 FY.FinancialYearID From {DbNames.EPYSL}..FinancialYear FY Where b.BookingDate between FY.StartMonth and FY.EndMonth),
	                b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,WithoutOB=1,BookingQty= SUM(c.RequiredQty)
                    FROM {DbNames.EPYSL}..SampleBookingMaster b
	                Inner Join {DbNames.EPYSL}..SampleBookingItemGroup SBIG On SBIG.BookingID = b.BookingID
					Inner Join {DbNames.EPYSL}..SampleBookingConsumptionChild c ON c.BookingID = b.BookingID
	                LEFT Join FabricBookingAcknowledge A on b.BookingID = a.BookingID
	                LEFT JOIN {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = b.StyleMasterID
                    WHERE B.BookingNo in (Select BookingNo From BKK)
					Group By b.BookingID,a.BOMMasterID,SBIG.ItemGroupID,SBIG.SubGroupID,a.Status,a.PreProcessRevNo,
	                b.BookingNo,b.BookingDate,b.Remarks,b.ExportOrderID,b.SLNo,
	                b.StyleMasterID,b.StyleMasterID,b.StyleNo,SM.StyleNo, b.SeasonID,
	                b.BuyerID,b.BuyerTeamID,b.ExecutionCompanyID,b.SupplierID
                ),
                FBA AS
                (
	                SELECT *FROM FBA1
	                UNION
	                SELECT *FROM FBA2
                ),
                F AS(
                SELECT FBA.BookingID, FBA.BOMMasterID, FBA.ItemGroupID, FBA.SubGroupID, FBA.Status, FBA.PreRevisionNo, FBA.BookingNo, FBA.BookingDate, FBA.Remarks, FBA.ExportOrderID, FBA.SLNo, FBA.StyleMasterID, FBA.StyleNo, FBA.SeasonID, FBA.FinancialYearID, FBA.BuyerID, FBA.BuyerTeamID, FBA.CompanyID, FBA.SupplierID, FBA.WithoutOB, BookingQty
				,CTO.ContactDisplayCode AS BuyerName, CCT.DisplayCode AS BuyerTeamName,CompanyName = C.ShortName,
                Supplier.ShortName [SupplierName],Season.SeasonName, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                FROM FBA
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBA.SupplierID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On Season.SeasonID = FBA.SeasonID
				Group By FBA.BookingID, FBA.BOMMasterID, FBA.ItemGroupID, FBA.SubGroupID, FBA.Status, FBA.PreRevisionNo, FBA.BookingNo, FBA.BookingDate, FBA.Remarks, FBA.ExportOrderID, FBA.SLNo, FBA.StyleMasterID, FBA.StyleNo, FBA.SeasonID, FBA.FinancialYearID, FBA.BuyerID, FBA.BuyerTeamID, FBA.CompanyID, FBA.SupplierID, FBA.WithoutOB
				,CTO.ContactDisplayCode, CCT.DisplayCode,C.ShortName,
                Supplier.ShortName,Season.SeasonName, Supplier.MappingCompanyID,BookingQty)

                SELECT * FROM F;

               ----- Sample Booking Consumption Child (Fabric)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,SBC.ItemGroupID,SBC.SubGroupID,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,SBC.Segment3Desc Color
                ,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,SBC.Segment7Desc KnittingType,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID,
                SBM.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
				IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId, SBC.IsFabricReq,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType, SBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID=1;

                ----- Sample Booking Consumption Child (Collor & Cuff)
                SELECT ROW_NUMBER() OVER(ORDER BY ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,
                SBC.ItemGroupID,SBC.SubGroupID,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,
                SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID, SBM.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, SBC.Remarks Instruction, SBC.ForBDSStyleNo, SBC.IsFabricReq,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType,
                SBC.Segment1Desc Description,SBC.Segment2Desc Type, SBC.Segment3Desc Length, SBC.Segment4Desc Height, SBC.Segment5Desc Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID

                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID IN (11, 12);

               ----Sample Booking Consumption AddProcess
                SELECT  BookingID ,ProcessID,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionAddProcess where BookingID={bookingId};

                ----- Sample Booking Consumption Child Details
                SELECT ConsumptionID,BookingID,ItemGroupID,SubGroupID,ItemMasterID,RequiredQty BookingQty ,ConsumptionQty,RequiredUnitID BookingUnitID, 0 As TechnicalNameId
                FROM {DbNames.EPYSL}..SampleBookingConsumptionChild where BookingID={bookingId}

                ----- Sample Booking Consumption Garment Part
                SELECT  BookingID ,FUPartID,ConsumptionID
                 FROM {DbNames.EPYSL}..SampleBookingConsumptionGarmentPart where BookingID={bookingId}

                ---Sample Booking Consumption Process
                SELECT BookingID,ProcessID,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionProcess where BookingID={bookingId}

                ------ Sample Booking Consumption Text
                SELECT BookingID,UsesIn,AdditionalProcess,ApplicableProcess,YarnSubProgram,GarmentsColor GmtColor,ConsumptionID
                FROM {DbNames.EPYSL}..SampleBookingConsumptionText  where BookingID={bookingId}

                ------ Sample Booking Child Distribution 
                SELECT *
                FROM {DbNames.EPYSL}..SampleBookingChildDistribution  where BookingID={bookingId}

                ----- SampleBooking ConsumptionYarn Sub Brand
                SELECT SBKC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBKC.ReferenceNo,SBKC.ColorReferenceNo,SBKC.YarnSourceID,SCYS.BookingID, SCYS.YarnSubBrandID, SCYS.ConsumptionID, YSB.YarnSubBrandName
				FROM {DbNames.EPYSL}..SampleBookingConsumptionYarnSubBrand SCYS
				Inner Join {DbNames.EPYSL}..SampleBookingConsumption SBKC On SCYS.BookingID = SBKC.BookingID And SCYS.ConsumptionID = SBKC.ConsumptionID
                Inner Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBKC.ItemGroupID
                Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBKC.SubGroupID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBKC.ReferenceSourceID
                Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBKC.YarnSourceID
				Inner Join (
					Select ETV.ValueID YarnSubBrandID, ETV.ValueName YarnSubBrandName
					From {DbNames.EPYSL}..EntityTypeValue ETV
					Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
				) YSB On YSB.YarnSubBrandID = SCYS.YarnSubBrandID
				Where SCYS.BookingID = {bookingId};

                ----- SampleBookingChildImage
                SELECT BookingID,ImagePath
                FROM {DbNames.EPYSL}..SampleBookingChildImage where BookingID={bookingId}

                --Free Concept
                Select SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,FB.BookingID, FB.BookingNo, FB.BookingDate ConceptDate, SBC.RequiredQty Qty,
                CC.ItemMasterID, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment3ValueID ColorId, Color.SegmentValue ColorName, IM.Segment4ValueID GSMId,
                IM.Segment7ValueID KnittingTypeId, IM.SubGroupID,FB.ExecutionCompanyID CompanyID, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster FB ON FB.BookingID = SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Construction ON Construction.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Composition ON Composition.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Color ON Color.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Gsm ON Gsm.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Width ON Width.SegmentValueID = IM.Segment5ValueID
                --LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue DT ON DT.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue KT ON KT.SegmentValueID = IM.Segment7ValueID
                --LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG ON ISG.SubGroupID = FB.SubGroupID
                Left Join  {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FB.SupplierID
                where FB.BookingID={bookingId};

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                 --YarnSource data load
				Select Cast(a.ValueID as varchar) id, a.ValueName [text]
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Where b.EntityTypeName = 'Yarn Source'

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                 GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
               ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                --Liability Process
				Select LChildID = 0,BookingChildID = 0,AcknowledgeID = 0,BookingID = 0,UnitID = 0, Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=0
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Where b.EntityTypeName = 'Process Liability';

                --Liability Process data load
				Select LChildID = IsNull(F.LChildID,0),BookingChildID = IsNull(F.BookingChildID,0),AcknowledgeID = IsNull(F.AcknowledgeID,0),BookingID = IsNull(F.BookingID,0),UnitID = IsNull(F.UnitID,0), Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=IsNull(F.LiabilityQty,0)
				From {DbNames.EPYSL}..EntityTypeValue a
				Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				Left Join (Select LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty From FBookingAcknowledgementLiabilityDistribution Where BookingID = {bookingId} Group By LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty)F On F.LiabilitiesProcessID = a.ValueID
				Where b.EntityTypeName = 'Process Liability';";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                data.WithoutOB = true;
                Guard.Against.NullObject(data);
                data.FBookingAcknowledgeList = records.Read<FBookingAcknowledge>().ToList();
                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();

                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                data.FreeConcepts = records.Read<FreeConceptMaster>().ToList();
                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                data.YarnSourceNameList = await records.ReadAsync<Select2OptionModel>();

                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> LiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> FBookingAckLiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                //criteriaNames.ForEach(cn =>
                //{
                //    cn.FBAChildPlannings = fbaChildPlannings.Where(x => x.CriteriaName == cn.CriteriaName).ToList();
                //});

                List<FBookingAcknowledgementLiabilityDistribution> tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChilds.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChilds[i].ChildAckLiabilityDetails.AddRange(tmpLB);// = tmpLB.ConvertAll(x => new FBookingAcknowledgementLiabilityDistribution(x)).ToList();
                    }
                    bookingChilds[i].CriteriaNames = criteriaNames;
                    bookingChilds[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChilds[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChilds[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }
                    }
                }

                tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChildsCollarCuff.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChildsCollarCuff[i].ChildAckLiabilityDetails.AddRange(tmpLB); //= tmpLB.ConvertAll(x => new FBookingAcknowledgementLiabilityDistribution(x)).ToList();
                    }
                    bookingChildsCollarCuff[i].CriteriaNames = criteriaNames;
                    bookingChildsCollarCuff[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChildsCollarCuff[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChildsCollarCuff[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }

                    }
                }

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetNewBulkAsync(int bookingId)
        {
            var query = $@"WITH FBA1 AS
                        (
                            SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,
	                        b.BookingNo,b.BookingDate,b.Remarks,StyleNo='',b.ExportOrderID,SLNo='',StyleMasterID=0,
	                        b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SeasonID=0,a.WithoutOB
                            FROM FabricBookingAcknowledge A
							INNER JOIN {DbNames.EPYSL}..BookingMaster b on b.BookingID = a.BookingID
                            WHERE A.BookingID={bookingId} AND a.WithoutOB = 0
                        ),
						FBA2 AS
                        (
                            SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,
	                        b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	                        b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB
                            FROM FabricBookingAcknowledge A
							Inner Join {DbNames.EPYSL}..SampleBookingMaster b on b.BookingID = a.BookingID
                            WHERE A.BookingID={bookingId} AND a.WithoutOB = 1
                        ),
						FBA AS
                        (
	                        SELECT *FROM FBA1
	                        UNION
	                        SELECT *FROM FBA2
                        ),
                        F AS(
                        SELECT FBA.*,BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
                        C.CompanyName,Supplier.ShortName [SupplierName],Season.SeasonName, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                        FROM FBA
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBA.SupplierID
                        LEFT Join {DbNames.EPYSL}..ContactSeason Season On Season.SeasonID = FBA.SeasonID)

						SELECT * FROM F;

                        ----- Sample Booking Consumption Child (Fabric)
                           WITH FBA1 AS
                        (
                            SELECT B.BookingID,B.BookingNo, B.BuyerID, ExecutionCompanyID=B.CompanyID,
							A.BookingChildID, A.ItemMasterID,A.SubGroupID,A.A1ValueID,A.YarnBrandID,ReferenceSourceID=0,YarnSourceID=0,
							ReferenceNo='',ColorReferenceNo='',A.ConsumptionID,A.ItemGroupID,
							C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
							C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
							A.LengthYds,A.LengthInch,A.FUPartID,A.ConsumptionQty,C.OrderUnitID,A.LabDipNo,A.Price,A.SuggestedPrice,
							RequiredQty=A.RequisitionQty,A.Remarks,ForBDSStyleNo='', B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
							FROM {DbNames.EPYSL}..BookingChild A
							LEFT JOIN {DbNames.EPYSL}..BookingMaster B ON B.BookingID=A.BookingID
							LEFT JOIN {DbNames.EPYSL}..BOMConsumption C ON C.ConsumptionID=A.ConsumptionID
                            LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
							WHERE A.BookingID={bookingId} AND A.SubGroupID = 1
                        ),
						FBA2 AS
                        (
                           SELECT B.BookingID,B.BookingNo, B.BuyerID,B.ExecutionCompanyID,
						   BookingChildID=A.ConsumptionChildID, A.ItemMasterID,A.SubGroupID,C.A1ValueID,C.YarnBrandID,C.ReferenceSourceID,C.YarnSourceID,
						   C.ReferenceNo,C.ColorReferenceNo,A.ConsumptionID,A.ItemGroupID,
						   C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
						   C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
						   C.LengthYds,C.LengthInch,C.FUPartID,A.ConsumptionQty,C.OrderUnitID,C.LabDipNo,C.Price,C.SuggestedPrice,
						   A.RequiredQty,C.Remarks,C.ForBDSStyleNo, B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
						   FROM {DbNames.EPYSL}..SampleBookingConsumptionChild A
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster B ON B.BookingID=A.BookingID
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingConsumption C ON C.ConsumptionID=A.ConsumptionID
                           LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
						   WHERE A.BookingID={bookingId} AND A.SubGroupID = 1
                        ),
						FBA AS
						(
							SELECT * FROM FBA1
							UNION
							SELECT * FROM FBA2
						),
						F AS (SELECT SBM.BookingChildID, SBM.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBM.ReferenceNo,SBM.ColorReferenceNo,SBM.YarnSourceID,SBM.ConsumptionID,SBM.BookingID,SBM.BookingNo,SBM.ItemGroupID,SBM.SubGroupID,SBM.Segment1Desc Construction,SBM.Segment2Desc Composition,SBM.Segment3Desc Color
						,SBM.Segment4Desc GSM,SBM.Segment5Desc FabricWidth,SBM.Segment7Desc KnittingType,SBM.LengthYds,SBM.LengthInch,SBM.FUPartID,SBM.ConsumptionQty,SBM.OrderUnitID BookingUnitID
						,SBM.A1ValueID,SBM.YarnBrandID,SBM.LabDipNo,SBM.Price,SBM.SuggestedPrice,SBM.RequiredQty BookingQty,SBM.ItemMasterID,SBM.BuyerID ContactID,
						SBM.ExecutionCompanyID,
						0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
						IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
						ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBM.Segment6Desc DyeingType, SBM.Remarks Instruction, SBM.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
						FROM FBA SBM
                        LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBM.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBM.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBM.A1ValueID
				        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBM.YarnBrandID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBM.ReferenceSourceID
                        Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBM.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                        WHERE SBM.BookingID={bookingId}
						)
						SELECT * FROM F;

                        ----- Sample Booking Consumption Child (Collor & Cuff)
                          WITH FBA1 AS
                        (
                            SELECT B.BookingID,B.BookingNo, B.BuyerID, ExecutionCompanyID=B.CompanyID,
							A.BookingChildID, A.ItemMasterID,A.SubGroupID,A.A1ValueID,A.YarnBrandID,ReferenceSourceID=0,YarnSourceID=0,
							ReferenceNo='',ColorReferenceNo='',A.ConsumptionID,A.ItemGroupID,
							C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
							C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
							A.LengthYds,A.LengthInch,A.FUPartID,A.ConsumptionQty,C.OrderUnitID,A.LabDipNo,A.Price,A.SuggestedPrice,
							RequiredQty=A.RequisitionQty,A.Remarks,ForBDSStyleNo='', B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
							FROM {DbNames.EPYSL}..BookingChild A
							LEFT JOIN {DbNames.EPYSL}..BookingMaster B ON B.BookingID=A.BookingID
							LEFT JOIN {DbNames.EPYSL}..BOMConsumption C ON C.ConsumptionID=A.ConsumptionID
                            LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
							WHERE A.BookingID={bookingId} AND A.SubGroupID IN (11,12)
                        ),
						FBA2 AS
                        (
                           SELECT B.BookingID,B.BookingNo, B.BuyerID,B.ExecutionCompanyID,
						   BookingChildID=A.ConsumptionChildID, A.ItemMasterID,A.SubGroupID,C.A1ValueID,C.YarnBrandID,C.ReferenceSourceID,C.YarnSourceID,
						   C.ReferenceNo,C.ColorReferenceNo,A.ConsumptionID,A.ItemGroupID,
						   C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
						   C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
						   C.LengthYds,C.LengthInch,C.FUPartID,A.ConsumptionQty,C.OrderUnitID,C.LabDipNo,C.Price,C.SuggestedPrice,
						   A.RequiredQty,C.Remarks,C.ForBDSStyleNo, B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
						   FROM {DbNames.EPYSL}..SampleBookingConsumptionChild A
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster B ON B.BookingID=A.BookingID
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingConsumption C ON C.ConsumptionID=A.ConsumptionID
                            LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
						   WHERE A.BookingID={bookingId} AND A.SubGroupID IN (11,12)
                        ),
						FBA AS
						(
							SELECT * FROM FBA1
							UNION
							SELECT * FROM FBA2
						),
						F AS (SELECT SBM.BookingChildID, SBM.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBM.ReferenceNo,SBM.ColorReferenceNo,SBM.YarnSourceID,SBM.ConsumptionID,SBM.BookingID,SBM.BookingNo,SBM.ItemGroupID,SBM.SubGroupID,SBM.Segment1Desc Construction,SBM.Segment2Desc Composition,SBM.Segment3Desc Color
						,SBM.Segment4Desc GSM,SBM.Segment5Desc FabricWidth,SBM.Segment7Desc KnittingType,SBM.LengthYds,SBM.LengthInch,SBM.FUPartID,SBM.ConsumptionQty,SBM.OrderUnitID BookingUnitID
						,SBM.A1ValueID,SBM.YarnBrandID,SBM.LabDipNo,SBM.Price,SBM.SuggestedPrice,SBM.RequiredQty BookingQty,SBM.ItemMasterID,SBM.BuyerID ContactID,
						SBM.ExecutionCompanyID,
						0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
						IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
						ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBM.Segment6Desc DyeingType, SBM.Remarks Instruction, SBM.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(SBM.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(SBM.ActualBookingQty,0)
						FROM FBA SBM
                        LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBM.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBM.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBM.A1ValueID
				        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBM.YarnBrandID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBM.ReferenceSourceID
                        Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBM.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                        WHERE SBM.BookingID={bookingId}
						)
						SELECT * FROM F;

                       ----Sample Booking Consumption AddProcess
                        SELECT  BookingID ,ProcessID,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionAddProcess where BookingID={bookingId};

                        ----- Sample Booking Consumption Child Details
                        SELECT ConsumptionID,BookingID,ItemGroupID,SubGroupID,ItemMasterID,RequiredQty BookingQty ,ConsumptionQty,RequiredUnitID BookingUnitID, 0 As TechnicalNameId
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionChild where BookingID={bookingId}

                        ----- Sample Booking Consumption Garment Part
                        SELECT  BookingID ,FUPartID,ConsumptionID
                         FROM {DbNames.EPYSL}..SampleBookingConsumptionGarmentPart where BookingID={bookingId}

                        ---Sample Booking Consumption Process
                        SELECT BookingID,ProcessID,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionProcess where BookingID={bookingId}

                        ------ Sample Booking Consumption Text
                        SELECT BookingID,UsesIn,AdditionalProcess,ApplicableProcess,YarnSubProgram,GarmentsColor GmtColor,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionText  where BookingID={bookingId}

                        ------ Sample Booking Child Distribution 
                        SELECT *
                        FROM {DbNames.EPYSL}..SampleBookingChildDistribution  where BookingID={bookingId}

                        ----- SampleBooking ConsumptionYarn Sub Brand
                        SELECT SBKC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBKC.ReferenceNo,SBKC.ColorReferenceNo,SBKC.YarnSourceID,SCYS.BookingID, SCYS.YarnSubBrandID, SCYS.ConsumptionID, YSB.YarnSubBrandName
				        FROM {DbNames.EPYSL}..SampleBookingConsumptionYarnSubBrand SCYS
				        Inner Join {DbNames.EPYSL}..SampleBookingConsumption SBKC On SCYS.BookingID = SBKC.BookingID And SCYS.ConsumptionID = SBKC.ConsumptionID
                        Inner Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBKC.ItemGroupID
                        Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBKC.SubGroupID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBKC.ReferenceSourceID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBKC.YarnSourceID
				        Inner Join (
					        Select ETV.ValueID YarnSubBrandID, ETV.ValueName YarnSubBrandName
					        From {DbNames.EPYSL}..EntityTypeValue ETV
					        Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
				        ) YSB On YSB.YarnSubBrandID = SCYS.YarnSubBrandID
				        Where SCYS.BookingID = {bookingId};

                        ----- SampleBookingChildImage
                        SELECT BookingID,ImagePath
                        FROM {DbNames.EPYSL}..SampleBookingChildImage where BookingID={bookingId}

                        --Free Concept
                        Select SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,FB.BookingID, FB.BookingNo, FB.BookingDate ConceptDate, SBC.RequiredQty Qty,
                        CC.ItemMasterID, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment3ValueID ColorId, Color.SegmentValue ColorName, IM.Segment4ValueID GSMId,
                        IM.Segment7ValueID KnittingTypeId, IM.SubGroupID,FB.ExecutionCompanyID CompanyID, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                        FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                        INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster FB ON FB.BookingID = SBC.BookingID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Construction ON Construction.SegmentValueID = IM.Segment1ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Composition ON Composition.SegmentValueID = IM.Segment2ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Color ON Color.SegmentValueID = IM.Segment3ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Gsm ON Gsm.SegmentValueID = IM.Segment4ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Width ON Width.SegmentValueID = IM.Segment5ValueID
                        --LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue DT ON DT.SegmentValueID = IM.Segment6ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue KT ON KT.SegmentValueID = IM.Segment7ValueID
                        --LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG ON ISG.SubGroupID = FB.SubGroupID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FB.SupplierID
                        where FB.BookingID={bookingId};

                        --Technical Name
                        SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                        FROM FabricTechnicalName T
                        LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                        LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                        Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                         --YarnSource data load
				        Select Cast(a.ValueID as varchar) id, a.ValueName [text]
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Where b.EntityTypeName = 'Yarn Source'

                        --M/c type
                        ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                        FROM KnittingMachine a
                        INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                        Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                        --Where c.TypeName != 'Flat Bed'
                        GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                        --CriteriaNames
                         ;SELECT CriteriaName,CriteriaSeqNo, (CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                        FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                        GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                        --FBAChildPlannings
                        ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;
                        
                        --Liability Process
				        Select LChildID = 0,BookingChildID = 0,AcknowledgeID = 0,BookingID = 0,UnitID = 0, Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=0
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Where b.EntityTypeName = 'Process Liability';
                        
                        --Liability Process data load
				        Select LChildID = IsNull(F.LChildID,0),BookingChildID = IsNull(F.BookingChildID,0),AcknowledgeID = IsNull(F.AcknowledgeID,0),BookingID = IsNull(F.BookingID,0),UnitID = IsNull(F.UnitID,0), Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=IsNull(F.LiabilityQty,0)
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Left Join (Select LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty From FBookingAcknowledgementLiabilityDistribution Where BookingID = {bookingId} Group By LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty)F On F.LiabilitiesProcessID = a.ValueID
				        Where b.EntityTypeName = 'Process Liability';";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();

                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                data.FreeConcepts = records.Read<FreeConceptMaster>().ToList();
                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                data.YarnSourceNameList = await records.ReadAsync<Select2OptionModel>();

                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> LiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> FBookingAckLiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                //criteriaNames.ForEach(cn =>
                //{
                //    cn.FBAChildPlannings = fbaChildPlannings.Where(x => x.CriteriaName == cn.CriteriaName).ToList();
                //});

                List<FBookingAcknowledgementLiabilityDistribution> tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChilds.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChilds[i].ChildAckLiabilityDetails.AddRange(tmpLB);
                    }
                    bookingChilds[i].CriteriaNames = criteriaNames;
                    bookingChilds[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChilds[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChilds[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }

                    }
                }

                tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChildsCollarCuff.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChildsCollarCuff[i].ChildAckLiabilityDetails.AddRange(tmpLB);
                    }
                    bookingChildsCollarCuff[i].CriteriaNames = criteriaNames;
                    bookingChildsCollarCuff[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChildsCollarCuff[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChildsCollarCuff[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }

                    }
                }

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetNewBulkFAsync(int bookingId)
        {
            var query = $@"WITH FBA1 AS
                        (
                            SELECT B.BookingID,A.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,
	                        b.BookingNo,b.BookingDate,b.Remarks,StyleNo='',b.ExportOrderID,SLNo='',StyleMasterID=0,
	                        b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SeasonID=0,a.WithoutOB
                            FROM {DbNames.EPYSL}..BookingMaster B
							LEFT JOIN FabricBookingAcknowledge A on b.BookingID = a.BookingID
                            WHERE B.BookingID={bookingId}
                        ),
						FBA2 AS
                        (
                             SELECT b.BookingID,a.BOMMasterID,a.ItemGroupID,b.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,
	                        b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	                        b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB
                            FROM {DbNames.EPYSL}..SampleBookingMaster b
							LEFT Join FabricBookingAcknowledge A on b.BookingID = a.BookingID
                            WHERE B.BookingID={bookingId}
                        ),
						FBA AS
                        (
	                        SELECT *FROM FBA1
	                        UNION
	                        SELECT *FROM FBA2
                        ),
                        F AS(
                        SELECT FBA.*,BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
                        C.CompanyName,Supplier.ShortName [SupplierName],Season.SeasonName, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                        FROM FBA
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBA.SupplierID
                        LEFT Join {DbNames.EPYSL}..ContactSeason Season On Season.SeasonID = FBA.SeasonID)

						SELECT * FROM F;

                        ----- Sample Booking Consumption Child (Fabric)
                           WITH FBA1 AS
                        (
                            SELECT  B.BookingID,B.BookingNo, B.BuyerID, ExecutionCompanyID=B.CompanyID,
							A.BookingChildID, A.ItemMasterID,A.SubGroupID,A.A1ValueID,A.YarnBrandID,ReferenceSourceID=0,YarnSourceID=0,
							ReferenceNo='',ColorReferenceNo='',A.ConsumptionID,A.ItemGroupID,  B.RevisionNo,
							C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
							C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
							A.LengthYds,A.LengthInch,A.FUPartID,A.ConsumptionQty,C.OrderUnitID,A.LabDipNo,A.Price,A.SuggestedPrice,
							RequiredQty=A.RequisitionQty,A.Remarks,ForBDSStyleNo='', B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
							FROM {DbNames.EPYSL}..BookingChild A
							LEFT JOIN {DbNames.EPYSL}..BookingMaster B ON B.BookingID=A.BookingID
							LEFT JOIN {DbNames.EPYSL}..BOMConsumption C ON C.ConsumptionID=A.ConsumptionID
                            LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
							WHERE A.BookingID={bookingId} AND A.SubGroupID = 1
                        ),
						FBA2 AS
                        (
                           SELECT B.BookingID,B.BookingNo, B.BuyerID,B.ExecutionCompanyID,
						   BookingChildID=A.ConsumptionChildID, A.ItemMasterID,A.SubGroupID,C.A1ValueID,C.YarnBrandID,C.ReferenceSourceID,C.YarnSourceID,
						   C.ReferenceNo,C.ColorReferenceNo,A.ConsumptionID,A.ItemGroupID,  B.RevisionNo,
						   C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
						   C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
						   C.LengthYds,C.LengthInch,C.FUPartID,A.ConsumptionQty,C.OrderUnitID,C.LabDipNo,C.Price,C.SuggestedPrice,
						   A.RequiredQty,C.Remarks,C.ForBDSStyleNo, B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
						   FROM {DbNames.EPYSL}..SampleBookingConsumptionChild A
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster B ON B.BookingID=A.BookingID
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingConsumption C ON C.ConsumptionID=A.ConsumptionID
                           LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
						   WHERE A.BookingID={bookingId} AND A.SubGroupID = 1
                        ),
						FBA AS
						(
							SELECT * FROM FBA1
							UNION
							SELECT * FROM FBA2
						),
						F AS (SELECT SBM.BookingChildID, SBM.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBM.ReferenceNo,SBM.ColorReferenceNo,SBM.YarnSourceID,SBM.ConsumptionID,SBM.BookingID,SBM.BookingNo,SBM.ItemGroupID,SBM.SubGroupID,SBM.Segment1Desc Construction,SBM.Segment2Desc Composition,SBM.Segment3Desc Color
						,SBM.Segment4Desc GSM,SBM.Segment5Desc FabricWidth,SBM.Segment7Desc KnittingType,SBM.LengthYds,SBM.LengthInch,SBM.FUPartID,SBM.ConsumptionQty,SBM.OrderUnitID BookingUnitID
						,SBM.A1ValueID,SBM.YarnBrandID,SBM.LabDipNo,SBM.Price,SBM.SuggestedPrice,PreviousBookingQty=IsNull((Select Sum(BookingQty) From {DbNames.EPYSL}..BookingChild_Bk Where RevisionNo = SBM.RevisionNo-1 And BookingChildID =  SBM.BookingChildID),0),SBM.RequiredQty BookingQty,SBM.ItemMasterID,SBM.BuyerID ContactID,
						SBM.ExecutionCompanyID,
						0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
						IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
						ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBM.Segment6Desc DyeingType, SBM.Remarks Instruction, SBM.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
						FROM FBA SBM
                        LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBM.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBM.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBM.A1ValueID
				        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBM.YarnBrandID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBM.ReferenceSourceID
                        Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBM.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                        WHERE SBM.BookingID={bookingId}
						)
						SELECT * FROM F;

                        ----- Sample Booking Consumption Child (Collor & Cuff)
                          WITH FBA1 AS
                        (
                            SELECT B.BookingID,B.BookingNo, B.BuyerID, ExecutionCompanyID=B.CompanyID,
							A.BookingChildID, A.ItemMasterID,A.SubGroupID,A.A1ValueID,A.YarnBrandID,ReferenceSourceID=0,YarnSourceID=0,
							ReferenceNo='',ColorReferenceNo='',A.ConsumptionID,A.ItemGroupID,  B.RevisionNo,
							C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
							C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
							A.LengthYds,A.LengthInch,A.FUPartID,A.ConsumptionQty,C.OrderUnitID,A.LabDipNo,A.Price,A.SuggestedPrice,
							RequiredQty=A.RequisitionQty,A.Remarks,ForBDSStyleNo='', B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
							FROM {DbNames.EPYSL}..BookingChild A
							LEFT JOIN {DbNames.EPYSL}..BookingMaster B ON B.BookingID=A.BookingID
							LEFT JOIN {DbNames.EPYSL}..BOMConsumption C ON C.ConsumptionID=A.ConsumptionID
                            LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
							WHERE A.BookingID={bookingId} AND A.SubGroupID IN (11,12)
                        ),
						FBA2 AS
                        (
                           SELECT B.BookingID,B.BookingNo, B.BuyerID,B.ExecutionCompanyID,
						   BookingChildID=A.ConsumptionChildID, A.ItemMasterID,A.SubGroupID,C.A1ValueID,C.YarnBrandID,C.ReferenceSourceID,C.YarnSourceID,
						   C.ReferenceNo,C.ColorReferenceNo,A.ConsumptionID,A.ItemGroupID,  B.RevisionNo,
						   C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
						   C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
						   C.LengthYds,C.LengthInch,C.FUPartID,A.ConsumptionQty,C.OrderUnitID,C.LabDipNo,C.Price,C.SuggestedPrice,
						   A.RequiredQty,C.Remarks,C.ForBDSStyleNo, B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
						   FROM {DbNames.EPYSL}..SampleBookingConsumptionChild A
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster B ON B.BookingID=A.BookingID
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingConsumption C ON C.ConsumptionID=A.ConsumptionID
                            LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
						   WHERE A.BookingID={bookingId} AND A.SubGroupID IN (11,12)
                        ),
						FBA AS
						(
							SELECT * FROM FBA1
							UNION
							SELECT * FROM FBA2
						),
						F AS (SELECT SBM.BookingChildID, SBM.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBM.ReferenceNo,SBM.ColorReferenceNo,SBM.YarnSourceID,SBM.ConsumptionID,SBM.BookingID,SBM.BookingNo,SBM.ItemGroupID,SBM.SubGroupID,SBM.Segment1Desc Construction,SBM.Segment2Desc Composition,SBM.Segment3Desc Color
						,SBM.Segment4Desc GSM,SBM.Segment5Desc FabricWidth,SBM.Segment7Desc KnittingType,SBM.LengthYds,SBM.LengthInch,SBM.FUPartID,SBM.ConsumptionQty,SBM.OrderUnitID BookingUnitID
						,SBM.A1ValueID,SBM.YarnBrandID,SBM.LabDipNo,SBM.Price,SBM.SuggestedPrice,SBM.RequiredQty BookingQty,SBM.ItemMasterID,SBM.BuyerID ContactID,
						SBM.ExecutionCompanyID,
						0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
						IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
						ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBM.Segment6Desc DyeingType, SBM.Remarks Instruction, SBM.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(SBM.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(SBM.ActualBookingQty,0)
						FROM FBA SBM
                        LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBM.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBM.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBM.A1ValueID
				        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBM.YarnBrandID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBM.ReferenceSourceID
                        Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBM.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                        WHERE SBM.BookingID={bookingId}
						)
						SELECT * FROM F;

                       ----Sample Booking Consumption AddProcess
                        SELECT  BookingID ,ProcessID,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionAddProcess where BookingID={bookingId};

                        ----- Sample Booking Consumption Child Details
                        SELECT ConsumptionID,BookingID,ItemGroupID,SubGroupID,ItemMasterID,RequiredQty BookingQty ,ConsumptionQty,RequiredUnitID BookingUnitID, 0 As TechnicalNameId
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionChild where BookingID={bookingId}

                        ----- Sample Booking Consumption Garment Part
                        SELECT  BookingID ,FUPartID,ConsumptionID
                         FROM {DbNames.EPYSL}..SampleBookingConsumptionGarmentPart where BookingID={bookingId}

                        ---Sample Booking Consumption Process
                        SELECT BookingID,ProcessID,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionProcess where BookingID={bookingId}

                        ------ Sample Booking Consumption Text
                        SELECT BookingID,UsesIn,AdditionalProcess,ApplicableProcess,YarnSubProgram,GarmentsColor GmtColor,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionText  where BookingID={bookingId}

                        ------ Sample Booking Child Distribution 
                        SELECT *
                        FROM {DbNames.EPYSL}..SampleBookingChildDistribution  where BookingID={bookingId}

                        ----- SampleBooking ConsumptionYarn Sub Brand
                        SELECT SBKC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBKC.ReferenceNo,SBKC.ColorReferenceNo,SBKC.YarnSourceID,SCYS.BookingID, SCYS.YarnSubBrandID, SCYS.ConsumptionID, YSB.YarnSubBrandName
				        FROM {DbNames.EPYSL}..SampleBookingConsumptionYarnSubBrand SCYS
				        Inner Join {DbNames.EPYSL}..SampleBookingConsumption SBKC On SCYS.BookingID = SBKC.BookingID And SCYS.ConsumptionID = SBKC.ConsumptionID
                        Inner Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBKC.ItemGroupID
                        Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBKC.SubGroupID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBKC.ReferenceSourceID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBKC.YarnSourceID
				        Inner Join (
					        Select ETV.ValueID YarnSubBrandID, ETV.ValueName YarnSubBrandName
					        From {DbNames.EPYSL}..EntityTypeValue ETV
					        Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
				        ) YSB On YSB.YarnSubBrandID = SCYS.YarnSubBrandID
				        Where SCYS.BookingID = {bookingId};

                        ----- SampleBookingChildImage
                        SELECT BookingID,ImagePath
                        FROM {DbNames.EPYSL}..SampleBookingChildImage where BookingID={bookingId}

                        --Free Concept
                        Select SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,FB.BookingID, FB.BookingNo, FB.BookingDate ConceptDate, SBC.RequiredQty Qty,
                        CC.ItemMasterID, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment3ValueID ColorId, Color.SegmentValue ColorName, IM.Segment4ValueID GSMId,
                        IM.Segment7ValueID KnittingTypeId, IM.SubGroupID,FB.ExecutionCompanyID CompanyID, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                        FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                        INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster FB ON FB.BookingID = SBC.BookingID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Construction ON Construction.SegmentValueID = IM.Segment1ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Composition ON Composition.SegmentValueID = IM.Segment2ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Color ON Color.SegmentValueID = IM.Segment3ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Gsm ON Gsm.SegmentValueID = IM.Segment4ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Width ON Width.SegmentValueID = IM.Segment5ValueID
                        --LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue DT ON DT.SegmentValueID = IM.Segment6ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue KT ON KT.SegmentValueID = IM.Segment7ValueID
                        --LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG ON ISG.SubGroupID = FB.SubGroupID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FB.SupplierID
                        where FB.BookingID={bookingId};

                        --Technical Name
                        SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                        FROM FabricTechnicalName T
                        LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                        LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                        Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                         --YarnSource data load
				        Select Cast(a.ValueID as varchar) id, a.ValueName [text]
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Where b.EntityTypeName = 'Yarn Source'

                        --M/c type
                        ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                        FROM KnittingMachine a
                        INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                        Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                        --Where c.TypeName != 'Flat Bed'
                        GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                        --CriteriaNames
                         ;SELECT CriteriaName,CriteriaSeqNo, (CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                        FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                        GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                        --FBAChildPlannings
                        ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                        --Liability Process
				        Select LChildID = 0,BookingChildID = 0,AcknowledgeID = 0,BookingID = 0,UnitID = 0, Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=0
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Where b.EntityTypeName = 'Process Liability';

                        --Liability Process data load
				        Select LChildID = IsNull(F.LChildID,0),BookingChildID = IsNull(F.BookingChildID,0),AcknowledgeID = IsNull(F.AcknowledgeID,0),BookingID = IsNull(F.BookingID,0),UnitID = IsNull(F.UnitID,0), Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=IsNull(F.LiabilityQty,0)
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Left Join (Select LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty From FBookingAcknowledgementLiabilityDistribution Where BookingID = {bookingId} Group By LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty)F On F.LiabilitiesProcessID = a.ValueID
				        Where b.EntityTypeName = 'Process Liability';

                        -- Yarn Booking Child Items
                    ;With YBM As
                    (
                        Select * From YarnBookingMaster_New Where BookingID = {bookingId}
                    ),
                    YBCI As (
                        Select YBCI.YItemMasterID As ItemMasterID, YBCI.UnitID, U.DisplayUnitDesc, YBCI.Blending,
                        (Case When Blending = 1 then 'Blend' else 'Non-Blend' End)BlendingName, YBCI.YarnCategory,  BookingQty=Sum(YBCI.BookingQty),
                        ShadeCode= IsNull(YBCI.ShadeCode,''), IsNull(Y.ShadeCode,'') as ShadeName,
                        YBCI.Remarks, YBCI.Specification, YBCI.YD, YBCI.YDItem, YBM.BookingID,
                        ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc,
                        ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc,
                        ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc, YBM.SubGroupID, ISG.SubGroupName,
                        LiabilityQty = IsNull(FBAY.LiabilityQty,0)
                        From YBM Inner Join YarnBookingChild_New YBC On YBM.YBookingID = YBC.YBookingID
                        Inner Join YarnBookingChildItem_New YBCI On YBCI.YBChildID = YBC.YBChildID
                        Left Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = YBM.SubGroupID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                        LEFT JOIN {DbNames.EPYSL}..Unit U ON U.UnitID = YBCI.UnitID
                        LEFT JOIN YarnShadeBook Y ON Y.ShadeCode = YBCI.ShadeCode
                        LEFT Join YDBookingMaster YDBM ON YDBM.YBookingID = YBM.YBookingID And YDBM.YBookingID = YBCI.YBookingID
                        LEFT Join YDProductionMaster YPM ON YPM.YDBookingMasterID = YDBM.YDBookingMasterID
						Left Join FBookingAcknowledgementYarnLiability FBAY On FBAY.BookingID = YBM.BookingID And FBAY.ItemMasterID = YBCI.YItemMasterID
						Group By YBCI.YItemMasterID, YBCI.UnitID, U.DisplayUnitDesc, YBCI.Blending,
                        (Case When Blending = 1 then 'Blend' else 'Non-Blend' End), YBCI.YarnCategory, 
                        IsNull(YBCI.ShadeCode,''), Y.ShadeCode,
                        YBCI.Remarks, YBCI.Specification, YBCI.YD, YBCI.YDItem, YBM.BookingID,
                        ISV1.SegmentValue, ISV2.SegmentValue, ISV3.SegmentValue,
                        ISV4.SegmentValue, ISV5.SegmentValue, ISV6.SegmentValue,
                        ISV7.SegmentValue, ISV8.SegmentValue, YBM.SubGroupID, ISG.SubGroupName,
                        IsNull(FBAY.LiabilityQty,0)
                    )
					Select *From YBCI;";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();

                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                data.FreeConcepts = records.Read<FreeConceptMaster>().ToList();
                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                data.YarnSourceNameList = await records.ReadAsync<Select2OptionModel>();

                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> LiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> FBookingAckLiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                data.FBookingAcknowledgementYarnLiabilityList = records.Read<FBookingAcknowledgementYarnLiability>().ToList();

                //criteriaNames.ForEach(cn =>
                //{
                //    cn.FBAChildPlannings = fbaChildPlannings.Where(x => x.CriteriaName == cn.CriteriaName).ToList();
                //});

                List<FBookingAcknowledgementLiabilityDistribution> tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChilds.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChilds[i].ChildAckLiabilityDetails.AddRange(tmpLB);
                    }
                    bookingChilds[i].CriteriaNames = criteriaNames;
                    bookingChilds[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChilds[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChilds[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }
                    }
                }

                tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChildsCollarCuff.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChildsCollarCuff[i].ChildAckLiabilityDetails.AddRange(tmpLB);
                    }
                    bookingChilds[i].CriteriaNames = criteriaNames;
                    bookingChilds[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChildsCollarCuff[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChildsCollarCuff[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }
                    }
                }

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetNewBulkFabricAsync(int bookingId)
        {
            var query = $@"Select *From FabricBookingAcknowledge WHERE BookingID = {bookingId};

                        WITH FBA1 AS
                        (
                            SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	                        b.BookingNo,b.BookingDate,b.Remarks,StyleNo='',b.ExportOrderID,SLNo='',StyleMasterID=0,
	                        b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SeasonID=0,a.WithoutOB
                            FROM FabricBookingAcknowledge A
							INNER JOIN {DbNames.EPYSL}..BookingMaster b on b.BookingID = a.BookingID
                            WHERE A.BookingID = {bookingId}
                        ),
						FBA2 AS
                        (
                            SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	                        b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	                        b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB
                            FROM FabricBookingAcknowledge A
							Inner Join {DbNames.EPYSL}..SampleBookingMaster b on b.BookingID = a.BookingID
                            WHERE A.BookingID = {bookingId}
                        ),
						FBA AS
                        (
	                        SELECT *FROM FBA1
	                        UNION
	                        SELECT *FROM FBA2
                        ),
                        F AS(
                        SELECT FBA.*,BuyerName = CTO.ShortName, BuyerTeamName = CCT.TeamName,
                        C.CompanyName,Supplier.ShortName [SupplierName],Season.SeasonName, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                        FROM FBA
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FBA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FBA.BuyerTeamID
                        LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = FBA.CompanyID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBA.SupplierID
                        LEFT Join {DbNames.EPYSL}..ContactSeason Season On Season.SeasonID = FBA.SeasonID)

						SELECT * FROM F;

                        ----- Sample Booking Consumption Child (Fabric)
                           WITH FBA1 AS
                        (
                            SELECT B.BookingID,B.BookingNo, B.BuyerID, ExecutionCompanyID=B.CompanyID,
							A.BookingChildID, A.ItemMasterID,A.SubGroupID,A.A1ValueID,A.YarnBrandID,ReferenceSourceID=0,YarnSourceID=0,
							ReferenceNo='',ColorReferenceNo='',A.ConsumptionID,A.ItemGroupID, B.RevisionNo,
							C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
							C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
							A.LengthYds,A.LengthInch,A.FUPartID,A.ConsumptionQty,C.OrderUnitID,A.LabDipNo,A.Price,A.SuggestedPrice,
							RequiredQty=A.RequisitionQty,A.Remarks,ForBDSStyleNo='', B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
							FROM {DbNames.EPYSL}..BookingChild A
							LEFT JOIN {DbNames.EPYSL}..BookingMaster B ON B.BookingID=A.BookingID
							LEFT JOIN {DbNames.EPYSL}..BOMConsumption C ON C.ConsumptionID=A.ConsumptionID
                            LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
							WHERE A.BookingID = {bookingId} AND A.SubGroupID = 1
                        ),
						FBA2 AS
                        (
                           SELECT B.BookingID,B.BookingNo, B.BuyerID,B.ExecutionCompanyID,
						   BookingChildID=A.ConsumptionChildID, A.ItemMasterID,A.SubGroupID,C.A1ValueID,C.YarnBrandID,C.ReferenceSourceID,C.YarnSourceID,
						   C.ReferenceNo,C.ColorReferenceNo,A.ConsumptionID,A.ItemGroupID, B.RevisionNo,
						   C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
						   C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
						   C.LengthYds,C.LengthInch,C.FUPartID,A.ConsumptionQty,C.OrderUnitID,C.LabDipNo,C.Price,C.SuggestedPrice,
						   A.RequiredQty,C.Remarks,C.ForBDSStyleNo, B.SupplierID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
						   FROM {DbNames.EPYSL}..SampleBookingConsumptionChild A
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster B ON B.BookingID=A.BookingID
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingConsumption C ON C.ConsumptionID=A.ConsumptionID
                           LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = C.ConsumptionID And FBAC.ItemMasterID = A.ItemMasterID
						   WHERE A.BookingID = {bookingId} AND A.SubGroupID = 1
                        ),
						FBA AS
						(
							SELECT * FROM FBA1
							UNION
							SELECT * FROM FBA2
						),
						F AS (SELECT SBM.BookingChildID, SBM.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBM.ReferenceNo,SBM.ColorReferenceNo,SBM.YarnSourceID,SBM.ConsumptionID,SBM.BookingID,SBM.BookingNo,SBM.ItemGroupID,SBM.SubGroupID,SBM.Segment1Desc Construction,SBM.Segment2Desc Composition,SBM.Segment3Desc Color
						,SBM.Segment4Desc GSM,SBM.Segment5Desc FabricWidth,SBM.Segment7Desc KnittingType,SBM.LengthYds,SBM.LengthInch,SBM.FUPartID,SBM.ConsumptionQty,SBM.OrderUnitID BookingUnitID
						,SBM.A1ValueID,SBM.YarnBrandID,SBM.LabDipNo,SBM.Price,SBM.SuggestedPrice,PreviousBookingQty=IsNull((Select Sum(BookingQty) From {DbNames.EPYSL}..BookingChild_Bk Where RevisionNo = SBM.RevisionNo-1 And BookingChildID =  SBM.BookingChildID),0),SBM.RequiredQty BookingQty,SBM.ItemMasterID,SBM.BuyerID ContactID,
						SBM.ExecutionCompanyID,
						0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
						IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
						ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBM.Segment6Desc DyeingType, SBM.Remarks Instruction, SBM.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(SBM.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(SBM.ActualBookingQty,0)
						FROM FBA SBM
                        LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBM.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBM.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBM.A1ValueID
				        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBM.YarnBrandID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBM.ReferenceSourceID
                        Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBM.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                        WHERE SBM.BookingID = {bookingId}
						)
						SELECT * FROM F;

                        ----- Sample Booking Consumption Child (Collor & Cuff)
                          WITH FBA1 AS
                        (
                            SELECT B.BookingID,B.BookingNo, B.BuyerID, ExecutionCompanyID=B.CompanyID,
							A.BookingChildID, A.ItemMasterID,A.SubGroupID,A.A1ValueID,A.YarnBrandID,ReferenceSourceID=0,YarnSourceID=0,
							ReferenceNo='',ColorReferenceNo='',A.ConsumptionID,A.ItemGroupID, B.RevisionNo,
							C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
							C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
							A.LengthYds,A.LengthInch,A.FUPartID,A.ConsumptionQty,C.OrderUnitID,A.LabDipNo,A.Price,A.SuggestedPrice,
							RequiredQty=A.RequisitionQty,A.Remarks,ForBDSStyleNo='', B.SupplierID
							FROM {DbNames.EPYSL}..BookingChild A
							LEFT JOIN {DbNames.EPYSL}..BookingMaster B ON B.BookingID=A.BookingID
							LEFT JOIN {DbNames.EPYSL}..BOMConsumption C ON C.ConsumptionID=A.ConsumptionID
							WHERE A.BookingID = {bookingId} AND A.SubGroupID IN (11,12)
                        ),
						FBA2 AS
                        (
                           SELECT B.BookingID,B.BookingNo, B.BuyerID,B.ExecutionCompanyID,
						   BookingChildID=A.ConsumptionChildID, A.ItemMasterID,A.SubGroupID,C.A1ValueID,C.YarnBrandID,C.ReferenceSourceID,C.YarnSourceID,
						   C.ReferenceNo,C.ColorReferenceNo,A.ConsumptionID,A.ItemGroupID, B.RevisionNo,
						   C.Segment1Desc,C.Segment2Desc,C.Segment3Desc,
						   C.Segment4Desc,C.Segment5Desc,C.Segment6Desc, C.Segment7Desc,
						   C.LengthYds,C.LengthInch,C.FUPartID,A.ConsumptionQty,C.OrderUnitID,C.LabDipNo,C.Price,C.SuggestedPrice,
						   A.RequiredQty,C.Remarks,C.ForBDSStyleNo, B.SupplierID
						   FROM {DbNames.EPYSL}..SampleBookingConsumptionChild A
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster B ON B.BookingID=A.BookingID
						   LEFT JOIN {DbNames.EPYSL}..SampleBookingConsumption C ON C.ConsumptionID=A.ConsumptionID
						   WHERE A.BookingID = {bookingId} AND A.SubGroupID IN (11,12)
                        ),
						FBA AS
						(
							SELECT * FROM FBA1
							UNION
							SELECT * FROM FBA2
						),
						F AS (SELECT SBM.BookingChildID, SBM.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBM.ReferenceNo,SBM.ColorReferenceNo,SBM.YarnSourceID,SBM.ConsumptionID,SBM.BookingID,SBM.BookingNo,SBM.ItemGroupID,SBM.SubGroupID,SBM.Segment1Desc Construction,SBM.Segment2Desc Composition,SBM.Segment3Desc Color
						,SBM.Segment4Desc GSM,SBM.Segment5Desc FabricWidth,SBM.Segment7Desc KnittingType,SBM.LengthYds,SBM.LengthInch,SBM.FUPartID,SBM.ConsumptionQty,SBM.OrderUnitID BookingUnitID
						,SBM.A1ValueID,SBM.YarnBrandID,SBM.LabDipNo,SBM.Price,SBM.SuggestedPrice,PreviousBookingQty=IsNull((Select Sum(BookingQty) From {DbNames.EPYSL}..BookingChild_Bk Where RevisionNo = SBM.RevisionNo-1 And BookingChildID =  SBM.BookingChildID),0),SBM.RequiredQty BookingQty,SBM.ItemMasterID,SBM.BuyerID ContactID,
						SBM.ExecutionCompanyID,
						0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
						IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,
						ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBM.Segment6Desc DyeingType, SBM.Remarks Instruction, SBM.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
						FROM FBA SBM
                        LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBM.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBM.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBM.A1ValueID
				        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBM.YarnBrandID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBM.ReferenceSourceID
                        Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBM.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                        WHERE SBM.BookingID = {bookingId}
						)
						SELECT * FROM F;

                       ----Sample Booking Consumption AddProcess
                        SELECT  BookingID ,ProcessID,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionAddProcess where BookingID={bookingId};

                        ----- Sample Booking Consumption Child Details
                        SELECT ConsumptionID,BookingID,ItemGroupID,SubGroupID,ItemMasterID,RequiredQty BookingQty ,ConsumptionQty,RequiredUnitID BookingUnitID, 0 As TechnicalNameId
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionChild where BookingID={bookingId}

                        ----- Sample Booking Consumption Garment Part
                        SELECT  BookingID ,FUPartID,ConsumptionID
                         FROM {DbNames.EPYSL}..SampleBookingConsumptionGarmentPart where BookingID={bookingId}

                        ---Sample Booking Consumption Process
                        SELECT BookingID,ProcessID,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionProcess where BookingID={bookingId}

                        ------ Sample Booking Consumption Text
                        SELECT BookingID,UsesIn,AdditionalProcess,ApplicableProcess,YarnSubProgram,GarmentsColor GmtColor,ConsumptionID
                        FROM {DbNames.EPYSL}..SampleBookingConsumptionText  where BookingID={bookingId}

                        ------ Sample Booking Child Distribution 
                        SELECT *
                        FROM {DbNames.EPYSL}..SampleBookingChildDistribution  where BookingID={bookingId}

                        ----- SampleBooking ConsumptionYarn Sub Brand
                        SELECT SBKC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBKC.ReferenceNo,SBKC.ColorReferenceNo,SBKC.YarnSourceID,SCYS.BookingID, SCYS.YarnSubBrandID, SCYS.ConsumptionID, YSB.YarnSubBrandName
				        FROM {DbNames.EPYSL}..SampleBookingConsumptionYarnSubBrand SCYS
				        Inner Join {DbNames.EPYSL}..SampleBookingConsumption SBKC On SCYS.BookingID = SBKC.BookingID And SCYS.ConsumptionID = SBKC.ConsumptionID
                        Inner Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBKC.ItemGroupID
                        Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBKC.SubGroupID
                        Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBKC.ReferenceSourceID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBKC.YarnSourceID
				        Inner Join (
					        Select ETV.ValueID YarnSubBrandID, ETV.ValueName YarnSubBrandName
					        From {DbNames.EPYSL}..EntityTypeValue ETV
					        Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
				        ) YSB On YSB.YarnSubBrandID = SCYS.YarnSubBrandID
				        Where SCYS.BookingID = {bookingId};

                        ----- SampleBookingChildImage
                        SELECT BookingID,ImagePath
                        FROM {DbNames.EPYSL}..SampleBookingChildImage where BookingID={bookingId}

                        --Free Concept
                        Select SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,FB.BookingID, FB.BookingNo, FB.BookingDate ConceptDate, SBC.RequiredQty Qty,
                        CC.ItemMasterID, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment3ValueID ColorId, Color.SegmentValue ColorName, IM.Segment4ValueID GSMId,
                        IM.Segment7ValueID KnittingTypeId, IM.SubGroupID,FB.ExecutionCompanyID CompanyID, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                        FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                        INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster FB ON FB.BookingID = SBC.BookingID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Construction ON Construction.SegmentValueID = IM.Segment1ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Composition ON Composition.SegmentValueID = IM.Segment2ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Color ON Color.SegmentValueID = IM.Segment3ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Gsm ON Gsm.SegmentValueID = IM.Segment4ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue Width ON Width.SegmentValueID = IM.Segment5ValueID
                        --LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue DT ON DT.SegmentValueID = IM.Segment6ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue KT ON KT.SegmentValueID = IM.Segment7ValueID
                        --LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG ON ISG.SubGroupID = FB.SubGroupID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                        Left Join  {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                        LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FB.SupplierID
                        where FB.BookingID={bookingId};

                        --Technical Name
                        SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                        FROM FabricTechnicalName T
                        LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                        LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                        Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                         --YarnSource data load
				        Select Cast(a.ValueID as varchar) id, a.ValueName [text]
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Where b.EntityTypeName = 'Yarn Source'

                        --M/c type
                        ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                        FROM KnittingMachine a
                        INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                        Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                        --Where c.TypeName != 'Flat Bed'
                        GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                        --CriteriaNames
                         ;SELECT CriteriaName,CriteriaSeqNo, (CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                        FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                        GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                        --FBAChildPlannings
                        ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;
                        
                        --Liability Process
				        Select LChildID = 0,BookingChildID = 0,AcknowledgeID = 0,BookingID = 0,UnitID = 0, Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=0
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Where b.EntityTypeName = 'Process Liability';

                        --Liability Process data load
				        Select LChildID = IsNull(F.LChildID,0),BookingChildID = IsNull(F.BookingChildID,0),AcknowledgeID = IsNull(F.AcknowledgeID,0),BookingID = IsNull(F.BookingID,0),UnitID = IsNull(F.UnitID,0), Cast(a.ValueID as varchar) LiabilitiesProcessID, a.ValueName LiabilitiesName,LiabilityQty=IsNull(F.LiabilityQty,0)
				        From {DbNames.EPYSL}..EntityTypeValue a
				        Inner Join {DbNames.EPYSL}..EntityType b on b.EntityTypeID = a.EntityTypeID
				        Left Join (Select LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty From FBookingAcknowledgementLiabilityDistribution Where BookingID = {bookingId} Group By LChildID,BookingChildID,AcknowledgeID,BookingID,LiabilitiesProcessID,UnitID,LiabilityQty)F On F.LiabilitiesProcessID = a.ValueID
				        Where b.EntityTypeName = 'Process Liability';
                    

                    ;With YBM As
                    (
                        Select * From YarnBookingMaster_New Where BookingID = {bookingId}
                    ),
                    YBCI As (
                        Select YBCI.YItemMasterID As ItemMasterID, YBCI.UnitID, U.DisplayUnitDesc, YBCI.Blending,
                        (Case When Blending = 1 then 'Blend' else 'Non-Blend' End)BlendingName, YBCI.YarnCategory,  BookingQty=Sum(YBCI.BookingQty),
                        ShadeCode= IsNull(YBCI.ShadeCode,''), IsNull(Y.ShadeCode,'') as ShadeName,
                        YBCI.Remarks, YBCI.Specification, YBCI.YD, YBCI.YDItem, YBM.BookingID,
                        ISV1.SegmentValue As _segment1ValueDesc, ISV2.SegmentValue As _segment2ValueDesc, ISV3.SegmentValue As _segment3ValueDesc,
                        ISV4.SegmentValue As _segment4ValueDesc, ISV5.SegmentValue As _segment5ValueDesc, ISV6.SegmentValue As _segment6ValueDesc,
                        ISV7.SegmentValue As _segment7ValueDesc, ISV8.SegmentValue As _segment8ValueDesc, YBM.SubGroupID, ISG.SubGroupName,
                        LiabilityQty = IsNull(FBAY.LiabilityQty,0)
                        From YBM Inner Join YarnBookingChild_New YBC On YBM.YBookingID = YBC.YBookingID
                        Inner Join YarnBookingChildItem_New YBCI On YBCI.YBChildID = YBC.YBChildID
                        Left Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = YBM.SubGroupID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                        LEFT JOIN {DbNames.EPYSL}..Unit U ON U.UnitID = YBCI.UnitID
                        LEFT JOIN YarnShadeBook Y ON Y.ShadeCode = YBCI.ShadeCode
                        LEFT Join YDBookingMaster YDBM ON YDBM.YBookingID = YBM.YBookingID And YDBM.YBookingID = YBCI.YBookingID
                        LEFT Join YDProductionMaster YPM ON YPM.YDBookingMasterID = YDBM.YDBookingMasterID
						Left Join FBookingAcknowledgementYarnLiability FBAY On FBAY.BookingID = YBM.BookingID And FBAY.ItemMasterID = YBCI.YItemMasterID
						Group By YBCI.YItemMasterID, YBCI.UnitID, U.DisplayUnitDesc, YBCI.Blending,
                        (Case When Blending = 1 then 'Blend' else 'Non-Blend' End), YBCI.YarnCategory, 
                        IsNull(YBCI.ShadeCode,''), Y.ShadeCode,
                        YBCI.Remarks, YBCI.Specification, YBCI.YD, YBCI.YDItem, YBM.BookingID,
                        ISV1.SegmentValue, ISV2.SegmentValue, ISV3.SegmentValue,
                        ISV4.SegmentValue, ISV5.SegmentValue, ISV6.SegmentValue,
                        ISV7.SegmentValue, ISV8.SegmentValue, YBM.SubGroupID, ISG.SubGroupName,
                        IsNull(FBAY.LiabilityQty,0)
                    )
					Select *From YBCI";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FabricBookingAcknowledge> fbaList = records.Read<FabricBookingAcknowledge>().ToList();
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();
                data.FabricBookingAcknowledgeList = fbaList;
                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                data.FreeConcepts = records.Read<FreeConceptMaster>().ToList();
                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                data.YarnSourceNameList = await records.ReadAsync<Select2OptionModel>();

                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> LiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                List<FBookingAcknowledgementLiabilityDistribution> FBookingAckLiabilityDistributionList = records.Read<FBookingAcknowledgementLiabilityDistribution>().ToList();
                data.FBookingAcknowledgementYarnLiabilityList = records.Read<FBookingAcknowledgementYarnLiability>().ToList();
                //criteriaNames.ForEach(cn =>
                //{
                //    cn.FBAChildPlannings = fbaChildPlannings.Where(x => x.CriteriaName == cn.CriteriaName).ToList();
                //});
                List<FBookingAcknowledgementLiabilityDistribution> tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChilds.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChilds[i].ChildAckLiabilityDetails.AddRange(tmpLB);
                    }
                    bookingChilds[i].CriteriaNames = criteriaNames;
                    bookingChilds[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChilds[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChilds[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }

                    }
                }

                tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                for (int i = 0; i < bookingChildsCollarCuff.Count; i++)
                {
                    tmpLB = new List<FBookingAcknowledgementLiabilityDistribution>();
                    if (LiabilityDistributionList.Count() > 0)
                    {
                        tmpLB.AddRange(LiabilityDistributionList);
                        bookingChildsCollarCuff[i].ChildAckLiabilityDetails.AddRange(tmpLB);
                    }
                    bookingChildsCollarCuff[i].CriteriaNames = criteriaNames;
                    bookingChildsCollarCuff[i].FBAChildPlannings = fbaChildPlannings;

                    foreach (FBookingAcknowledgementLiabilityDistribution obitem in bookingChildsCollarCuff[i].ChildAckLiabilityDetails)
                    {
                        List<FBookingAcknowledgementLiabilityDistribution> objLBList = FBookingAckLiabilityDistributionList.Where(j => j.BookingChildID == bookingChildsCollarCuff[i].BookingChildID && j.LiabilitiesProcessID == obitem.LiabilitiesProcessID).ToList();
                        foreach (FBookingAcknowledgementLiabilityDistribution objLB in objLBList)
                        {
                            if (objLB.IsNotNull())
                            {
                                obitem.LChildID = objLB.LChildID;
                                obitem.BookingChildID = objLB.BookingChildID;
                                obitem.AcknowledgeID = objLB.AcknowledgeID;
                                obitem.BookingID = objLB.BookingID;
                                obitem.UnitID = objLB.UnitID;
                                obitem.LiabilityQty = objLB.LiabilityQty;
                            }
                        }

                    }
                }

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetDataAsync(int fbAckId)
        {
            var query =
                $@"-- Master Data
                WITH M AS (
                    SELECT FBA.FBAckID,	FBA.BookingID,FBA.BookingNo,FBA.BookingDate,FBA.SLNo,FBA.StyleMasterID,FBA.StyleNo,FBA.SubGroupID,
	                FBA.BuyerID,FBA.BuyerTeamID,FBA.SupplierID,FBA.ExportOrderID,FBA.ExecutionCompanyID,FBA.UnAcknowledgeReason,FBA.BaseTypeId,
					OrderQty = CASE WHEN FBA.WithoutOB=1 THEN SBM.OrderQty ELSE BM.RePurchaseQty END,
					Remarks = CASE WHEN FBA.WithoutOB=1 THEN SBM.Remarks ELSE BM.Remarks END,
					SeasonID = CASE WHEN FBA.WithoutOB=1 THEN SBM.SeasonID ELSE 0 END,
					BookingBy = CASE WHEN FBA.WithoutOB=1 THEN SBM.AddedBy ELSE BM.AddedBy END

                    FROM FBookingAcknowledge FBA
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
					LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    WHERE FBA.FBAckID={fbAckId}
                )
                SELECT M.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,
                M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,M.UnAcknowledgeReason, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,
                Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, M.BaseTypeId
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                LEFT JOIN {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT JOIN {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

                -- Booking Acknowledge Child (Fabric)
                SELECT BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
                BAC.ExportOrderID, BAC.ItemGroupID, BAC.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.ColorID, BAC.SizeID, BAC.TechPackID,
                BAC.ConsumptionQty, BAC.BookingQty, TotalQty = BAC.BookingQty, BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
                BAC.FUPartID, BAC.A1ValueID, BAC.YarnBrandID, BAC.ContactID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
                BAC.ExecutionCompanyID, BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
                BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
                BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
                IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId, ISG.SubGroupName,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, ETV2.ValueName Brand,

	            BookingNo = FCM.GroupConceptNo,
	            ContactID = FCM.BuyerID,
	            ExecutionCompanyID = FCM.CompanyID,

	            Construction = ISV1.SegmentValue,
	            Composition = ISV2.SegmentValue,
	            Color = ISV3.SegmentValue,
	            GSM = ISV4.SegmentValue,
	            FabricWidth = ISV5.SegmentValue,
	            KnittingType = ISV7.SegmentValue,
	            DyeingType = ISV6.SegmentValue,

	            Instruction = BAC.Remarks,
	            ForBDSStyleNo = BA.StyleNo,
	            T.TechnicalName, KMS.SubClassName MachineType,
                BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
                BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, KMS.TypeID As KTypeId
                ,BAC.DayValidDurationId

                FROM FBookingAcknowledgeChild BAC
	            LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                LEFT JOIN FreeConceptMaster FCM ON FCM.BookingChildID = BAC.BookingChildID  AND FCM.ConsumptionID = BAC.ConsumptionID

                LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BAC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BAC.SubGroupID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BAC.A1ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BAC.YarnBrandID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BAC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BAC.MachineTypeId
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV2 ON ETV2.ValueID = BAC.BrandID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = BA.SupplierID
                WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID = 1;

                -- Booking Acknowledge Child (Collar & Cuff)
                SELECT BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
                BAC.ExportOrderID, BAC.ItemGroupID, BAC.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.ColorID, BAC.SizeID, BAC.TechPackID,
                BAC.ConsumptionQty, BAC.BookingQty, TotalQty = BAC.BookingQty, BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
                BAC.FUPartID, BAC.A1ValueID, BAC.YarnBrandID, BAC.ContactID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
                BAC.ExecutionCompanyID, BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
                BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
                BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
                IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId, ISG.SubGroupName,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, ETV2.ValueName Brand,

                BookingNo = FCM.GroupConceptNo,
                ContactID = FCM.BuyerID,
                ExecutionCompanyID = FCM.CompanyID,

                Construction = ISV1.SegmentValue,
                Composition = ISV2.SegmentValue,
                Color = ISV5.SegmentValue,
                GSM = '',
                Length = CONVERT(decimal(18,2),ISV3.SegmentValue),
                Width = CONVERT(decimal(18,2),ISV4.SegmentValue),
                KnittingType = '',
                DyeingType = '',

                Instruction = BAC.Remarks,
                ForBDSStyleNo = BA.StyleNo,
                T.TechnicalName, KMS.SubClassName MachineType,
                BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
                BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, KMS.TypeID As KTypeId
                ,BAC.DayValidDurationId

                FROM FBookingAcknowledgeChild BAC
                LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                LEFT JOIN FreeConceptMaster FCM ON FCM.BookingChildID = BAC.BookingChildID  AND FCM.ConsumptionID = BAC.ConsumptionID

                LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BAC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BAC.SubGroupID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BAC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BAC.YarnBrandID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BAC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BAC.MachineTypeId
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV2 ON ETV2.ValueID = BAC.BrandID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = BA.SupplierID
                WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (11,12);

                ;With A As(
	                select Min(FBAChildPlanningID) FBAChildPlanningID, BookingChildID, AcknowledgeID, CriteriaID
	                From FBAChildPlanning
	                Where AcknowledgeID = {fbAckId}
	                Group By BookingChildID, AcknowledgeID, CriteriaID
                )
                SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                FROM A CP
                INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                GROUP BY cp.BookingChildID, CR.CriteriaName

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
                ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

	            --FBookingAcknowledgeChildDetails (Fabric)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={fbAckId} AND B.SubGroupID IN (1);

			    --FBookingAcknowledgeChildDetails (Collar & Cuff)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={fbAckId} AND B.SubGroupID IN (11,12);

                --Brand List
				;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
				FROM KnittingMachine KM
				LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
				ORDER BY [text];

                --Distribution List
                ;SELECT A.*
                FROM FBookingAcknowledgeChildDistribution A
                LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                WHERE B.AcknowledgeID={fbAckId};

                -- DayValidDuration
                {CommonQueries.GetDayValidDurations()}
                
                ";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();
                //List<FBAChildPlanning> childPlanningCriterias = records.Read<FBAChildPlanning>().ToList();
                List<FBAChildPlanning> childPlanningCriteriaNameWithIds = records.Read<FBAChildPlanning>().ToList();

                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();

                var fabricChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                var collarCuffChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.KnittingMachines = records.Read<KnittingMachine>().ToList();

                bookingChilds.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                    bc.ChildDetails = fabricChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });
                bookingChildsCollarCuff.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                    bc.ChildDetails = collarCuffChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();

                #region DayValidDurations

                data.DayValidDurations = await records.ReadAsync<Select2OptionModel>();
                data.Childs = new List<FBookingAcknowledgeChild>();
                data.Childs.AddRange(data.FBookingChild);
                data.Childs.AddRange(data.FBookingChildCollor);
                data.Childs.AddRange(data.FBookingChildCuff);
                data.DayValidDurations = CommonFunction.GetDayValidDurations(data.DayValidDurations, string.Join(",", data.Childs.Where(x => x.DayValidDurationId > 0).Select(x => x.DayValidDurationId).Distinct()));
                data.Childs = new List<FBookingAcknowledgeChild>();

                #endregion

                data.FBookingChild.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });
                data.FBookingChildCollor.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });
                data.FBookingChildCuff.Where(x => x.DayValidDurationId > 0).ToList().ForEach(x =>
                {
                    var dayObj = data.DayValidDurations.ToList().Find(d => d.id == x.DayValidDurationId.ToString());
                    if (dayObj.IsNotNull())
                    {
                        x.DayValidDurationName = dayObj.text;
                        x.DayDuration = Convert.ToInt32(dayObj.additionalValue);
                    }
                });

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetDataLabdipAsync(int bookingId, bool isRnD)
        {
            string condition = "";
            if (isRnD)
            {
                condition = $@" AND SBC.IsFabricReq = 1";
            }

            var query =
              $@"
                -- Master Data
                WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo,RevisionNo = ISNULL(FBA.RevisionNo,M.PreRevisionNo),FBA.UnAcknowledgeReason
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

                -- Booking Acknowledge Child (Fabric)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,SBC.ItemGroupID,SBC.SubGroupID,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,SBC.Segment3Desc Color
                ,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,SBC.Segment7Desc KnittingType,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID,
                SBM.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
                IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,SBC.IsFabricReq,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType, SBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                ,FBC.MachineTypeId, FBC.TechnicalNameID,FBC.TotalDays, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID=1 {condition};

                -- Booking Acknowledge Child (Collar & Cuff)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,
                SBC.ItemGroupID,SBC.SubGroupID,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,
                SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID, SBM.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, SBC.Remarks Instruction, SBC.ForBDSStyleNo,SBC.IsFabricReq,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType,
                SBC.Segment1Desc Description,SBC.Segment2Desc Type, SBC.Segment3Desc Length, SBC.Segment4Desc Height, SBC.Segment5Desc Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,FBC.MachineTypeId, FBC.TechnicalNameID, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID IN (11, 12) {condition};

                ;With A As(
	                select Min(FCP.FBAChildPlanningID) FBAChildPlanningID, FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
	                From FBAChildPlanning FCP
					Inner Join FBookingAcknowledgeChild FBAC ON FCP.BookingChildID=FBAC.BookingChildID
	                Where FBAC.BookingID = {bookingId}
	                Group By FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
                )
                SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                FROM A CP
                INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                GROUP BY cp.BookingChildID, CR.CriteriaName

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
                ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

	            --FBookingAcknowledgeChildDetails (Fabric)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (1);

			    --FBookingAcknowledgeChildDetails (Collar & Cuff)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (11,12);

                --Brand List
				;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
				FROM KnittingMachine KM
				LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
				ORDER BY [text];
                --Distribution List
                ;SELECT A.*
                FROM FBookingAcknowledgeChildDistribution A
                LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                WHERE B.AcknowledgeID={bookingId};
                
                ";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();
                //List<FBAChildPlanning> childPlanningCriterias = records.Read<FBAChildPlanning>().ToList();
                List<FBAChildPlanning> childPlanningCriteriaNameWithIds = records.Read<FBAChildPlanning>().ToList();

                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();

                var fabricChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                var collarCuffChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.KnittingMachines = records.Read<KnittingMachine>().ToList();

                bookingChilds.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.AcknowledgeID == bc.AcknowledgeID).ToList();
                    bc.ChildDetails = fabricChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });
                bookingChildsCollarCuff.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.AcknowledgeID == bc.AcknowledgeID).ToList();
                    bc.ChildDetails = collarCuffChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetDataLabdipAcknowledgedDataAsync(int bookingId, bool isRnD)
        {
            string condition = "";
            if (isRnD)
            {
                condition = $@" AND SBC.IsFabricReq = 1";
            }

            var query =
                $@"
                -- Master Data
                WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo,RevisionNo = ISNULL(FBA.RevisionNo,M.PreRevisionNo),FBA.UnAcknowledgeReason
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

                -- Booking Acknowledge Child (Fabric)
                SELECT ROW_NUMBER() OVER(ORDER BY FBC.ReferenceSourceID ASC) AS BookingChildID, FBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , FBC.ReferenceNo,FBC.ColorReferenceNo,FBC.YarnSourceID,FBC.ConsumptionID,FBC.BookingID,FBA.BookingNo,FBC.ItemGroupID,FBC.SubGroupID,ISV1.SegmentValue Construction,ISV2.SegmentValue Composition,ISV3.SegmentValue Color
                ,ISV4.SegmentValue GSM,ISV5.SegmentValue FabricWidth,ISV7.SegmentValue KnittingType,FBC.LengthYds,FBC.LengthInch,FBC.FUPartID,FBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,FBC.A1ValueID,FBC.YarnBrandID,FBC.LabDipNo,FBC.Price,FBC.SuggestedPrice,FBC.ConsumptionQty BookingQty,CC.ItemMasterID,FBA.BuyerID ContactID,
                FBA.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
                IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,FBC.IsFabricReq,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, ISV6.SegmentValue DyeingType, FBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                ,FBC.MachineTypeId, FBC.TechnicalNameID,FBC.TotalDays, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID         
				FROM FBookingAcknowledgeChild FBC
				INNER JOIN {DbNames.EPYSL}..SampleBookingConsumption SBC ON SBC.BookingID = FBC.BookingID AND SBC.ConsumptionID = FBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = FBC.ConsumptionID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID=FBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = FBC.SubGroupID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = FBC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = FBC.A1ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = FBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = FBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = FBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBA.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = FBC.ConsumptionID And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE FBC.BookingID={bookingId} AND FBC.SubGroupID=1  {condition};

                -- Booking Acknowledge Child (Collar & Cuff)
                 SELECT ROW_NUMBER() OVER(ORDER BY FBC.ReferenceSourceID ASC) AS BookingChildID, FBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , FBC.ReferenceNo,FBC.ColorReferenceNo,FBC.YarnSourceID,FBC.ConsumptionID,FBC.BookingID,FBA.BookingNo,
                FBC.ItemGroupID,FBC.SubGroupID,FBC.LengthYds,FBC.LengthInch,FBC.FUPartID,FBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, FBC.A1ValueID,FBC.YarnBrandID,FBC.LabDipNo,
                FBC.Price,FBC.SuggestedPrice,FBC.ConsumptionQty BookingQty,CC.ItemMasterID,FBA.BuyerID ContactID, FBA.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, FBC.Remarks Instruction, SBC.ForBDSStyleNo,FBC.IsFabricReq,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, ISV6.SegmentValue DyeingType,
                ISV1.SegmentValue Description,ISV2.SegmentValue Type, ISV3.SegmentValue Length, ISV4.SegmentValue Height, ISV5.SegmentValue Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,FBC.MachineTypeId, FBC.TechnicalNameID, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM FBookingAcknowledgeChild FBC
				INNER JOIN {DbNames.EPYSL}..SampleBookingConsumption SBC ON SBC.BookingID = FBC.BookingID AND SBC.ConsumptionID = FBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID=FBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = FBC.SubGroupID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = FBC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = FBC.A1ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = FBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = FBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = FBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = FBA.SupplierID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID IN (11, 12) {condition};

                ;With A As(
	                select Min(FCP.FBAChildPlanningID) FBAChildPlanningID, FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
	                From FBAChildPlanning FCP
					Inner Join FBookingAcknowledgeChild FBAC ON FCP.BookingChildID=FBAC.BookingChildID
	                Where FBAC.BookingID = {bookingId}
	                Group By FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
                )
                SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                FROM A CP
                INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                GROUP BY cp.BookingChildID, CR.CriteriaName

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
                ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

	            --FBookingAcknowledgeChildDetails (Fabric)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (1);

			    --FBookingAcknowledgeChildDetails (Collar & Cuff)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (11,12);

                --Brand List
				;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
				FROM KnittingMachine KM
				LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
				ORDER BY [text];
                --Distribution List
                ;SELECT A.*
                FROM FBookingAcknowledgeChildDistribution A
                LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                WHERE B.AcknowledgeID={bookingId};
                
                ";
            /*
              var query =
                $@"
                -- Master Data
                WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo,RevisionNo = ISNULL(FBA.RevisionNo,M.PreRevisionNo),FBA.UnAcknowledgeReason
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

                -- Booking Acknowledge Child (Fabric)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,SBC.ItemGroupID,SBC.SubGroupID,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,SBC.Segment3Desc Color
                ,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,SBC.Segment7Desc KnittingType,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID,
                SBM.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
                IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,SBC.IsFabricReq,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType, SBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                ,FBC.MachineTypeId, FBC.TechnicalNameID,FBC.TotalDays, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID=1 {condition};

                -- Booking Acknowledge Child (Collar & Cuff)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,
                SBC.ItemGroupID,SBC.SubGroupID,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,
                SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID, SBM.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, SBC.Remarks Instruction, SBC.ForBDSStyleNo,SBC.IsFabricReq,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType,
                SBC.Segment1Desc Description,SBC.Segment2Desc Type, SBC.Segment3Desc Length, SBC.Segment4Desc Height, SBC.Segment5Desc Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,FBC.MachineTypeId, FBC.TechnicalNameID, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID IN (11, 12) {condition};

                ;With A As(
	                select Min(FCP.FBAChildPlanningID) FBAChildPlanningID, FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
	                From FBAChildPlanning FCP
					Inner Join FBookingAcknowledgeChild FBAC ON FCP.BookingChildID=FBAC.BookingChildID
	                Where FBAC.BookingID = {bookingId}
	                Group By FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
                )
                SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                FROM A CP
                INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                GROUP BY cp.BookingChildID, CR.CriteriaName

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
                ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

	            --FBookingAcknowledgeChildDetails (Fabric)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (1);

			    --FBookingAcknowledgeChildDetails (Collar & Cuff)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (11,12);

                --Brand List
				;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
				FROM KnittingMachine KM
				LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
				ORDER BY [text];
                --Distribution List
                ;SELECT A.*
                FROM FBookingAcknowledgeChildDistribution A
                LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                WHERE B.AcknowledgeID={bookingId};
                
                ";
             */
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();
                //List<FBAChildPlanning> childPlanningCriterias = records.Read<FBAChildPlanning>().ToList();
                List<FBAChildPlanning> childPlanningCriteriaNameWithIds = records.Read<FBAChildPlanning>().ToList();

                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();

                var fabricChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                var collarCuffChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.KnittingMachines = records.Read<KnittingMachine>().ToList();

                bookingChilds.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.AcknowledgeID == bc.AcknowledgeID).ToList();
                    bc.ChildDetails = fabricChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });
                bookingChildsCollarCuff.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.AcknowledgeID == bc.AcknowledgeID).ToList();
                    bc.ChildDetails = collarCuffChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetDataLabdipRevisionAsync(int bookingId)
        {
            var query =
                $@"
                -- Master Data
                WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo,RevisionNo = ISNULL(FBA.RevisionNo,M.PreRevisionNo)
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

                -- Booking Acknowledge Child (Fabric)
                SELECT case when isnull(FBC.BookingChildID,0)<>0 then FBC.BookingChildID else ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) end AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,SBC.ItemGroupID,SBC.SubGroupID,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,SBC.Segment3Desc Color
                ,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,SBC.Segment7Desc KnittingType,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID,
                SBM.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
                IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,SBC.IsFabricReq,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType, SBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                ,FBC.MachineTypeId, FBC.TechnicalNameID,FBC.TotalDays, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID=1;

                -- Booking Acknowledge Child (Collar & Cuff)
                SELECT case when isnull(FBC.BookingChildID,0)<>0 then FBC.BookingChildID else ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) end AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,
                SBC.ItemGroupID,SBC.SubGroupID,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,
                SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID, SBM.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, SBC.Remarks Instruction, SBC.ForBDSStyleNo,SBC.IsFabricReq,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType,
                SBC.Segment1Desc Description,SBC.Segment2Desc Type, SBC.Segment3Desc Length, SBC.Segment4Desc Height, SBC.Segment5Desc Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,FBC.MachineTypeId, FBC.TechnicalNameID, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID IN (11, 12);

                ;With A As(
	                select Min(FCP.FBAChildPlanningID) FBAChildPlanningID, FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
	                From FBAChildPlanning FCP
					Inner Join FBookingAcknowledgeChild FBAC ON FCP.BookingChildID=FBAC.BookingChildID
	                Where FBAC.BookingID = {bookingId}
	                Group By FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
                )
                SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                FROM A CP
                INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                GROUP BY cp.BookingChildID, CR.CriteriaName

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
                ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

	            --FBookingAcknowledgeChildDetails (Fabric)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (1);

			    --FBookingAcknowledgeChildDetails (Collar & Cuff)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (11,12);

                --Brand List
				;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
				FROM KnittingMachine KM
				LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
				ORDER BY [text];
                --Distribution List
                ;SELECT A.*
                FROM FBookingAcknowledgeChildDistribution A
                LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                WHERE B.AcknowledgeID={bookingId};
                
                ";
            /*
            var query =
                $@"
                -- Master Data
                WITH M AS (
                    SELECT SBM.BookingID,SBM.BookingNo,SBM.BookingDate,SBM.SLNo,SBM.StyleMasterID,SBM.StyleNo,
                    SubGroupID = 1,SBM.OrderQty,SBM.BuyerID,SBM.BuyerTeamID,SBM.SupplierID,SBM.ExportOrderID,SBM.ExecutionCompanyID,SBM.Remarks,SBM.SeasonID,Count(*) Over() TotalRows, SBM.AddedBy BookingBy
                    ,SBM.RevisionNo PreRevisionNo
                    FROM {DbNames.EPYSL}..SampleBookingMaster SBM
                    WHERE SBM.BookingID={bookingId}
                )
                SELECT FBA.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,M.OrderQty BookingQty,M.BuyerID,M.BuyerTeamID,M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID,
                CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,Supplier.ShortName [SupplierName],Season.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,M.PreRevisionNo,RevisionNo = ISNULL(FBA.RevisionNo,M.PreRevisionNo)
                FROM M
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.ExecutionCompanyID
                LEFT JOIN FBookingAcknowledge FBA ON FBA.BookingID=M.BookingID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason Season On M.SeasonID = Season.SeasonID;

                -- Booking Acknowledge Child (Fabric)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,SBC.ItemGroupID,SBC.SubGroupID,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,SBC.Segment3Desc Color
                ,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,SBC.Segment7Desc KnittingType,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID
                ,SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID,
                SBM.ExecutionCompanyID, 0 As TechnicalNameId,ISG.SubGroupName,'1' As ConceptTypeID,IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
                IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId,SBC.IsFabricReq,
                ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType, SBC.Remarks Instruction, SBC.ForBDSStyleNo, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID,LiabilitiesBookingQty=ISNULL(FBAC.LiabilitiesBookingQty,0),ActualBookingQty=ISNULL(FBAC.ActualBookingQty,0)
                ,FBC.MachineTypeId, FBC.TechnicalNameID,FBC.TotalDays, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID 
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                LEFT JOIN FBookingAcknowledgeChild FBAC On FBAC.ConsumptionID = SBC.ConsumptionID And FBAC.ItemMasterID = CC.ItemMasterID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID=1;

                -- Booking Acknowledge Child (Collar & Cuff)
                SELECT ROW_NUMBER() OVER(ORDER BY SBC.ReferenceSourceID ASC) AS BookingChildID, SBC.ReferenceSourceID,RSETV.ValueName ReferenceSourceName , SBC.ReferenceNo,SBC.ColorReferenceNo,SBC.YarnSourceID,SBC.ConsumptionID,SBC.BookingID,SBM.BookingNo,
                SBC.ItemGroupID,SBC.SubGroupID,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.ConsumptionQty,SBC.OrderUnitID BookingUnitID, SBC.A1ValueID,SBC.YarnBrandID,SBC.LabDipNo,
                SBC.Price,SBC.SuggestedPrice,SBC.ConsumptionQty BookingQty,CC.ItemMasterID,SBM.BuyerID ContactID, SBM.ExecutionCompanyID, 0 As TechnicalNameId,
                ISG.SubGroupName,'1' As ConceptTypeID, SBC.Remarks Instruction, SBC.ForBDSStyleNo,SBC.IsFabricReq,
                IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId, IM.Segment5ValueID ColorId,IM.Segment7ValueID KnittingTypeId,
                IM.Segment4ValueID GSMId, ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, SBC.Segment6Desc DyeingType,
                SBC.Segment1Desc Description,SBC.Segment2Desc Type, SBC.Segment3Desc Length, SBC.Segment4Desc Height, SBC.Segment5Desc Color, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID
                ,FBC.MachineTypeId, FBC.TechnicalNameID, T.TechnicalName, MachineType = b.SubClassName, b.SubClassID
                FROM {DbNames.EPYSL}..SampleBookingConsumption SBC
                INNER JOIN {DbNames.EPYSL}..SampleBookingConsumptionChild CC ON CC.ConsumptionID = SBC.ConsumptionID
                INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID=SBC.BookingID
                INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
                LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingID = SBC.BookingID AND FBC.ConsumptionID = SBC.ConsumptionID
                LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBC.TechnicalNameID
                LEFT JOIN KnittingMachineSubClass b ON b.SubClassID = FBC.MachineTypeId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = CC.ItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = SBC.A1ValueID
                LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
                Left Join {DbNames.EPYSL}..EntityTypeValue RSETV ON RSETV.ValueID = SBC.ReferenceSourceID
                Left Join {DbNames.EPYSL}..EntityTypeValue YSETV ON YSETV.ValueID = SBC.YarnSourceID
                LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = SBM.SupplierID
                WHERE SBC.BookingID={bookingId} AND SBC.SubGroupID IN (11, 12);

                ;With A As(
	                select Min(FCP.FBAChildPlanningID) FBAChildPlanningID, FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
	                From FBAChildPlanning FCP
					Inner Join FBookingAcknowledgeChild FBAC ON FCP.BookingChildID=FBAC.BookingChildID
	                Where FBAC.BookingID = {bookingId}
	                Group By FCP.BookingChildID, FCP.AcknowledgeID, FCP.CriteriaID
                )
                SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                FROM A CP
                INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                GROUP BY cp.BookingChildID, CR.CriteriaName

                --Technical Name
                SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                FROM FabricTechnicalName T
                LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                --M/c type
                ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                FROM KnittingMachine a
                INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                --Where c.TypeName != 'Flat Bed'
                GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                --CriteriaNames
                 ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                --FBAChildPlannings
                ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

	            --FBookingAcknowledgeChildDetails (Fabric)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (1);

			    --FBookingAcknowledgeChildDetails (Collar & Cuff)
				SELECT *
				FROM FBookingAcknowledgeChildDetails A
				LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
				WHERE B.AcknowledgeID={bookingId} AND B.SubGroupID IN (11,12);

                --Brand List
				;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
				FROM KnittingMachine KM
				LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
				LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
				ORDER BY [text];
                --Distribution List
                ;SELECT A.*
                FROM FBookingAcknowledgeChildDistribution A
                LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                WHERE B.AcknowledgeID={bookingId};
                
                ";
             */
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();
                //List<FBAChildPlanning> childPlanningCriterias = records.Read<FBAChildPlanning>().ToList();
                List<FBAChildPlanning> childPlanningCriteriaNameWithIds = records.Read<FBAChildPlanning>().ToList();

                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();

                var fabricChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                var collarCuffChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.KnittingMachines = records.Read<KnittingMachine>().ToList();

                bookingChilds.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.AcknowledgeID == bc.AcknowledgeID).ToList();
                    bc.ChildDetails = fabricChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });
                bookingChildsCollarCuff.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                    bc.ChildDetails = collarCuffChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));
                });

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetFBAcknowledge(int fbAckId)
        {
            var query =
                $@"SELECT FBA.*
                    FROM FBookingAcknowledge FBA
                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    WHERE FBA.FBAckID={fbAckId};

                    SELECT BAC.*
                    FROM FBookingAcknowledgeChild BAC
                    LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildAddProcess A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildGarmentPart A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildProcess A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildDistribution A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildText A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildYarnSubBrand A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM BDSDependentTNACalander A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeImage A
                    LEFT JOIN FBookingAcknowledge BA ON BA.BookingID=A.BookingID
                    WHERE BA.FBAckID={fbAckId};

                    SELECT FBAC.*
                    FROM FBAChildPlanning FBAC
                    WHERE FBAC.AcknowledgeID = {fbAckId};

                    --All FBAChildPlannings
                    ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                    --For Bulk Booking
                    WITH 
                    FBA AS
                    (
	                    SELECT BookingNo
	                    FROM FBookingAcknowledge
	                    WHERE FBAckID = {fbAckId}
                    )
                    SELECT FBA1.*
                    FROM FBookingAcknowledge FBA1
                    INNER JOIN FBA ON FBA.BookingNo = FBA1.BookingNo;

                    WITH 
                    FBA AS
                    (
	                    SELECT BookingNo
	                    FROM FBookingAcknowledge
	                    WHERE FBAckID = {fbAckId}
                    )
                    SELECT FBC.*
                    FROM FBookingAcknowledgeChild FBC
                    INNER JOIN FBookingAcknowledge FBA1 ON FBA1.FBAckID = FBC.AcknowledgeID
                    INNER JOIN FBA ON FBA.BookingNo = FBA1.BookingNo;";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                data.FBookingChild = records.Read<FBookingAcknowledgeChild>().ToList();
                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.BDSDependentTNACalander = records.Read<BDSDependentTNACalander>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                var fBAChildPlannings = records.Read<FBAChildPlanning>().ToList();

                data.AllChildPlannings = records.Read<FBAChildPlanning>().ToList();
                data.FBookingAcknowledgeList = records.Read<FBookingAcknowledge>().ToList();
                data.FBChilds = records.Read<FBookingAcknowledgeChild>().ToList();

                data.FBookingChild.ForEach(x =>
                {
                    x.FBAChildPlannings = fBAChildPlannings.Where(y => y.BookingChildID == x.BookingChildID).ToList();
                    x.CriteriaIDs = string.Join(",", x.FBAChildPlannings.Select(y => y.CriteriaID).Distinct());
                });
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetFBAcknowledgeWithChilds(int fbAckId)
        {
            var query =
                $@"SELECT FBA.*
                    FROM FBookingAcknowledge FBA
                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    WHERE FBA.FBAckID={fbAckId};

                    SELECT BAC.*
                    FROM FBookingAcknowledgeChild BAC
                    LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                    WHERE BAC.AcknowledgeID = {fbAckId} AND BAC.SubGroupID IN (1,11,12);";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);
                data.FBookingChild = records.Read<FBookingAcknowledgeChild>().ToList();
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetFBAcknowledgeBulk(string bookingNo, bool isAddition)
        {
            //int isAdditionValue = isAddition ? 0 : 1;
            string additionQuery = isAddition ? " AND YBM.IsAddition = 1 " : " AND YBM.IsAddition = 0 ";

            var query =
                $@"SELECT FBA.*, PreProcessRevNo = FBA1.RevisionNo
                FROM FBookingAcknowledge FBA
                LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                WHERE FBA.BookingNo = '{bookingNo}'

                ;WITH
                BBC AS
                (
	                SELECT BAC.*
	                FROM FBookingAcknowledgeChild BAC
	                INNER Join {DbNames.EPYSL}..BookingChild A on A.ConsumptionID = BAC.ConsumptionID AND A.ItemMasterID = BAC.ItemMasterID
	                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID = BAC.AcknowledgeID
	                WHERE BA.BookingNo = '{bookingNo}' AND BAC.BookingQty > 0 AND BAC.SubGroupID IN (1,11,12) AND BAC.IsDeleted=0
                ),
                SBC AS
                (
	                SELECT BAC.*
	                FROM FBookingAcknowledgeChild BAC
	                INNER Join {DbNames.EPYSL}..SampleBookingConsumption A on A.ConsumptionID = BAC.ConsumptionID
	                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID = BAC.AcknowledgeID
	                WHERE BA.BookingNo = '{bookingNo}' AND BAC.BookingQty > 0 AND BAC.SubGroupID IN (1,11,12)
                ),
                Childs AS
                (
	                SELECT * FROM BBC
	                UNION
	                SELECT * FROM SBC
                )
                SELECT * FROM Childs

                SELECT A.*
                FROM FBookingAcknowledgeChildDetails A
                INNER JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID = A.BookingChildID AND BAC.BookingID = A.BookingID AND BAC.BookingQty > 0
                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12);

                --SELECT YBM.*
                --FROM YarnBookingMaster_New YBM 
				--WHERE YBM.YBookingNo LIKE '{bookingNo}%' {additionQuery}

                SELECT YBM.*
                FROM YarnBookingMaster_New YBM 
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
				WHERE FBA.BookingNo = '{bookingNo}' {additionQuery}

                SELECT YBC.* 
                FROM YarnBookingChild_New YBC
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                SELECT YBCI.*, YBC.BookingChildID, YBC.ConsumptionID
                    ,Segment1ValueId = ISV1.SegmentValueID
                    ,Segment1ValueDesc = ISV1.SegmentValue
                    ,Segment2ValueId = ISV2.SegmentValueID
                    ,Segment2ValueDesc = ISV2.SegmentValue
                    ,Segment3ValueId = ISV3.SegmentValueID
                    ,Segment3ValueDesc = ISV3.SegmentValue
                    ,Segment4ValueId = ISV4.SegmentValueID
                    ,Segment4ValueDesc = ISV4.SegmentValue
                    ,Segment5ValueId = ISV5.SegmentValueID
                    ,Segment5ValueDesc = ISV5.SegmentValue
                    ,Segment6ValueId = ISV6.SegmentValueID
                    ,Segment6ValueDesc = ISV6.SegmentValue
                FROM YarnBookingChildItem_New YBCI
                INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                --FBookingAckChildFinishingProcess
                SELECT FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                FMC.FMProcessID ProcessID, FMC.ProcessName ProcessName, FMC.ProcessTypeID, ET.ValueName ProcessType,FMC.FMCMasterID, b.ProcessName MachineName
                FROM FBookingAckChildFinishingProcess FP
                INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                GROUP BY FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                --FBookingAckChildFinishingProcessItem
                SELECT FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName
                FROM FBookingAckChildFinishingProcessItem FPI
                INNER JOIN FBookingAckChildFinishingProcess FP ON FP.FPChildID = FPI.FPChildID
                INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                GROUP BY FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);
                data.FBookingChild = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChildDetails> FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.YarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<FBookingAckChildFinishingProcess> finishingProcessChilds = records.Read<FBookingAckChildFinishingProcess>().ToList();
                List<FBookingAckChildFinishingProcessItem> finishingProcessChildItems = records.Read<FBookingAckChildFinishingProcessItem>().ToList();

                if (isAddition)
                {
                    data.YarnBookings = new List<YarnBookingMaster>();
                    yarnBookingChilds = new List<YarnBookingChild>();
                    yarnBookingChildItems = new List<YarnBookingChildItem>();
                }

                data.FBookingChild.ForEach(fbc =>
                {
                    fbc.ChildDetails = FBookingChildDetails.Where(x => x.BookingChildID == fbc.BookingChildID).ToList();

                    fbc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == fbc.BookingChildID && x.IsPreProcess == true).ToList();
                    fbc.PreFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    fbc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == fbc.BookingChildID && x.IsPreProcess == false).ToList();
                    fbc.PostFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                });

                data.YarnBookings.ForEach(yb =>
                {
                    yb.Childs = yarnBookingChilds.Where(x => x.YBookingID == yb.YBookingID).ToList();
                    yb.Childs.ForEach(yc =>
                    {
                        yc.BookingID = data.BookingID;
                        yc.ChildItems = yarnBookingChildItems.Where(x => x.YBChildID == yc.YBChildID).ToList();
                    });
                });
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetFBAcknowledgeBulkAddition(string bookingNo, bool isAddition, string yBookingNo = null, bool isUpdateAddition = false)
        {
            string additionQuery = !isUpdateAddition ? isAddition ? " AND YBM.IsAddition = 1 " : " AND YBM.IsAddition = 0 " : "";

            var query =
                $@"SELECT FBA.*, PreProcessRevNo = FBA1.RevisionNo
                FROM FBookingAcknowledge FBA
                LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                WHERE FBA.BookingNo = '{bookingNo}'

                ;WITH
                BBC AS
                (
	                SELECT BAC.*
	                FROM FBookingAcknowledgeChild BAC
	                INNER Join {DbNames.EPYSL}..BookingChild A on A.ConsumptionID = BAC.ConsumptionID AND A.ItemMasterID = BAC.ItemMasterID
	                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID = BAC.AcknowledgeID
	                WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12) AND BAC.IsDeleted=0
                ),
                SBC AS
                (
	                SELECT BAC.*
	                FROM FBookingAcknowledgeChild BAC
	                INNER Join {DbNames.EPYSL}..SampleBookingConsumption A on A.ConsumptionID = BAC.ConsumptionID
	                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID = BAC.AcknowledgeID
	                WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12)
                ),
                Childs AS
                (
	                SELECT * FROM BBC
	                UNION
	                SELECT * FROM SBC
                )
                SELECT * FROM Childs

                SELECT A.*
                FROM FBookingAcknowledgeChildDetails A
                INNER JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12);

                SELECT YBM.*
                FROM YarnBookingMaster_New YBM 
				WHERE YBM.YBookingNo LIKE '{yBookingNo}' {additionQuery};

                SELECT YBC.* 
                FROM YarnBookingChild_New YBC
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                WHERE YBM.YBookingNo ='{yBookingNo}' {additionQuery};

                SELECT YBCI.*, YBC.BookingChildID, YBC.ConsumptionID
                    ,Segment1ValueId = ISV1.SegmentValueID
                    ,Segment1ValueDesc = ISV1.SegmentValue
                    ,Segment2ValueId = ISV2.SegmentValueID
                    ,Segment2ValueDesc = ISV2.SegmentValue
                    ,Segment3ValueId = ISV3.SegmentValueID
                    ,Segment3ValueDesc = ISV3.SegmentValue
                    ,Segment4ValueId = ISV4.SegmentValueID
                    ,Segment4ValueDesc = ISV4.SegmentValue
                    ,Segment5ValueId = ISV5.SegmentValueID
                    ,Segment5ValueDesc = ISV5.SegmentValue
                    ,Segment6ValueId = ISV6.SegmentValueID
                    ,Segment6ValueDesc = ISV6.SegmentValue
                FROM YarnBookingChildItem_New YBCI
                INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                WHERE YBM.YBookingNo ='{yBookingNo}' {additionQuery};

                --FBookingAckChildFinishingProcess
                SELECT FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                FMC.FMProcessID ProcessID, FMC.ProcessName ProcessName, FMC.ProcessTypeID, ET.ValueName ProcessType,FMC.FMCMasterID, b.ProcessName MachineName
                FROM FBookingAckChildFinishingProcess FP
                INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                GROUP BY FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                --FBookingAckChildFinishingProcessItem
                SELECT FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName
                FROM FBookingAckChildFinishingProcessItem FPI
                INNER JOIN FBookingAckChildFinishingProcess FP ON FP.FPChildID = FPI.FPChildID
                INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                GROUP BY FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                SELECT FFU.*,C.BookingChildID
                FROM BulkBookingFinishFabricUtilization FFU
                INNER JOIN YarnBookingChild_New C ON C.YBChildID = FFU.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = C.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                WHERE YBM.YBookingNo ='{yBookingNo}' {additionQuery};
                    
                SELECT GFU.*,C.BookingChildID
                FROM FBookingAcknowledgeChildGFUtilization GFU
                INNER JOIN YarnBookingChild_New C ON C.YBChildID = GFU.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = C.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                WHERE YBM.YBookingNo ='{yBookingNo}' {additionQuery};

                ---BulkBookingGreyYarnUtilization
                Select 
                ItemMasterID = YSS.ItemMasterId, 
                SpinnerID = YSS.SpinnerId, Spinner = SPIN.ShortName, PhysicalLot = YSS.YarnLotNo,
                YSS.PhysicalCount, Composition = ISV1.SegmentValue, NumaricCount = ISV6.SegmentValue,
                YarnDetails = YSS.YarnCategory,
                YSM.SampleStockQty, YSM.LiabilitiesStockQty, YSM.UnusableStockQty, YSM.LeftoverStockQty,
                GYU.*
                From BulkBookingGreyYarnUtilization GYU
                INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = GYU.YBChildItemID
                INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = C.YBookingID
				INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN YarnStockSet YSS ON YSS.YarnStockSetId = GYU.YarnStockSetID
                INNER JOIN YarnStockMaster YSM ON YSM.YarnStockSetId = YSS.YarnStockSetId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YSS.ItemMasterId
                INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..Contacts SPIN On SPIN.ContactID = YSS.SpinnerId
                Where YBM.YBookingNo ='{yBookingNo}' {additionQuery};

                ---BulkBookingDyedYarnUtilization
                Select 
                DYU.*
                From BulkBookingDyedYarnUtilization DYU
                INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = DYU.YBChildItemID
                INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = C.YBookingID
				INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                Where YBM.YBookingNo ='{yBookingNo}' {additionQuery}; 

                ----FBookingAcknowledgeChildReplacement
                SELECT U.*
                FROM FBookingAcknowledgeChildReplacement U
                INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                --INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = U.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
                --INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
                Where YBM.YBookingNo ='{yBookingNo}' {additionQuery};

                ----FBookingAcknowledgeChildItemNetReqQTY
                SELECT U.*
                FROM FBookingAcknowledgeChildItemNetReqQTY U
				INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = U.YBChildItemID
                INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                --INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
                --INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
                Where YBM.YBookingNo ='{yBookingNo}' {additionQuery}
                Group By U.ReplacementID,	U.YBChildItemID,	U.ReasonID,	
				U.DepertmentID,	U.ReplacementQTY,	U.Remarks,	U.AddedBy,	
				U.DateAdded,	U.UpdatedBy,	U.DateUpdated;";


            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);
                data.FBookingChild = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChildDetails> FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.YarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<FBookingAckChildFinishingProcess> finishingProcessChilds = records.Read<FBookingAckChildFinishingProcess>().ToList();
                List<FBookingAckChildFinishingProcessItem> finishingProcessChildItems = records.Read<FBookingAckChildFinishingProcessItem>().ToList();

                if (isAddition && !isUpdateAddition)
                {
                    data.YarnBookings = new List<YarnBookingMaster>();
                    yarnBookingChilds = new List<YarnBookingChild>();
                    yarnBookingChildItems = new List<YarnBookingChildItem>();
                }

                data.FBookingChild.ForEach(fbc =>
                {
                    fbc.ChildDetails = FBookingChildDetails.Where(x => x.BookingChildID == fbc.BookingChildID).ToList();

                    fbc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == fbc.BookingChildID && x.IsPreProcess == true).ToList();
                    fbc.PreFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    fbc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == fbc.BookingChildID && x.IsPreProcess == false).ToList();
                    fbc.PostFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    fbc.ChildItems = yarnBookingChildItems.Where(x => x.BookingChildID == fbc.BookingChildID).ToList();
                });

                data.YarnBookings.ForEach(yb =>
                {
                    yb.Childs = yarnBookingChilds.Where(x => x.YBookingID == yb.YBookingID).ToList();
                    yb.Childs.ForEach(yc =>
                    {
                        yc.BookingID = data.BookingID;
                        yc.ChildItems = yarnBookingChildItems.Where(x => x.YBChildID == yc.YBChildID).ToList();
                    });
                });

                List<BulkBookingFinishFabricUtilization> FFUtilizationPopUpList = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                List<FBookingAcknowledgeChildGFUtilization> GFUtilizationPopUpList = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();
                List<BulkBookingGreyYarnUtilization> gGreyYarnUtilizationList = records.Read<BulkBookingGreyYarnUtilization>().ToList();
                List<BulkBookingDyedYarnUtilization> gDyedYarnUtilizationList = records.Read<BulkBookingDyedYarnUtilization>().ToList();
                var listChildReplacement = records.Read<FBookingAcknowledgeChildReplacement>().ToList();
                var listChildItemNetReqQTY = records.Read<FBookingAcknowledgeChildItemNetReqQTY>().ToList();
                data.FBookingChild.ForEach(c =>
                {
                    c.ChildItems.ForEach(CI =>
                    {
                        CI.GreyYarnUtilizationPopUpList = gGreyYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();
                        CI.DyedYarnUtilizationPopUpList = gDyedYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();
                        CI.AdditionalNetReqPOPUPList = listChildItemNetReqQTY.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();

                    });
                    c.FinishFabricUtilizationPopUpList = FFUtilizationPopUpList.Where(ci => ci.BookingChildID == c.BookingChildID).ToList();
                    c.GreyFabricUtilizationPopUpList = GFUtilizationPopUpList.Where(ci => ci.BookingChildID == c.BookingChildID).ToList();
                    c.AdditionalReplacementPOPUPList = listChildReplacement.Where(x => x.BookingChildID == c.BookingChildID).ToList();

                });


                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetFBAcknowledgeBulkWithRevision(string bookingNo, bool isAddition)
        {
            string additionQuery = isAddition ? " AND YBM.IsAddition = 1 " : " AND YBM.IsAddition = 0 ";

            var query =
                $@"SELECT FBA.*, PreProcessRevNo = FBA1.RevisionNo
                FROM FBookingAcknowledge FBA
                LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                WHERE FBA.BookingNo = '{bookingNo}'

                ;WITH
                BBC AS
                (
	                SELECT BAC.*
	                FROM FBookingAcknowledgeChild BAC
	                INNER Join {DbNames.EPYSL}..BookingChild A on A.ConsumptionID = BAC.ConsumptionID AND A.ItemMasterID = BAC.ItemMasterID
	                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID = BAC.AcknowledgeID
	                WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12) AND BAC.IsDeleted=0 AND BAC.BookingQty > 0
                ),
                SBC AS
                (
	                SELECT BAC.*
	                FROM FBookingAcknowledgeChild BAC
	                INNER Join {DbNames.EPYSL}..SampleBookingConsumption A on A.ConsumptionID = BAC.ConsumptionID
	                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID = BAC.AcknowledgeID
	                WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12) AND BAC.BookingQty > 0
                ),
                Childs AS
                (
	                SELECT * FROM BBC
	                UNION
	                SELECT * FROM SBC
                )
                SELECT * FROM Childs

                SELECT A.*
                FROM FBookingAcknowledgeChildDetails A
                INNER JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                INNER JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12);

                --SELECT YBM.*
                --FROM YarnBookingMaster_New YBM 
				--WHERE YBM.YBookingNo LIKE '{bookingNo}%' {additionQuery}

                SELECT YBM.*
                FROM YarnBookingMaster_New YBM 
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
				WHERE FBA.BookingNo = '{bookingNo}' {additionQuery}

                SELECT YBC.* 
                FROM YarnBookingChild_New YBC
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                SELECT YBCI.*, YBC.BookingChildID, YBC.ConsumptionID
                    ,Segment1ValueId = ISV1.SegmentValueID
                    ,Segment1ValueDesc = ISV1.SegmentValue
                    ,Segment2ValueId = ISV2.SegmentValueID
                    ,Segment2ValueDesc = ISV2.SegmentValue
                    ,Segment3ValueId = ISV3.SegmentValueID
                    ,Segment3ValueDesc = ISV3.SegmentValue
                    ,Segment4ValueId = ISV4.SegmentValueID
                    ,Segment4ValueDesc = ISV4.SegmentValue
                    ,Segment5ValueId = ISV5.SegmentValueID
                    ,Segment5ValueDesc = ISV5.SegmentValue
                    ,Segment6ValueId = ISV6.SegmentValueID
                    ,Segment6ValueDesc = ISV6.SegmentValue
                FROM YarnBookingChildItem_New YBCI
                INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                SELECT YBCI.*, YBC.BookingChildID, YBC.ConsumptionID
                FROM YarnBookingChildItem_New_Revision YBCI
                INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                --FBookingAckChildFinishingProcess
                SELECT FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                FMC.FMProcessID ProcessID, FMC.ProcessName ProcessName, FMC.ProcessTypeID, ET.ValueName ProcessType,FMC.FMCMasterID, b.ProcessName MachineName
                FROM FBookingAckChildFinishingProcess FP
                INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                GROUP BY FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                --FBookingAckChildFinishingProcessItem
                SELECT FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName
                FROM FBookingAckChildFinishingProcessItem FPI
                INNER JOIN FBookingAckChildFinishingProcess FP ON FP.FPChildID = FPI.FPChildID
                INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                GROUP BY FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;
                

                ---- BulkBookingFinishFabricUtilization
                SELECT U.*, FBC.BookingChildID
				FROM BulkBookingFinishFabricUtilization U
				INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
				INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
				WHERE FBA.BookingNo = '{bookingNo}';

                -----FBookingAcknowledgeChildGFUtilization
				SELECT U.*, FBC.BookingChildID
				FROM FBookingAcknowledgeChildGFUtilization U
				INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
				INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
				WHERE FBA.BookingNo = '{bookingNo}';";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);
                data.FBookingChild = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChildDetails> FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.YarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItemsRevision = records.Read<YarnBookingChildItem>().ToList();
                if (yarnBookingChildItemsRevision.Count > 0)
                {
                    yarnBookingChildItems = yarnBookingChildItemsRevision;
                }
                List<FBookingAckChildFinishingProcess> finishingProcessChilds = records.Read<FBookingAckChildFinishingProcess>().ToList();
                List<FBookingAckChildFinishingProcessItem> finishingProcessChildItems = records.Read<FBookingAckChildFinishingProcessItem>().ToList();


                List<BulkBookingFinishFabricUtilization> FFUtilizationPopUpList = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                List<FBookingAcknowledgeChildGFUtilization> GFUtilizationPopUpList = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();




                if (isAddition)
                {
                    data.YarnBookings = new List<YarnBookingMaster>();
                    yarnBookingChilds = new List<YarnBookingChild>();
                    yarnBookingChildItems = new List<YarnBookingChildItem>();
                }

                data.FBookingChild.ForEach(fbc =>
                {
                    fbc.ChildDetails = FBookingChildDetails.Where(x => x.BookingChildID == fbc.BookingChildID).ToList();

                    fbc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == fbc.BookingChildID && x.IsPreProcess == true).ToList();
                    fbc.PreFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    fbc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == fbc.BookingChildID && x.IsPreProcess == false).ToList();
                    fbc.PostFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });


                    fbc.FinishFabricUtilizationPopUpList = FFUtilizationPopUpList.Where(x => x.BookingChildID == fbc.BookingChildID).ToList();
                    fbc.GreyFabricUtilizationPopUpList = GFUtilizationPopUpList.Where(x => x.BookingChildID == fbc.BookingChildID).ToList();
                });

                data.YarnBookings.ForEach(yb =>
                {
                    yb.Childs = yarnBookingChilds.Where(x => x.YBookingID == yb.YBookingID).ToList();
                    yb.Childs.ForEach(yc =>
                    {
                        yc.BookingID = data.BookingID;
                        yc.ChildItems = yarnBookingChildItems.Where(x => x.YBChildID == yc.YBChildID).ToList();
                        yc.FinishFabricUtilizationPopUpList = FFUtilizationPopUpList.Where(ci => ci.YBChildID == yc.YBChildID).ToList();
                        yc.GreyFabricUtilizationPopUpList = GFUtilizationPopUpList.Where(ci => ci.YBChildID == yc.YBChildID).ToList();
                    });
                });
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledge>> GetFBAcknowledgeMasterBulk(string bookingNo, bool isAddition)
        {
            string additionQuery = isAddition ? " AND YBM.IsAddition = 1 " : " AND YBM.IsAddition = 0 ";

            var query =
                $@"SELECT FBA.*, PreProcessRevNo = FBA1.RevisionNo
                    FROM FBookingAcknowledge FBA
                    LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT YBM.*, FBA.BookingNo
                    FROM YarnBookingMaster_New YBM
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}' {additionQuery}

                    SELECT YBC.*
                    FROM YarnBookingChild_New YBC
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                    WHERE FBA.BookingNo = '{bookingNo}' {additionQuery}

                    SELECT YBCI.*
                    ,Segment1ValueId = ISV1.SegmentValueID
                    ,Segment1ValueDesc = ISV1.SegmentValue
                    ,Segment2ValueId = ISV2.SegmentValueID
                    ,Segment2ValueDesc = ISV2.SegmentValue
                    ,Segment3ValueId = ISV3.SegmentValueID
                    ,Segment3ValueDesc = ISV3.SegmentValue
                    ,Segment4ValueId = ISV4.SegmentValueID
                    ,Segment4ValueDesc = ISV4.SegmentValue
                    ,Segment5ValueId = ISV5.SegmentValueID
                    ,Segment5ValueDesc = ISV5.SegmentValue
                    ,Segment6ValueId = ISV6.SegmentValueID
                    ,Segment6ValueDesc = ISV6.SegmentValue
                    FROM YarnBookingChildItem_New YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    WHERE FBA.BookingNo = '{bookingNo}' {additionQuery}";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FBookingAcknowledge> datas = records.Read<FBookingAcknowledge>().ToList();
                List<YarnBookingMaster> yarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> ybChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> ybChildItems = records.Read<YarnBookingChildItem>().ToList();

                if (yarnBookings.IsNotNull() && datas.Count() > 0)
                {
                    yarnBookings.ForEach(yb =>
                    {
                        yb.Childs = ybChilds.Where(ybc => ybc.YBookingID == yb.YBookingID).ToList();
                        yb.Childs.ForEach(c =>
                        {
                            c.ChildItems = ybChildItems.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                        });
                    });
                    datas.First().YarnBookings = yarnBookings;
                }
                return datas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledge>> GetFBAcknowledgeMasterBulkWithRevision(string bookingNo, bool isAddition)
        {
            string additionQuery = isAddition ? " AND YBM.IsAddition = 1 " : " AND YBM.IsAddition = 0 ";

            var query =
                $@"SELECT FBA.*, PreProcessRevNo = FBA1.RevisionNo
                    FROM FBookingAcknowledge FBA
                    LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT YBM.*, FBA.BookingNo
                    FROM YarnBookingMaster_New YBM
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                    SELECT YBC.*
                    FROM YarnBookingChild_New YBC
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                    SELECT YBCI.*
                    ,Segment1ValueId = ISV1.SegmentValueID
                    ,Segment1ValueDesc = ISV1.SegmentValue
                    ,Segment2ValueId = ISV2.SegmentValueID
                    ,Segment2ValueDesc = ISV2.SegmentValue
                    ,Segment3ValueId = ISV3.SegmentValueID
                    ,Segment3ValueDesc = ISV3.SegmentValue
                    ,Segment4ValueId = ISV4.SegmentValueID
                    ,Segment4ValueDesc = ISV4.SegmentValue
                    ,Segment5ValueId = ISV5.SegmentValueID
                    ,Segment5ValueDesc = ISV5.SegmentValue
                    ,Segment6ValueId = ISV6.SegmentValueID
                    ,Segment6ValueDesc = ISV6.SegmentValue
                    FROM YarnBookingChildItem_New YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                    SELECT YBCI.*
                    FROM YarnBookingChildItem_New_Revision YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};


                    ---BulkBookingFinishFabricUtilization
                    SELECT U.*, FBC.BookingChildID
				    FROM BulkBookingFinishFabricUtilization U
				    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
				    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID
				    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
				    WHERE FBA.BookingNo = '{bookingNo}';

                    ----FBookingAcknowledgeChildGFUtilization
				    SELECT U.*, FBC.BookingChildID
				    FROM FBookingAcknowledgeChildGFUtilization U
				    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
				    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID
				    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
				    WHERE FBA.BookingNo ='{bookingNo}';";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FBookingAcknowledge> datas = records.Read<FBookingAcknowledge>().ToList();
                List<YarnBookingMaster> yarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> ybChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> ybChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<YarnBookingChildItem> ybChildItemsRevision = records.Read<YarnBookingChildItem>().ToList();

                List<BulkBookingFinishFabricUtilization> FFUtilizationPopUpList = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                List<FBookingAcknowledgeChildGFUtilization> GFUtilizationPopUpList = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();

                if (ybChildItemsRevision.Count > 0)
                {
                    ybChildItems = ybChildItemsRevision;
                }

                if (yarnBookings.IsNotNull() && datas.Count() > 0)
                {
                    yarnBookings.ForEach(yb =>
                    {
                        yb.Childs = ybChilds.Where(ybc => ybc.YBookingID == yb.YBookingID).ToList();
                        yb.Childs.ForEach(c =>
                        {
                            c.ChildItems = ybChildItems.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                            c.FinishFabricUtilizationPopUpList = FFUtilizationPopUpList.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                            c.GreyFabricUtilizationPopUpList = GFUtilizationPopUpList.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                        });
                    });
                    datas.First().YarnBookings = yarnBookings;
                }
                return datas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledge>> GetFBAcknowledgeMasterBulkWithChild(string bookingNo)
        {
            var query =
                $@"SELECT FBA.*, PreProcessRevNo = FBA1.RevisionNo
                    FROM FBookingAcknowledge FBA
                    LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT BAC.*
                    FROM FBookingAcknowledgeChild BAC
                    INNER JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                    WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12);

                    SELECT YBM.*, FBA.BookingNo
                    FROM YarnBookingMaster_New YBM
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT YBC.*
                    FROM YarnBookingChild_New YBC
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT YBCI.*
                    ,Segment1ValueId = ISV1.SegmentValueID
                    ,Segment1ValueDesc = ISV1.SegmentValue
                    ,Segment2ValueId = ISV2.SegmentValueID
                    ,Segment2ValueDesc = ISV2.SegmentValue
                    ,Segment3ValueId = ISV3.SegmentValueID
                    ,Segment3ValueDesc = ISV3.SegmentValue
                    ,Segment4ValueId = ISV4.SegmentValueID
                    ,Segment4ValueDesc = ISV4.SegmentValue
                    ,Segment5ValueId = ISV5.SegmentValueID
                    ,Segment5ValueDesc = ISV5.SegmentValue
                    ,Segment6ValueId = ISV6.SegmentValueID
                    ,Segment6ValueDesc = ISV6.SegmentValue
                    FROM YarnBookingChildItem_New YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    WHERE FBA.BookingNo = '{bookingNo}'";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FBookingAcknowledge> datas = records.Read<FBookingAcknowledge>().ToList();
                List<FBookingAcknowledgeChild> FBAckChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                if (FBAckChilds.IsNotNull() && FBAckChilds.Count() > 0)
                {
                    datas.ForEach(data =>
                    {
                        data.FBookingChild = FBAckChilds.Where(x => x.AcknowledgeID == data.FBAckID).ToList();

                    });
                }
                List<YarnBookingMaster> yarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> ybChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> ybChildItems = records.Read<YarnBookingChildItem>().ToList();

                if (yarnBookings.IsNotNull() && datas.Count() > 0)
                {
                    yarnBookings.ForEach(yb =>
                    {
                        yb.Childs = ybChilds.Where(ybc => ybc.YBookingID == yb.YBookingID).ToList();
                        yb.Childs.ForEach(c =>
                        {
                            c.ChildItems = ybChildItems.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                        });
                    });
                    datas.First().YarnBookings = yarnBookings;
                }
                return datas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledge>> GetFBAcknowledgeMasterBulkWithChildWithRevision(string bookingNo)
        {
            var query =
                $@"SELECT FBA.*, PreProcessRevNo = FBA1.RevisionNo
                    FROM FBookingAcknowledge FBA
                    LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT BAC.*
                    FROM FBookingAcknowledgeChild BAC
                    INNER JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                    WHERE BA.BookingNo = '{bookingNo}' AND BAC.SubGroupID IN (1,11,12);

                    SELECT YBM.*, FBA.BookingNo
                    FROM YarnBookingMaster_New YBM
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT YBC.*
                    FROM YarnBookingChild_New YBC
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT YBCI.*
                    ,Segment1ValueId = ISV1.SegmentValueID
                    ,Segment1ValueDesc = ISV1.SegmentValue
                    ,Segment2ValueId = ISV2.SegmentValueID
                    ,Segment2ValueDesc = ISV2.SegmentValue
                    ,Segment3ValueId = ISV3.SegmentValueID
                    ,Segment3ValueDesc = ISV3.SegmentValue
                    ,Segment4ValueId = ISV4.SegmentValueID
                    ,Segment4ValueDesc = ISV4.SegmentValue
                    ,Segment5ValueId = ISV5.SegmentValueID
                    ,Segment5ValueDesc = ISV5.SegmentValue
                    ,Segment6ValueId = ISV6.SegmentValueID
                    ,Segment6ValueDesc = ISV6.SegmentValue
                    FROM YarnBookingChildItem_New YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    WHERE FBA.BookingNo = '{bookingNo}'

                    SELECT YBCI.*
                    FROM YarnBookingChildItem_New_Revision YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = YBM.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND ISNULL(FBC.BookingQty,0) > 0
                    WHERE FBA.BookingNo = '{bookingNo}'";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FBookingAcknowledge> datas = records.Read<FBookingAcknowledge>().ToList();
                List<FBookingAcknowledgeChild> FBAckChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                if (FBAckChilds.IsNotNull() && FBAckChilds.Count() > 0)
                {
                    datas.ForEach(data =>
                    {
                        data.FBookingChild = FBAckChilds.Where(x => x.AcknowledgeID == data.FBAckID).ToList();

                    });
                }
                List<YarnBookingMaster> yarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> ybChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> ybChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<YarnBookingChildItem> ybChildItemsRevision = records.Read<YarnBookingChildItem>().ToList();
                if (ybChildItemsRevision.Count > 0)
                {
                    ybChildItems = ybChildItemsRevision;
                }

                if (yarnBookings.IsNotNull() && datas.Count() > 0)
                {
                    yarnBookings.ForEach(yb =>
                    {
                        yb.Childs = ybChilds.Where(ybc => ybc.YBookingID == yb.YBookingID).ToList();
                        yb.Childs.ForEach(c =>
                        {
                            c.ChildItems = ybChildItems.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                        });
                    });
                    datas.First().YarnBookings = yarnBookings;
                }
                return datas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<YarnBookingMaster>> GetYarnBookingsBulk(string bookingNo)
        {
            var query =
                $@" 
                    SELECT M.*
                    FROM YarnBookingMaster_New M
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT C.*,
		                    Construction = ISV1.SegmentValue, 
		                    Composition = ISV2.SegmentValue,
		                    Color = CASE WHEN M.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END 
                    FROM YarnBookingChild_New C
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = C.ItemMasterID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT CI.*
                    FROM YarnBookingChildItem_New CI
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = CI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT FFU.*
                    FROM BulkBookingFinishFabricUtilization FFU
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = FFU.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    WHERE FBA.BookingNo ='{bookingNo}';
                    
                    SELECT GFU.*
                    FROM FBookingAcknowledgeChildGFUtilization GFU
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = GFU.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}'";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<YarnBookingMaster> yarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<BulkBookingFinishFabricUtilization> FFUtilizationPopUpList = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                List<FBookingAcknowledgeChildGFUtilization> GFUtilizationPopUpList = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();

                if (yarnBookings.IsNotNull() && yarnBookings.Count() > 0)
                {
                    yarnBookings.ForEach(m =>
                    {
                        m.Childs = yarnBookingChilds.Where(c => c.YBookingID == m.YBookingID).ToList();
                        m.Childs.ForEach(c =>
                        {
                            c.ChildItems = yarnBookingChildItems.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                            c.FinishFabricUtilizationPopUpList = FFUtilizationPopUpList.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                            c.GreyFabricUtilizationPopUpList = GFUtilizationPopUpList.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                        });
                    });
                }
                return yarnBookings;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<YarnBookingMaster>> GetYarnBookingsBulkWithRevision(string bookingNo)
        {
            var query =
                $@" 
                    SELECT M.*
                    FROM YarnBookingMaster_New M
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT C.*,
		                    Construction = ISV1.SegmentValue, 
		                    Composition = ISV2.SegmentValue,
		                    Color = CASE WHEN M.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END 
                    FROM YarnBookingChild_New C
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = C.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = C.ItemMasterID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT CI.*
                    FROM YarnBookingChildItem_New CI
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = CI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = C.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT CI.*
                    FROM YarnBookingChildItem_New_Revision CI
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = CI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = C.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                    WHERE FBA.BookingNo = '{bookingNo}';

                    SELECT FFU.*
                    FROM BulkBookingFinishFabricUtilization FFU
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = FFU.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = C.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                    WHERE FBA.BookingNo ='{bookingNo}';
                    
                    SELECT GFU.*
                    FROM FBookingAcknowledgeChildGFUtilization GFU
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = GFU.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = C.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                    WHERE FBA.BookingNo = '{bookingNo}';

                    ---BulkBookingGreyYarnUtilization
                    Select 
                    ItemMasterID = YSS.ItemMasterId, 
                    SpinnerID = YSS.SpinnerId, Spinner = SPIN.ShortName, PhysicalLot = YSS.YarnLotNo,
                    YSS.PhysicalCount, Composition = ISV1.SegmentValue, NumaricCount = ISV6.SegmentValue,
                    YarnDetails = YSS.YarnCategory,
                    YSM.SampleStockQty, YSM.LiabilitiesStockQty, YSM.UnusableStockQty, YSM.LeftoverStockQty,
                    GYU.*
                    From BulkBookingGreyYarnUtilization GYU
                    INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = GYU.YBChildItemID
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
					INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = C.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                    INNER JOIN YarnStockSet YSS ON YSS.YarnStockSetId = GYU.YarnStockSetID
                    INNER JOIN YarnStockMaster YSM ON YSM.YarnStockSetId = YSS.YarnStockSetId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YSS.ItemMasterId
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..Contacts SPIN On SPIN.ContactID = YSS.SpinnerId
                    Where FBA.BookingNo = '{bookingNo}';

                    ---BulkBookingDyedYarnUtilization
                    Select 
                    DYU.*
                    From BulkBookingDyedYarnUtilization DYU
                    INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = DYU.YBChildItemID
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
					INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = C.BookingChildID AND FBC.AcknowledgeID = FBA.FBAckID AND FBC.BookingQty > 0
                    Where FBA.BookingNo =  '{bookingNo}';   ";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<YarnBookingMaster> yarnBookings = records.Read<YarnBookingMaster>().ToList();
                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItemsRevision = records.Read<YarnBookingChildItem>().ToList();
                if (yarnBookingChildItemsRevision.Count > 0)
                {
                    yarnBookingChildItems = yarnBookingChildItemsRevision;
                }
                List<BulkBookingFinishFabricUtilization> FFUtilizationPopUpList = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                List<FBookingAcknowledgeChildGFUtilization> GFUtilizationPopUpList = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();
                List<BulkBookingGreyYarnUtilization> gGreyYarnUtilizationList = records.Read<BulkBookingGreyYarnUtilization>().ToList();
                List<BulkBookingDyedYarnUtilization> gDyedYarnUtilizationList = records.Read<BulkBookingDyedYarnUtilization>().ToList();

                if (yarnBookings.IsNotNull() && yarnBookings.Count() > 0)
                {
                    yarnBookings.ForEach(m =>
                    {
                        m.Childs = yarnBookingChilds.Where(c => c.YBookingID == m.YBookingID).ToList();

                        m.Childs.ForEach(c =>
                        {
                            c.ChildItems = yarnBookingChildItems.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                            c.ChildItems.ForEach(CI =>
                            {
                                CI.GreyYarnUtilizationPopUpList = gGreyYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();
                                CI.DyedYarnUtilizationPopUpList = gDyedYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();

                            });
                            c.FinishFabricUtilizationPopUpList = FFUtilizationPopUpList.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                            c.GreyFabricUtilizationPopUpList = GFUtilizationPopUpList.Where(ci => ci.YBChildID == c.YBChildID).ToList();
                        });
                    });
                }
                return yarnBookings;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetFBAcknowledgeByBookingID(int BookingID)
        {
            var query =
                $@"SELECT FBA.*
                    FROM FBookingAcknowledge FBA
                    WHERE FBA.BookingID={BookingID};
                    
                    SELECT FBA.*
                    FROM FabricBookingAcknowledge FBA
                    WHERE FBA.BookingID={BookingID};

                    SELECT BAC.*
                    FROM FBookingAcknowledgeChild BAC
                    LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildAddProcess A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildGarmentPart A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildProcess A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildDistribution A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildText A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeChildYarnSubBrand A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM BDSDependentTNACalander A
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=A.BookingChildID
                    WHERE BAC.BookingID = {BookingID} AND BAC.SubGroupID IN (1,11,12);

                    SELECT A.*
                    FROM FBookingAcknowledgeImage A
                    LEFT JOIN FBookingAcknowledge BA ON BA.BookingID=A.BookingID
                    WHERE BA.BookingID={BookingID};

                    SELECT FBAC.*
                    FROM FBAChildPlanning FBAC
                    LEFT JOIN FBookingAcknowledgeChild BAC ON BAC.BookingChildID=FBAC.BookingChildID
                    WHERE BAC.BookingID = {BookingID};

                    --All FBAChildPlannings
                    ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                //Guard.Against.NullObject(data);
                if (data.IsNull())
                    return null;
                data.FabricBookingAcknowledgeList = records.Read<FabricBookingAcknowledge>().ToList();
                data.FBookingChild = records.Read<FBookingAcknowledgeChild>().ToList();
                data.FBookingAcknowledgeChildAddProcess = records.Read<FBookingAcknowledgeChildAddProcess>().ToList();
                data.FBookingChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.FBookingAcknowledgeChildGarmentPart = records.Read<FBookingAcknowledgeChildGarmentPart>().ToList();
                data.FBookingAcknowledgeChildProcess = records.Read<FBookingAcknowledgeChildProcess>().ToList();
                data.FBookingAcknowledgeChildText = records.Read<FBookingAcknowledgeChildText>().ToList();
                data.FBookingAcknowledgeChildDistribution = records.Read<FBookingAcknowledgeChildDistribution>().ToList();
                data.FBookingAcknowledgeChildYarnSubBrand = records.Read<FBookingAcknowledgeChildYarnSubBrand>().ToList();
                data.BDSDependentTNACalander = records.Read<BDSDependentTNACalander>().ToList();
                data.FBookingAcknowledgeImage = records.Read<FBookingAcknowledgeImage>().ToList();
                var fBAChildPlannings = records.Read<FBAChildPlanning>().ToList();
                data.FBookingChild.ForEach(x =>
                {
                    x.FBAChildPlannings = fBAChildPlannings.Where(y => y.BookingChildID == x.BookingChildID).ToList();
                    x.CriteriaIDs = string.Join(",", x.FBAChildPlannings.Select(y => y.CriteriaID).Distinct());
                });
                data.AllChildPlannings = records.Read<FBAChildPlanning>().ToList();
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }

        public async Task<FBookingAcknowledge> GetDataByBookingNo(string bookingNo, bool isSample, bool isAddition, string yBookingNo, bool isSavedAddition, bool isAllowYBookingNo, bool isYarnRevisionMenu, bool isFromYBAck)
        {
            string deletedItemIgnoreQuery = isFromYBAck ? "" : " AND BAC.IsDeleted = 0 AND BAC.BookingQty > 0";

            string yBookingNoCon = yBookingNo.IsNotNullOrEmpty() && yBookingNo != "null" ? $@" AND YBM.YBookingNo = '{yBookingNo}' " : "";

            var segmentNames = new
            {
                SegmentNames = new string[]
               {
                    ItemSegmentNameConstants.YARN_CERTIFICATIONS,
                    ItemSegmentNameConstants.YARN_SUBPROGRAM_NEW
               }
            };

            string joinName = isSample ? "BAC" : "BA";

            var query =
                    $@"-- Master Data
                   	                   	WITH M AS (
	                    SELECT FBA.FBAckID,	FBA.BookingID,FBA.BookingNo,FBA.BookingDate,FBA.ApprovedDatePMC YarnBookingDate,FBA.SLNo,FBA.StyleMasterID,FBA.StyleNo,FBA.SubGroupID,
	                    FBA.BuyerID,FBA.BuyerTeamID,FBA.SupplierID,FBA.ExportOrderID,FBA.ExecutionCompanyID, BM.CompanyID, FBA.WithoutOB,
	                    OrderQty = CASE WHEN FBA.WithoutOB=1 THEN SBM.OrderQty ELSE BM.RePurchaseQty END,
	                    Remarks = CASE WHEN FBA.WithoutOB=1 THEN SBM.Remarks ELSE BM.Remarks END,
	                    BookingBy = CASE WHEN FBA.WithoutOB=1 THEN SBM.AddedBy ELSE BM.AddedBy END,
	                    YBM.YBookingNo, ParentYBookingNo = YBM.YBookingNo, FBA.IsSample,YBM.YRequiredDate,
	                    FBA.CollarSizeID,FBA.CollarWeightInGm,FBA.CuffSizeID,FBA.CuffWeightInGm,YBM.AddedBy YarnBookingBy,
	                    FBA.SeasonID,
	                    YarnBookingDateActual = YBM.YBookingDate,
	                    YarnBookingCreatedBy = E.EmployeeName,
	                    RevisionDate = CASE WHEN ISNULL(FBA.RevisionNo,0) > 0 THEN FBA.RevisionDate ELSE NULL END,
	                    YarnBookingRevisionDate = CASE WHEN ISNULL(YBM.RevisionNo,0) > 0 THEN YBM.RevisedDate ELSE NULL END,
	                    YarnRevisionNo = YBM.RevisionNo,
                        YarnPreRevisionNo = YBM.PreProcessRevNo,
                        FBA.RevisionNo, FBA.PreRevisionNo,
						IsIncreaseRevisionNo = Case When FBA.IsApprovedByPMC = 1 Then 1 Else 0 End,
                        YBM.PMCFinalApproveCount
	                    FROM FBookingAcknowledge FBA
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
	                    LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
	                    LEFT JOIN {DbNames.EPYSL}..LoginUser LU ON LU.UserCode = YBM.AddedBy
	                    LEFT JOIN {DbNames.EPYSL}..Employee E ON E.EmployeeCode = LU.EmployeeCode
	                    WHERE FBA.BookingNo = '{bookingNo}'  AND YBM.YBookingNo = '{bookingNo}-YB'  
                    ),
                    FBA1 AS
                    (
	                    SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	                    b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SLNo='',SM.StyleMasterID,
	                    b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(BC.BookingQty),
	                    IsSample = 0, b.AddedBy
	                    FROM FabricBookingAcknowledge A
	                    Inner JOIN {DbNames.EPYSL}..BookingMaster b on b.BookingID = a.BookingID
	                    Inner Join {DbNames.EPYSL}..BookingChild BC On BC.BookingID = A.BookingID
	                    JOIN {DbNames.EPYSL}..ExportOrderMaster EO ON EO.ExportOrderID = B.ExportOrderID
	                    JOIN {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = EO.StyleMasterID
	                    WHERE b.BookingNo in ('{bookingNo}')
	                    Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	                    b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SM.StyleMasterID,
	                    b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate, b.AddedBy
                    ),
                    EC AS (
	                    SELECT TOP(1)PO.ExecutionCompanyID,PO.ExportOrderID
	                    FROM FBA1
	                    INNER JOIN {DbNames.EPYSL}..ExportOrderPO PO ON PO.ExportOrderID = FBA1.ExportOrderID
                    ),
                    FBA2 AS
                    (
	                    SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	                    b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	                    b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(c.RequiredQty),
	                    IsSample = 1, b.AddedBy
	                    FROM FabricBookingAcknowledge A
	                    Inner Join {DbNames.EPYSL}..SampleBookingMaster b on b.BookingID = a.BookingID
	                    Inner Join {DbNames.EPYSL}..SampleBookingConsumptionChild c ON c.BookingID = a.BookingID
	                    WHERE b.BookingNo in ('{bookingNo}')
	                    Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	                    b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	                    b.BuyerID,b.BuyerTeamID,b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate, b.AddedBy
                    ),
                    FBC AS
                    (
	                    SELECT *FROM FBA1
	                    UNION
	                    SELECT *FROM FBA2
                    ),
                    IHD AS
                    (
	                    SELECT M.BookingID, RequiredFabricDeliveryDate = CASE WHEN M.WithoutOB = 1 THEN MAX(FBC1.InHouseDate) ELSE MAX(FBC1.InHouseDate) END,FBC1.BookingQty,M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm
	                    , CompanyName = CASE WHEN ISNULL(FBC1.IsSample,0) = 0 THEN CE.CompanyName ELSE CES.CompanyName END, FBC1.PreRevisionNo, FBC1.AddedBy
	                    FROM M
	                    LEFT JOIN FBC FBC1 ON FBC1.BookingID = M.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity CE On CE.CompanyID = M.ExecutionCompanyID 
	                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity CES On CES.CompanyID = FBC1.CompanyID 
	                    GROUP BY M.BookingID, M.WithoutOB,FBC1.BookingQty,M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm,
	                    CASE WHEN ISNULL(FBC1.IsSample,0) = 0 THEN CE.CompanyName ELSE CES.CompanyName END, FBC1.PreRevisionNo,FBC1.AddedBy
                    ),
                    YRD AS
                    (
	                    SELECT OE.EventID, OE.ExportOrderID, IsHoliDay = Max(Convert(int,IsNull(OE.IsHoliDay,0)))
	                    ,IsPass = Max(Convert(int,IsNull(OE.IsPass,0)))
	                    ,EventDate = Case When OE.EventID in (36,48,49,50,57,59) Then  Max(Convert(Date,OE.EventDate)) Else Min(Convert(Date,OE.EventDate)) End
	                    ,CompleteDate = CAST(M.YarnBookingDateActual AS DATE) --Case When OE.EventID in (36,48,49,50,57,59) Then  Max(Convert(Date,OE.CompleteDate)) Else Min(Convert(Date,OE.CompleteDate)) End
	                    FROM {DbNames.EPYSL}..OrderEventCalander OE
	                    INNER JOIN M ON M.ExportOrderID = OE.ExportOrderID
	                    WHERE OE.EventID = 9
	                    GROUP BY OE.EventID, OE.ExportOrderID, M.YarnBookingDateActual
                    ),
                    YBS AS
                    (

	                    SELECT YRD.EventID,YRD.ExportOrderID, 
						YarnBookingStatus =  Case When (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 
								            Then YRD.CompleteDate 
								            Else YRD.EventDate End) < YRD.CompleteDate Then 'Completed ' + ' ' +  Convert(Varchar(20),DateDiff(Day,(Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End), YRD.CompleteDate)) + ' days delay'
								                When (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End) = YRD.CompleteDate Then 'Completed on Time '
								                When IsNull(YRD.CompleteDate,'') = '' and Convert(Date,Getdate()) >= (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End)
											    Then 'Pending ' + '' + Convert(Varchar(20),DateDiff(Day,(Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End), Convert(Date,Getdate()))) + ' days' 
											    When IsNull(YRD.CompleteDate,'') = '' and Convert(Date,Getdate()) < (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End) 
											    Then 'Remaining ' + ' ' + Convert(Varchar(20),DateDiff(Day,Convert(Date,Getdate()), (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End))) + ' days' 
											    When (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End) > YRD.CompleteDate Then 'Completed ' + '' + Convert(Varchar(20),DateDiff(Day,YRD.CompleteDate, (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End))) + ' days early'
											    Else ''
								            END
	                    FROM YRD
                    ),
					FRD1 AS
                    (
	                    SELECT OE.EventID, OE.ExportOrderID, IsHoliDay = Max(Convert(int,IsNull(OE.IsHoliDay,0)))
	                    ,IsPass = Max(Convert(int,IsNull(OE.IsPass,0)))
	                    ,EventDate = Case When OE.EventID in (36,48,49,50,57,59) Then  Max(Convert(Date,OE.EventDate)) Else Min(Convert(Date,OE.EventDate)) End
	                    ,CompleteDate = MAX(M.BookingDate) --CAST(M.YarnBookingDateActual AS DATE) --Case When OE.EventID in (36,48,49,50,57,59) Then  Max(Convert(Date,OE.CompleteDate)) Else Min(Convert(Date,OE.CompleteDate)) End
	                    FROM {DbNames.EPYSL}..OrderEventCalander OE
	                    INNER JOIN M ON M.ExportOrderID = OE.ExportOrderID
	                    WHERE OE.EventID = 2
	                    GROUP BY OE.EventID, OE.ExportOrderID, M.YarnBookingDateActual
                    ),
					FBS AS
                    (

	                    SELECT YRD.EventID,YRD.ExportOrderID, 
						FabricBookingStatus =  Case When (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 
								            Then YRD.CompleteDate 
								            Else YRD.EventDate End) < YRD.CompleteDate Then 'Completed ' + ' ' +  Convert(Varchar(20),DateDiff(Day,(Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End), YRD.CompleteDate)) + ' days delay'
								                When (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End) = YRD.CompleteDate Then 'Completed on Time '
								                When IsNull(YRD.CompleteDate,'') = '' and Convert(Date,Getdate()) >= (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End)
											    Then 'Pending ' + '' + Convert(Varchar(20),DateDiff(Day,(Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End), Convert(Date,Getdate()))) + ' days' 
											    When IsNull(YRD.CompleteDate,'') = '' and Convert(Date,Getdate()) < (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End) 
											    Then 'Remaining ' + ' ' + Convert(Varchar(20),DateDiff(Day,Convert(Date,Getdate()), (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End))) + ' days' 
											    When (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End) > YRD.CompleteDate Then 'Completed ' + '' + Convert(Varchar(20),DateDiff(Day,YRD.CompleteDate, (Case When YRD.IsHoliDay = 1 and YRD.IsPass = 1 Then YRD.CompleteDate Else YRD.EventDate End))) + ' days early'
											    Else ''
								            END
	                    FROM FRD1 YRD
                    ),
                    FRD AS
                    (
	                    SELECT EOM.ExportOrderID, GarmentsShipmentDate = MIN(OBPO.EDD)
	                    From {DbNames.EPYSL}..OrderBankPO OBPO
	                    INNER JOIN {DbNames.EPYSL}..OrderBankMaster OBM On OBM.OrderBankMasterID = OBPO.OrderBankMasterID
	                    INNER JOIN {DbNames.EPYSL}..StyleMaster SM On SM.StyleMasterID = OBM.StyleMasterID
	                    INNER JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.StyleMasterID = SM.StyleMasterID
	                    INNER JOIN M ON M.ExportOrderID = EOM.ExportOrderID
	                    WHERE OBPO.IsActive = 1
	                    GROUP BY EOM.ExportOrderID
                    ),
					OEC AS
                    (
	                    Select top 1 OECL.EventDate, OrderBankMasterID, M.BookingID 
						FROM M
						INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID=M.ExportOrderID 
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                    Where TE.EventDisplayName='Fabric Delivery start'
                    ),
                    OEC2 AS
                    (
	                    Select top 1 OECL.EventDate, M.BookingID 
						FROM M
						INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID=M.ExportOrderID
	                    INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	                    Where TE.EventDisplayName='Fabric Delivery complete'
                    ),
                    OBP AS
                    (
	                    Select TOP 1 OBP.EDD, OEC.BookingID 
						FROM OEC 
						INNER JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID=OEC.OrderBankMasterID
	                    ORDER BY EDD desc 
                    ),
					OQK AS
                    (
	                    Select FBAC.BookingID, SUM(FBAC.BookingQty)OrderQtyKG 
	                    from M
						INNER JOIN FBookingAcknowledgeChild FBAC ON FBAC.AcknowledgeID = M.FBAckID AND FBAC.IsDeleted = 0
	                    INNER JOIN {DbNames.EPYSL}..BookingChild BC ON BC.ConsumptionID = FBAC.ConsumptionID AND BC.BookingID = FBAC.BookingID
						GROUP BY FBAC.BookingID
                    )
                    SELECT TOP 1 M.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.YarnBookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,IHD.BookingQty BookingQty,M.BuyerID,M.BuyerTeamID, M.IsSample,
                    M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,IHD.CompanyName,M.SubGroupID,M.Remarks,
                    Supplier.ShortName [SupplierName],CTS.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, ISNULL(Supplier.MappingCompanyID,0) CompanyID,
                    SM.StyleNo, M.YBookingNo, M.ParentYBookingNo, TNACalendarDays = EOM.CalendarDays, IHD.RequiredFabricDeliveryDate,OBP.EDD FirstShipmentDate,OEC.EventDate FabricStartDate,OEC2.EventDate FabricEndDate,OQK.OrderQtyKG,TL.EmployeeName TeamLeader,
                    M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm,E.EmployeeName BookingByName,M.YRequiredDate YarnRequiredDate,
                    ET.TeamName MerchandisingTeam,'' YarnProjectionReference,E2.EmployeeName YarnBookingByName, IHD.PreRevisionNo

					,BookingDateFR = OEC1113.EventDate
                    ,M.YarnBookingDateActual
                    ,YarnBookingDateFR = OEC1.EventDate
                    ,YarnBookingStatus = YBS.YarnBookingStatus
					,FabricBookingStatus = FBS.FabricBookingStatus
                    ,M.YarnBookingCreatedBy
                    ,YarnProjectionRef = ''
                    ,YarnRequiredDateFR = OEC11.EventDate
                    ,YarnRequiredDateBOYB = DATEADD(day,DATEDIFF(day,OEC1.EventDate,OEC11.EventDate), M.YarnBookingDateActual)
                    ,Merchandiser = EM.EmployeeName
                    ,TNACalender = ISNULL(OEC1.CDays,OEC11.CDays)
                    ,M.RevisionDate
                    ,M.YarnBookingRevisionDate
                    ,M.YarnRevisionNo
                    ,M.YarnPreRevisionNo
                    ,GarmentsShipmentDate = FRD.GarmentsShipmentDate
                    ,FabricRequireDate = OEC111.EventDate
                    ,FabricRequireDateEnd = OEC1112.EventDate
                    ,M.RevisionNo, M.PreRevisionNo, M.IsIncreaseRevisionNo, M.PMCFinalApproveCount
                    FROM M
                    LEFT JOIN BuyerTeamWiseTeamLeaderSetup BTL ON BTL.BuyerTeamID = M.BuyerTeamID
                    LEFT JOIN {DbNames.EPYSL}..Employee TL ON TL.EmployeeCode=BTL.TeamLeaderEmployeeCode
                    LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.ExportOrderID = M.ExportOrderID
                    LEFT Join {DbNames.EPYSL}..OrderBankMaster OBM On OBM.StyleMasterID = EOM.StyleMasterID
                    LEFT Join {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = OBM.StyleMasterID
                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.CompanyID
                    LEFT JOIN {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                    LEFT Join {DbNames.EPYSL}..ContactSeason CTS On CTS.SeasonID = M.SeasonID
                    LEFT JOIN {DbNames.EPYSL}..LoginUser LU On  LU.UserCode=M.BookingBy
                    LEFT JOIN {DbNames.EPYSL}..Employee E On E.EmployeeCode = LU.EmployeeCode
                    LEFT JOIN {DbNames.EPYSL}..LoginUser LU2 On  LU2.UserCode=M.YarnBookingBy
                    LEFT JOIN {DbNames.EPYSL}..Employee E2 On E2.EmployeeCode = LU2.EmployeeCode
                    LEFT JOIN IHD ON IHD.BookingID = M.BookingID
                    LEFT JOIN {DbNames.EPYSL}..OrderEventCalander OEC1 ON OEC1.EventID = 9 AND OEC1.ExportOrderID = M.ExportOrderID
                    LEFT JOIN {DbNames.EPYSL}..OrderEventCalander OEC11 ON OEC11.EventID = 29 AND OEC11.ExportOrderID = M.ExportOrderID
                    LEFT JOIN {DbNames.EPYSL}..OrderEventCalander OEC111 ON OEC111.EventID = 35 AND OEC111.ExportOrderID = M.ExportOrderID
                    LEFT JOIN {DbNames.EPYSL}..OrderEventCalander OEC1112 ON OEC1112.EventID = 48 AND OEC1112.ExportOrderID = M.ExportOrderID
					LEFT JOIN {DbNames.EPYSL}..OrderEventCalander OEC1113 ON OEC1113.EventID = 2 AND OEC1113.ExportOrderID = M.ExportOrderID
                    LEFT JOIN YBS ON YBS.EventID = OEC1.EventID AND YBS.ExportOrderID = OEC1.ExportOrderID
					LEFT JOIN FBS ON FBS.EventID = OEC1113.EventID AND FBS.ExportOrderID = OEC1113.ExportOrderID
                    LEFT JOIN FRD ON FRD.ExportOrderID = M.ExportOrderID
                    Inner Join {DbNames.EPYSL}..StyleMaster SM2 On SM2.StyleMasterID = EOM.StyleMasterID
                    Inner Join {DbNames.EPYSL}..EmployeeTeamHK ET On ET.TeamID = SM.MerchandiserTeamID
                    LEFT JOIN {DbNames.EPYSL}..LoginUser LU3 ON LU3.UserCode = IHD.AddedBy
                    LEFT JOIN {DbNames.EPYSL}..Employee EM ON EM.EmployeeCode = LU3.EmployeeCode
					LEFT JOIN OEC ON OEC.BookingID = M.BookingID
					LEFT JOIN OEC2 ON OEC2.BookingID = M.BookingID
					LEFT JOIN OBP ON OBP.BookingID = M.BookingID
					LEFT JOIN OQK ON OQK.BookingID = M.BookingID;


					
                    -- Booking Acknowledge Child (Fabric)
                    WITH F AS
                    (
	                    SELECT BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, ActualBookingQty = BAC.BookingQty, BAC.BookingQty,TotalQty =SUM(FCM.TotalQty), BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.YarnBrandID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
	                    IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId, ISG.SubGroupName,
	                    ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, ETV2.ValueName Brand, 
	
	                    BA.BookingNo,
	                    ContactID = FCM.BuyerID,
	                    ExecutionCompanyID = FCM.CompanyID,

	                    Construction = ISV1.SegmentValue,
	                    Composition = ISV2.SegmentValue,
	                    Color = ISV3.SegmentValue,
	                    GSM = ISV4.SegmentValue,
	                    FabricWidth = ISV5.SegmentValue,
	                    KnittingType = ISV7.SegmentValue,
	                    DyeingType = ISV6.SegmentValue,
	
	                    Instruction = BAC.Remarks,
	                    ForBDSStyleNo = BA.StyleNo,

	                    T.TechnicalName, KMS.SubClassName MachineType,
	                    BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, KMS.TypeID As KTypeId,
                        BAC.RefSourceID,BAC.RefSourceNo

	                    FROM FBookingAcknowledgeChild BAC
	                    LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
	                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingChildID = BAC.BookingChildID AND FCM.ConsumptionID = BAC.ConsumptionID
	                    LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BAC.ItemMasterID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = {joinName}.SubGroupID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BAC.A1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BAC.YarnBrandID
	                    LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BAC.TechnicalNameID
	                    LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BAC.MachineTypeId
	                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV2 ON ETV2.ValueID = BAC.BrandID
	                    LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = BA.SupplierID
                        WHERE ISG.SubGroupID = 1 {deletedItemIgnoreQuery}
						GROUP BY BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, BAC.BookingQty,BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.YarnBrandID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID, IM.Segment2ValueID,
	                    IM.Segment3ValueID,IM.Segment7ValueID,IM.Segment4ValueID, ISG.SubGroupName,
	                    ISV.SegmentValue, ETV.ValueName, ETV2.ValueName, BA.BookingNo,FCM.BuyerID,FCM.CompanyID,ISV1.SegmentValue,ISV2.SegmentValue,ISV3.SegmentValue,ISV4.SegmentValue,ISV5.SegmentValue,ISV7.SegmentValue,
	                    ISV6.SegmentValue,BAC.Remarks,
	                    BA.StyleNo,T.TechnicalName, KMS.SubClassName,
	                    BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0), KMS.TypeID,
                        BAC.RefSourceID,BAC.RefSourceNo
                    )
                    SELECT * FROM F WHERE BookingNo = '{bookingNo}' AND (SubGroupID = 1 OR ItemGroupID = 1);

                    -- Booking Acknowledge Child (Collar & Cuff)
                    WITH F AS
                    (
	                    SELECT BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, ActualBookingQty = BAC.BookingQty, BAC.BookingQty, TotalQty = SUM(FCM.TotalQty), BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
	                    IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId, ISG.SubGroupName,
	                    ETV2.ValueName Brand,BAC.BookingQtyKG, 
	
	                    BA.BookingNo,
	                    ContactID = FCM.BuyerID,
	                    ExecutionCompanyID = FCM.CompanyID,

	                    Construction = ISV1.SegmentValue,
	                    Composition = ISV2.SegmentValue,
	                    Color = ISV5.SegmentValue,
	                    GSM = '',
	                    Length = ISV3.SegmentValue,
	                    Width = ISV4.SegmentValue,
	                    KnittingType = '',
	                    DyeingType = '',
	                    ForBDSStyleNo = BA.StyleNo,

	                    T.TechnicalName, KMS.SubClassName MachineType,
	                    BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, KMS.TypeID As KTypeId,
                        BAC.RefSourceID,BAC.RefSourceNo,BAC.SourceConsumptionID,BAC.SourceItemMasterID,

	                    YarnTypeID = CASE WHEN BA.IsSample = 0 THEN A.A1ValueID ELSE SBCon.A1ValueID END, 
	                    YarnType = CASE WHEN BA.IsSample = 0 THEN ISVA1.SegmentValue ELSE ISVA11.SegmentValue END,
	                    Instruction = CASE WHEN BA.IsSample = 0 THEN A.Remarks ELSE SBCon.Remarks END,
	                    YarnProgram = CASE WHEN BA.IsSample = 0 THEN ETV.ValueName ELSE ETV1.ValueName END,
	                    YarnBrandID = CASE WHEN BA.IsSample = 0 THEN A.YarnBrandID ELSE SBCon.YarnBrandID END

	                    FROM FBookingAcknowledgeChild BAC
	                    LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
	                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingChildID = BAC.BookingChildID AND FCM.ConsumptionID = BAC.ConsumptionID

	                    LEFT Join {DbNames.EPYSL}..BookingChild A on A.ConsumptionID = BAC.ConsumptionID AND A.ItemMasterID = BAC.ItemMasterID
	                    LEFT Join {DbNames.EPYSL}..SampleBookingConsumption SBCon On SBCon.ConsumptionID = BAC.ConsumptionID

	                    LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BAC.ItemMasterID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BAC.SubGroupID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BAC.A1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	                    LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BAC.TechnicalNameID
	                    LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BAC.MachineTypeId
	                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV2 ON ETV2.ValueID = BAC.BrandID
	                    LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = BA.SupplierID

	                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA1 On ISVA1.SegmentValueID = A.A1ValueID
	                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA11 On ISVA11.SegmentValueID = SBCon.A1ValueID
	                    Left Join {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = A.YarnBrandID
	                    Left Join {DbNames.EPYSL}..EntityTypeValue ETV1 ON ETV1.ValueID = SBCon.YarnBrandID

                        WHERE BAC.SubGroupID IN (11,12) {deletedItemIgnoreQuery}
	                    GROUP BY BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, BAC.BookingQty, BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID, IM.Segment2ValueID,
	                    IM.Segment3ValueID,IM.Segment7ValueID,IM.Segment4ValueID, ISG.SubGroupName,
	                    ISV.SegmentValue, ETV.ValueName, ETV1.ValueName, ETV2.ValueName, BA.BookingNo,FCM.BuyerID,FCM.CompanyID,ISV1.SegmentValue,ISV2.SegmentValue,ISV5.SegmentValue,ISV3.SegmentValue,
	                    ISV4.SegmentValue,BAC.Remarks,BA.StyleNo,T.TechnicalName, KMS.SubClassName,BAC.TestReportDays,BAC.FinishingDays,
	                    BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0), KMS.TypeID,
                        BAC.RefSourceID,BAC.RefSourceNo,BAC.SourceConsumptionID,BAC.SourceItemMasterID,
	                    BA.IsSample,A.A1ValueID,SBCon.A1ValueID,A.YarnBrandID,SBCon.YarnBrandID,
	                    ISVA1.SegmentValue,ISVA11.SegmentValue,A.Remarks,SBCon.Remarks,BAC.BookingQtyKG 
                    )
                    SELECT * FROM F WHERE BookingNo = '{bookingNo}' AND (SubGroupID IN (11,12) OR ItemGroupID IN (11,12));

                    ;With A As(
	                    select Min(FBP.FBAChildPlanningID) FBAChildPlanningID, FBP.BookingChildID, FBP.AcknowledgeID, FBP.CriteriaID
	                    From FBAChildPlanning FBP
	                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBP.AcknowledgeID
	                    Where FBA.BookingNo = '{bookingNo}'
	                    Group By BookingChildID, AcknowledgeID, CriteriaID
                    )
                    SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                    FROM A CP
                    INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                    GROUP BY cp.BookingChildID, CR.CriteriaName

                    --Technical Name
                    SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                    FROM FabricTechnicalName T
                    LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                    LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                    Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                    --M/c type
                    ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                    FROM KnittingMachine a
                    INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                    Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                    --Where c.TypeName != 'Flat Bed'
                    GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                    --CriteriaNames
                        ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                    FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                    GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                    --FBAChildPlannings
                    ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                    --FBookingAcknowledgeChildDetails (Fabric)
                    SELECT *
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID = A.BookingChildID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID=B.AcknowledgeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND B.SubGroupID IN (1) AND B.IsDeleted = 0;

                    --FBookingAcknowledgeChildDetails (Collar & Cuff)
                    SELECT *
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID = A.BookingChildID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID=B.AcknowledgeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND B.SubGroupID IN (11,12) AND B.IsDeleted = 0;

                    --Brand List
                    ;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
                    FROM KnittingMachine KM
                    LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
                    ORDER BY [text];

                    --YarnChild
                    SELECT YBC.*,IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChild_New YBC
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBC.ItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE YBM.YBookingNo = '{yBookingNo}';

                     --YarnChildItem
                    SELECT YBCI.*, Spinner = CASE WHEN ISNULL(YBCI.SpinnerId,0) > 0 THEN C.ShortName ELSE '' END
					,IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChildItem_New YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
					LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID = YBCI.SpinnerId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE YBM.YBookingNo = '{yBookingNo}';

                    --YarnChildItemRevision
                    SELECT YBCI.*, Spinner = CASE WHEN ISNULL(YBCI.SpinnerId,0) > 0 THEN C.ShortName ELSE '' END
					,IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChildItem_New_Revision YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                    INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
					LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID = YBCI.SpinnerId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE YBM.YBookingNo = '{yBookingNo}';

                    -- Finish Fabric Utilization
                   ;with ISF As (
	                    Select ISF.BookingID, RollID, ISF.ItemMasterID, RollNo, Shade, ISF.BatchNo, TagNo, ISF.GSM, LengthInInch, WidthInInch, CCID1, CCID4, RollQtyInKG = RollQtyInKG, 
	                    RollQtyInKGPcs = RollQtyInKGPcs, AOPRoll, ReceiveStatus, ISF.WeightSheetNo, IsReject, IsExcess, IsQtyDecrease, IsOrderCancel, IsReturn, IsOrderCCBreakDown,
	                    LocationID, RackID
	                    From EPYSLTEX..ItemFinishStockRoll ISF
	                    Inner Join  {DbNames.EPYSL}..ItemMaster IM On IM.ItemMasterID = ISF.ItemMasterID
	                    Inner Join BulkBookingFinishFabricUtilization BB On BB.ItemMasterID  = IM.ItemMasterID
	                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = BB.YBChildID
	                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
	                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
	                    WHERE FBA.BookingNo ='{bookingNo}'
                    ),FFQTY As(
						Select 
						FFU.BBFFUtilizationID, 
						ExcessQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsExcess = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
					                                    When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsExcess = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
														
                        RejectQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                            When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                        BookingQtyDecreasedbyMerchantQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsQtyDecrease = 1 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                    When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 1 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                                        
						AfterProductionOrderCancelledbyMerchantQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 1 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                        When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 1 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End
                                       				             
                                       
						FROM BulkBookingFinishFabricUtilization FFU
						Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = FFU.SubGroupID
						Inner Join ISF On ISF.ItemMasterID = FFU.ItemMasterID
	                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = FFU.YBChildID
	                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
	                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
						WHERE FBA.BookingNo ='{bookingNo}'
	                    Group By FFU.BBFFUtilizationID, ISG.SubGroupName,ISF.IsExcess,ISF.IsQtyDecrease,ISF.IsOrderCancel,ISF.IsOrderCCBreakDown,ISF.IsReject

					), FF As(
                        SELECT  FFU.BBFFUtilizationID,	FFU.YBChildID,	FFU.ExportOrderID,	FFU.ItemMasterID,	FFU.GSM,	FFU.ColorID,	FFU.SubGroupID,	FFU.BuyerID, 
                        FFU.GSMID,	FFU.CompositionID,	FFU.Width,	FFU.BatchNo,	FFU.WeightSheetNo,
                        FFU.FinishFabricUtilizationQTYinkg,FFU.FinishFabricExcessQtyKg,FFU.FinishFabricRejectQtyKg,	
                        FFU.FinishFabricBookingQtyDecreasedbyMerchantQtyKg,FFU.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg,

                        ExportOrderNo = ISNULL(EOM.ExportOrderNo,''), ColorName = ISNULL(ISVC.SegmentValue,''), Buyer = ISNULL(CT.ShortName,''),
                        FabricConstruction = ISV2.SegmentValue + ' ' + ISV1.SegmentValue
                       
                        --TotalStockQtyinkg  = (Case When FFU.SubGroupID = 1 Then Sum(ISF.RollQtyInKG) Else 0 End) + 
					                   --      (Case When FFU.SubGroupID = 1 Then 0 Else Sum(ISF.RollQtyInKGPcs) End)
					    ,UserName = IIF(ISNULL(FFU.UpdatedBy,0) = 0,EAd.EmployeeName,EUP.EmployeeName)

                        FROM BulkBookingFinishFabricUtilization FFU
                        INNER JOIN YarnBookingChild_New C ON C.YBChildID = FFU.YBChildID
                        INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                        INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                        Left Join {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = FFU.ExportOrderID
                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISVC On ISVC.SegmentValueID = FFU.ColorID
                        Left Join {DbNames.EPYSL}..Contacts CT On CT.ContactID = FFU.BuyerID And CT.ContactID >0
                        Inner Join {DbNames.EPYSL}..ItemMaster IM On IM.ItemMasterID = FFU.ItemMasterID
                        Inner Join ISF On ISF.ItemMasterID = FFU.ItemMasterID
                        Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = IM.SubGroupID
                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV2 On ISV2.SegmentValueID = IM.Segment2ValueID
					    Left Join {DbNames.EPYSL}..LoginUser AD On Ad.UserCode = FFU.AddedBy
					    Left Join {DbNames.EPYSL}..LoginUser UP On UP.UserCode = FFU.UpdatedBy
					    Left Join {DbNames.EPYSL}..Employee EAd On EAd.EmployeeCode = AD.EmployeeCode
					    Left Join {DbNames.EPYSL}..Employee EUP On EUP.EmployeeCode = UP.EmployeeCode
                        WHERE FBA.BookingNo ='{bookingNo}'
                        Group By FFU.BBFFUtilizationID,	FFU.YBChildID,	FFU.ExportOrderID,	FFU.ItemMasterID,	FFU.GSM,	FFU.ColorID,	FFU.SubGroupID,	FFU.BuyerID, 
                        FFU.GSMID,	FFU.CompositionID,	FFU.Width,	FFU.BatchNo,	FFU.WeightSheetNo,
                        FFU.FinishFabricUtilizationQTYinkg,FFU.FinishFabricExcessQtyKg,FFU.FinishFabricRejectQtyKg,	
                        FFU.FinishFabricBookingQtyDecreasedbyMerchantQtyKg,FFU.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg,	
                        ExportOrderNo,	ISNULL(ISVC.SegmentValue,''),	ISNULL(CT.ShortName,''),	(ISV2.SegmentValue + ' ' + ISV1.SegmentValue),
                        IIF(ISNULL(FFU.UpdatedBy,0) = 0,EAd.EmployeeName,EUP.EmployeeName)
                      )
					Select A.*,
					ExcessQtyKg = SUM(ISNULL(FF.ExcessQtyKg,0)), RejectQtyKg = SUM(ISNULL(FF.RejectQtyKg,0)), BookingQtyDecreasedbyMerchantQtyKg = SUM(ISNULL(FF.BookingQtyDecreasedbyMerchantQtyKg,0)), AfterProductionOrderCancelledbyMerchantQtyKg =  SUM(ISNULL(FF.AfterProductionOrderCancelledbyMerchantQtyKg,0))
					From FF A
					Inner Join FFQTY FF On FF.BBFFUtilizationID = A.BBFFUtilizationID
					Group By 
					A.BBFFUtilizationID, YBChildID,	ExportOrderID,	ItemMasterID,	GSM	,ColorID,	SubGroupID,	BuyerID,	GSMID,	CompositionID,	Width,	BatchNo,	WeightSheetNo,	FinishFabricUtilizationQTYinkg,
					FinishFabricExcessQtyKg,	FinishFabricRejectQtyKg	,FinishFabricBookingQtyDecreasedbyMerchantQtyKg,	FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg,	ExportOrderNo,	ColorName,
					Buyer,	FabricConstruction,	UserName;

                    ----FBookingAcknowledgeChildGFUtilization

                    Select GFU.* ,ExportOrderNo = ISNULL(EOM.ExportOrderNo,''), ColorName = ISNULL(ISVC.SegmentValue,''), Buyer = ISNULL(CT.ShortName,''),
                    FabricType = ISVFT.SegmentValue,Composition  = ISVCOM.SegmentValue
                    From FBookingAcknowledgeChildGFUtilization GFU
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = GFU.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    Left Join {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = GFU.ExportOrderID
                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVC On ISVC.SegmentValueID = GFU.ColorID
                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVFT On ISVFT.SegmentValueID = GFU.FabricTypeID
                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVCOM On ISVCOM.SegmentValueID = GFU.CompositionID
                    Left Join {DbNames.EPYSL}..Contacts CT On CT.ContactID = GFU.BuyerID And CT.ContactID >0
                    Where  FBA.BookingNo  = '{bookingNo}';


                    ---BulkBookingGreyYarnUtilization
                    Select 
                    ItemMasterID = YSS.ItemMasterId, 
                    SpinnerID = YSS.SpinnerId, Spinner = SPIN.ShortName, PhysicalLot = YSS.YarnLotNo,
                    YSS.PhysicalCount, Composition = ISV1.SegmentValue, NumaricCount = ISV6.SegmentValue,
                    YarnDetails = YSS.YarnCategory,
                    YSM.SampleStockQty, YSM.LiabilitiesStockQty, YSM.UnusableStockQty, YSM.LeftoverStockQty,
                    GYU.*
                    From BulkBookingGreyYarnUtilization GYU
                    INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = GYU.YBChildItemID
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN YarnStockSet YSS ON YSS.YarnStockSetId = GYU.YarnStockSetID
                    INNER JOIN YarnStockMaster YSM ON YSM.YarnStockSetId = YSS.YarnStockSetId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YSS.ItemMasterId
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..Contacts SPIN On SPIN.ContactID = YSS.SpinnerId
                    Where M.YBookingNo = '{yBookingNo}';

                    ---BulkBookingDyedYarnUtilization
                    Select 
                    DYU.*,EOM.ExportOrderNo, Buyer = CC.ShortName
                    From BulkBookingDyedYarnUtilization DYU
                    INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = DYU.YBChildItemID
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
					INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
					INNER JOIN {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = DYU.ExportOrderID
				    INNER JOIN {DbNames.EPYSL}..Contacts CC On CC.ContactID = DYU.BuyerID
                    Where  M.YBookingNo =  '{yBookingNo}';


                  
                    --Shade book
                    SELECT ShadeCode [id], ShadeCode [text] FROM YarnShadeBook;
              
                    -- YarnBookingChildItemYarnSubBrand
                    Select ETV.ValueID id, ETV.ValueName [text]
                    From {DbNames.EPYSL}..EntityTypeValue ETV
                    Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
                    Where ET.EntityTypeName = 'Yarn Sub Brand'
                    Order By ETV.ValueName;

                    --Spinner
                    {CommonQueries.GetYarnSpinners()};

                     --FBookingAckChildFinishingProcess
                    SELECT FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                    FMC.FMProcessID ProcessID, FMC.ProcessName ProcessName, FMC.ProcessTypeID, ET.ValueName ProcessType,FMC.FMCMasterID, b.ProcessName MachineName
                    FROM FBookingAckChildFinishingProcess FP
                    INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                    Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                    Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                    Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != '' AND FAC.IsDeleted = 0
                    GROUP BY FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                    --FBookingAckChildFinishingProcessItem
                    SELECT FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName
                    FROM FBookingAckChildFinishingProcessItem FPI
                    INNER JOIN FBookingAckChildFinishingProcess FP ON FP.FPChildID = FPI.FPChildID
                    INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                    Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                    Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                    Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != '' AND FAC.IsDeleted = 0
                    GROUP BY FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                    --SpinnerList
                    {CommonQueries.GetYarnSpinners()}

                    --Gauge List
                    SELECT DISTINCT id = KM.GG, [text] = KM.GG
                    from KnittingMachine KM
                    WHERE KM.GG > 0
                    GROUP BY KM.GG
                    ORDER BY KM.GG;

                    --Dia List
                    SELECT id = KM.Dia, [text] = KM.Dia, additionalValue = KM.GG
                    from KnittingMachine KM
                    WHERE KM.GG > 0
                    GROUP BY KM.Dia, KM.GG
                    ORDER BY KM.GG

                    -- Shade book
                    {CommonQueries.GetYarnShadeBooks()}
                    --Item Segments
                      /*{CommonQueries.GetItemSegmentValuesBySegmentNamesWithSegmentName()}*/;
                    {CommonQueries.GetCertifications()};
                    --Fabric Components
                        /*{CommonQueries.GetEntityTypeValuesOnly(EntityTypeNameConstants.FABRIC_TYPE)};*/
                          {CommonQueries.GetFabricComponents(EntityTypeNameConstants.FABRIC_TYPE)};              
                    --Item Segments
                        {CommonQueries.GetSubPrograms()}; 

                    --Color Wise Size Collar
                        {CommonQueries.GetColorWiseSizeCollar(bookingNo)}; 

                    --Color Wise Size Cuff
                        {CommonQueries.GetColorWiseSizeCuff(bookingNo)}; 

                    --Color Wise All Size Collar
                        {CommonQueries.GetAllColorWiseSizeCollar(bookingNo)}; 

                    --Color Wise All Size Cuff
                        {CommonQueries.GetAllColorWiseSizeCuff(bookingNo)}; 

                    -- Machine Brand
                    SELECT KM.KnittingMachineID,KM.KnittingUnitID,KM.MachineNo,KM.MachineTypeID,KM.MachineSubClassID,
                    KM.GG,KM.Dia,KM.BrandID,KM.Capacity,KU.ShortName AS Contact,EV.ValueName AS Brand,
                    IsSubContact = 0
                    from KnittingMachine KM
                    Left Join KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
                    Left Join {DbNames.EPYSL}..EntityTypeValue EV ON EV.ValueID = KM.BrandID
                    Left Join {DbNames.EPYSL}..Contacts C ON C.ContactID = KU.ContactID
                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI ON CAI.ContactID = C.ContactID
                    Where CAI.InHouse = 1;

                    -- Machine Brand Collar/Cuff
                    SELECT KM.BrandID,EV.ValueName AS Brand
                    from KnittingMachine KM
                    Left Join KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
                    Left Join {DbNames.EPYSL}..EntityTypeValue EV ON EV.ValueID = KM.BrandID
                    Left Join {DbNames.EPYSL}..Contacts C ON C.ContactID = KU.ContactID
                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI ON CAI.ContactID = C.ContactID
                    Where CAI.InHouse = 1
                    GROUP BY KM.BrandID,EV.ValueName
                    ORDER BY EV.ValueName;

                    --Fiber-SubProgram-Certifications Mapping Setup
                    Select * FROM {DbNames.EPYSL}..FabricComponentMappingSetup";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query, segmentNames);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();

                if (isFromYBAck && data.RevisionNo == data.YarnPreRevisionNo)
                {
                    bookingChilds = bookingChilds.Where(x => x.BookingQty > 0).ToList();
                    bookingChildsCollarCuff = bookingChildsCollarCuff.Where(x => x.BookingQty > 0).ToList();
                }

                //List<FBAChildPlanning> childPlanningCriterias = records.Read<FBAChildPlanning>().ToList();
                List<FBAChildPlanning> childPlanningCriteriaNameWithIds = records.Read<FBAChildPlanning>().ToList();

                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();

                var fabricChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                var collarCuffChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.KnittingMachines = records.Read<KnittingMachine>().ToList();

                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItemsRevision = records.Read<YarnBookingChildItem>().ToList();
                if (isYarnRevisionMenu == true && yarnBookingChildItemsRevision.Count > 0)
                {
                    data.IsYarnRevision = true;
                    yarnBookingChildItems = yarnBookingChildItemsRevision;
                }
                List<BulkBookingFinishFabricUtilization> fFinishFabricUtilizationList = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                List<FBookingAcknowledgeChildGFUtilization> gGreyFabricUtilizationList = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();
                List<BulkBookingGreyYarnUtilization> gGreyYarnUtilizationList = records.Read<BulkBookingGreyYarnUtilization>().ToList();
                List<BulkBookingDyedYarnUtilization> gDyedYarnUtilizationList = records.Read<BulkBookingDyedYarnUtilization>().ToList();

                yarnBookingChilds.ForEach(x =>
                {
                    x.ChildItems = yarnBookingChildItems.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.ChildItems.ForEach(CI =>
                    {
                        CI.GreyYarnUtilizationPopUpList = gGreyYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();
                        CI.DyedYarnUtilizationPopUpList = gDyedYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();

                    });
                    //x.ChildItemsRevision = yarnBookingChildItemsRevision.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.FinishFabricUtilizationPopUpList = fFinishFabricUtilizationList.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.GreyFabricUtilizationPopUpList = gGreyFabricUtilizationList.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.GreyLeftOverQty = gGreyFabricUtilizationList.Where(c => c.YBChildID == x.YBChildID).ToList().Sum(d => d.GreyFabricUtilizationQTYinkg);
                });

                if (isAddition)
                {
                    List<int> noNeedBookingChildIDs = new List<int>();
                    bookingChilds.ForEach(x =>
                    {
                        var obj1 = yarnBookingChilds.Find(y => y.BookingChildID == x.BookingChildID);
                        if (obj1 == null) noNeedBookingChildIDs.Add(x.BookingChildID);
                    });
                    noNeedBookingChildIDs.ForEach(bcId =>
                    {
                        bookingChilds.RemoveAll(y => y.BookingChildID == bcId);
                    });
                }

                List<Select2OptionModel> yarnShadeBooks = records.Read<Select2OptionModel>().ToList();
                List<Select2OptionModel> yarnSubBrandList = records.Read<Select2OptionModel>().ToList();
                List<Select2OptionModel> spinners = records.Read<Select2OptionModel>().ToList();

                List<FBookingAckChildFinishingProcess> finishingProcessChilds = records.Read<FBookingAckChildFinishingProcess>().ToList();
                List<FBookingAckChildFinishingProcessItem> finishingProcessChildItems = records.Read<FBookingAckChildFinishingProcessItem>().ToList();

                data.SpinnerList = records.Read<Select2OptionModel>().ToList();
                data.SpinnerList.Insert(0, new Select2OptionModel()
                {
                    id = 0.ToString(),
                    text = "N/A"
                });
                data.GaugeList = records.Read<Select2OptionModel>().ToList();
                data.DiaList = records.Read<Select2OptionModel>().ToList();
                data.YarnShadeBooks = records.Read<Select2OptionModel>();

                YarnBookingChild obj = new YarnBookingChild();
                bookingChilds.ForEach(bc =>
                {
                    obj = yarnBookingChilds.Find(x => x.BookingChildID == bc.BookingChildID);
                    if (isAddition && !isSavedAddition) bc.BookingQty = 0;
                    if (obj.IsNotNull())
                    {
                        if (isSavedAddition || isAllowYBookingNo)
                        {
                            //
                            if (obj.IsNotNull() && obj.IsForFabric)
                            {
                                bc.BookingQty = obj.BookingQty;
                                bc.IsForFabric = obj.IsForFabric;
                            }
                        }
                        bc.YarnAllowance = obj.YarnAllowance;
                        bc.FinishFabricUtilizationQty = obj.FinishFabricUtilizationQty;
                        bc.GreyLeftOverQty = obj.GreyLeftOverQty;
                        bc.ReqFinishFabricQty = obj.ReqFinishFabricQty;
                        bc.CriteriaNames = criteriaNames;
                        bc.FBAChildPlannings = fbaChildPlannings;
                        bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                        bc.ChildDetails = fabricChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                        bc.YarnShadeBooks = yarnShadeBooks;
                        bc.YarnSubBrandList = yarnSubBrandList;
                        bc.Spinners = spinners;

                        yarnBookingChilds.Where(x => x.BookingChildID == bc.BookingChildID).ToList().ForEach(x =>
                        {
                            x.ChildItems.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItems.AddRange(x.ChildItems);

                            /*x.ChildItemsRevision.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItemsRevision.AddRange(x.ChildItemsRevision);
                            if(x.ChildItemsRevision.Count>0)
                            {
                                data.IsYarnRevision = true;
                            }
                            */
                            x.FinishFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });

                            bc.FinishFabricUtilizationPopUpList.AddRange(x.FinishFabricUtilizationPopUpList);

                            x.GreyFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });

                            bc.GreyFabricUtilizationPopUpList.AddRange(x.GreyFabricUtilizationPopUpList);


                        });
                        //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));

                        #region Finishing Process
                        if (bc.SubGroupID == 1)
                        {
                            bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                            bc.PreFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                            bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                            bc.PostFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                        }
                        else
                        {
                            bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                            bc.PreFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                            bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                            bc.PostFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                        }
                        #endregion
                    }
                });

                obj = new YarnBookingChild();
                bookingChildsCollarCuff.ForEach(bc =>
                {
                    obj = yarnBookingChilds.Find(x => x.BookingChildID == bc.BookingChildID);
                    if (isAddition && !isSavedAddition) bc.BookingQty = 0;

                    if (obj.IsNotNull())
                    {
                        if (isSavedAddition || isAllowYBookingNo)
                        {
                            //YarnBookingChild obj = yarnBookingChilds.Find(x => x.BookingChildID == bc.BookingChildID);
                            if (obj.IsNotNull() && obj.IsForFabric)
                            {
                                bc.BookingQty = obj.BookingQty;
                                bc.IsForFabric = obj.IsForFabric;
                            }
                        }

                        bc.YarnAllowance = obj.YarnAllowance;
                        bc.FinishFabricUtilizationQty = obj.FinishFabricUtilizationQty;
                        bc.GreyLeftOverQty = obj.GreyLeftOverQty;
                        bc.ReqFinishFabricQty = obj.ReqFinishFabricQty;
                        bc.CriteriaNames = criteriaNames;
                        bc.FBAChildPlannings = fbaChildPlannings;
                        bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                        bc.ChildDetails = collarCuffChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                        bc.YarnShadeBooks = yarnShadeBooks;
                        bc.YarnSubBrandList = yarnSubBrandList;
                        bc.Spinners = spinners;

                        yarnBookingChilds.Where(x => x.BookingChildID == bc.BookingChildID).ToList().ForEach(x =>
                        {
                            x.ChildItems.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItems.AddRange(x.ChildItems);
                            /*
                            x.ChildItemsRevision.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItemsRevision.AddRange(x.ChildItemsRevision);
                            if (x.ChildItemsRevision.Count > 0)
                            {
                                data.IsYarnRevision = true;
                            }
                            */

                            x.FinishFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });
                            bc.FinishFabricUtilizationPopUpList.AddRange(x.FinishFabricUtilizationPopUpList);

                            x.GreyFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });
                            bc.GreyFabricUtilizationPopUpList.AddRange(x.GreyFabricUtilizationPopUpList);
                        });

                        //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));

                        #region Finishing Process
                        bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                        bc.PreFinishingProcessChilds.ForEach(pc =>
                        {
                            pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                        });
                        bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                        bc.PostFinishingProcessChilds.ForEach(pc =>
                        {
                            pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                        });
                        #endregion
                    }
                });

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                data.Childs.AddRange(data.FBookingChild);
                data.Childs.AddRange(data.FBookingChildCollor);
                data.Childs.AddRange(data.FBookingChildCuff);

                //if (isAddition && !isAllowYBookingNo) data.YBookingNo = "";

                var _recvCertifications = await records.ReadAsync<Select2OptionModelExtended>();
                data.Certifications = _recvCertifications.Where(x => x.desc == ItemSegmentNameConstants.YARN_CERTIFICATIONS);
                data.FabricComponentsNew = await records.ReadAsync<Select2OptionModel>();
                var itemSegments = await records.ReadAsync<Select2OptionModel>();
                data.YarnSubProgramNews = itemSegments.Where(x => x.desc == ItemSegmentNameConstants.YARN_SUBPROGRAM_NEW);

                data.CollarSizeList = records.Read<Select2OptionModel>().ToList();
                data.CuffSizeList = records.Read<Select2OptionModel>().ToList();
                data.AllCollarSizeList = records.Read<FBookingAcknowledgeChild>().ToList();
                data.AllCuffSizeList = records.Read<FBookingAcknowledgeChild>().ToList();

                data.MachineBrandList = records.Read<KnittingMachine>().ToList();
                data.CollarCuffBrandList = records.Read<KnittingMachine>().ToList();
                data.FabricComponentMappingSetupList = records.Read<FabricComponentMappingSetup>().ToList();
                #region Grouping Collar Cuff
                //Collar
                List<FBookingAcknowledgeChild> tempChildsCollar = CommonFunction.DeepClone(data.Childs.Where(x => x.SubGroupID == 11).ToList());
                var disList = tempChildsCollar.Select(m => new { m.Construction, m.Composition, m.Color })
                        .Distinct()
                        .ToList();

                List<FBookingAcknowledgeChild> tempChilds = new List<FBookingAcknowledgeChild>();

                int consumptionID = 1;
                int bookingChildID = 1;
                int ycChildItemID = 1;
                int ycChildItemRevID = 1;
                int ycBBFFUtilizationID = 1;
                int ycGFUtilizationID = 1;

                List<YarnBookingChildItem> tempYarnChildItems = new List<YarnBookingChildItem>();
                List<BulkBookingDyedYarnUtilization> dyedYarnUtilizations = new List<BulkBookingDyedYarnUtilization>();
                disList.ForEach(c =>
                {
                    var tempChilds1 = tempChildsCollar.Where(x => x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList();
                    var firstChild = tempChilds1.First();

                    var fbac = new FBookingAcknowledgeChild()
                    {
                        ConsumptionID = consumptionID++,
                        BookingChildID = bookingChildID++,
                        BookingID = firstChild.BookingID,

                        SubGroupID = firstChild.SubGroupID,

                        ConstructionId = firstChild.ConstructionId,
                        Construction = firstChild.Construction,

                        CompositionId = firstChild.CompositionId,
                        Composition = firstChild.Composition,

                        MachineTypeId = firstChild.MachineTypeId,
                        MachineType = firstChild.MachineType,

                        TechnicalNameId = firstChild.TechnicalNameId,
                        TechnicalName = firstChild.TechnicalName,

                        BrandID = firstChild.BrandID,
                        Brand = firstChild.Brand,

                        YarnAllowance = firstChild.YarnAllowance,

                        ColorID = firstChild.ColorID,
                        Color = firstChild.Color,

                        //YarnTypeID = firstChild.YarnTypeID,
                        YarnType = firstChild.YarnType,

                        YarnProgram = firstChild.YarnProgram,
                        DyeingType = firstChild.DyeingType,
                        Instruction = firstChild.Instruction,
                        LabDipNo = firstChild.LabDipNo,
                        RefSourceNo = firstChild.RefSourceNo,
                        ActualBookingQty = tempChilds1.Sum(x => x.ActualBookingQty),
                        BookingQty = tempChilds1.Sum(x => x.BookingQty),
                        BookingQtyKG = tempChilds1.Sum(x => x.BookingQtyKG),
                        FinishFabricUtilizationQty = firstChild.FinishFabricUtilizationQty,
                        ReqFinishFabricQty = tempChilds1.Sum(x => x.ReqFinishFabricQty),
                        TotalQty = tempChilds1.Sum(x => x.TotalQty),
                        GreyReqQty = tempChilds1.Sum(x => x.GreyReqQty),
                        GreyLeftOverQty = firstChild.GreyLeftOverQty,
                        GreyProdQty = tempChilds1.Sum(x => x.GreyProdQty),
                        //GreyProdQtyPCS = tempChilds1.Sum(x => x.GreyProdQtyPCS),

                        YarnShadeBooks = yarnShadeBooks,
                        YarnSubBrandList = yarnSubBrandList,
                        Spinners = spinners,
                        ChildItems = new List<YarnBookingChildItem>(),
                        ChildItemsRevision = new List<YarnBookingChildItemRevision>(),
                        FinishFabricUtilizationPopUpList = new List<BulkBookingFinishFabricUtilization>(),
                        GreyFabricUtilizationPopUpList = new List<FBookingAcknowledgeChildGFUtilization>(),
                        PreFinishingProcessChilds = firstChild.PreFinishingProcessChilds,
                        PostFinishingProcessChilds = firstChild.PostFinishingProcessChilds
                    };

                    #region Yarn Organizing

                    var mainChilds = CommonFunction.DeepClone(data.Childs.Where(x => x.SubGroupID == 11 && x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList());
                    List<BulkBookingGreyYarnUtilization> tGrayYarnUtilizations = new List<BulkBookingGreyYarnUtilization>();
                    List<BulkBookingDyedYarnUtilization> tDyedYarnUtilizations = new List<BulkBookingDyedYarnUtilization>();
                    List<int> itemMasterIds = new List<int>();
                    data.Childs.Where(x => x.SubGroupID == 11 && x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList().ForEach(x =>
                    {
                        tempYarnChildItems.AddRange(CommonFunction.DeepClone(x.ChildItems));
                        /*x.ChildItems.ForEach(ci =>
                        {
                            itemMasterIds.Add(ci.YItemMasterID);
                            ci.DyedYarnUtilizationPopUpList.ForEach(d =>
                            {
                                d.ItemMasterId = ci.YItemMasterID;
                                dyedYarnUtilizations.Add(CommonFunction.DeepClone(d));
                            });
                        });*/
                    });
                    var yarnItems = mainChilds.First().ChildItems;
                    //var yarnItemsRevision = mainChilds.First().ChildItemsRevision;

                    yarnItems.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 11;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        im.NetYarnReqQty = tempYarnChildItems.Where(x => x.YItemMasterID == im.YItemMasterID).Sum(x => x.NetYarnReqQty);
                        //im.DyedYarnUtilizationPopUpList = this.GetDyedYarnUtilizations(im.ItemMasterID, dyedYarnUtilizations);



                        im.GreyYarnUtilizationPopUpList.ForEach(y =>
                        {
                            decimal percent = (tempYarnChildItems.Where(x => x.YBChildItemID == y.YBChildItemID).FirstOrDefault().NetYarnReqQty / im.NetYarnReqQty) * 100;
                            y.UtilizationSampleStock = Math.Round((y.UtilizationSampleStock / percent) * 100, 2);
                            y.UtilizationLiabilitiesStock = Math.Round((y.UtilizationLiabilitiesStock / percent) * 100, 2);
                            y.UtilizationLeftoverStock = Math.Round((y.UtilizationLeftoverStock / percent) * 100, 2);
                            y.UtilizationUnusableStock = Math.Round((y.UtilizationUnusableStock / percent) * 100, 2);
                            y.TotalUtilization = Math.Round(y.UtilizationSampleStock + y.UtilizationLiabilitiesStock + y.UtilizationLeftoverStock + y.UtilizationUnusableStock, 2);
                        });
                        im.DyedYarnUtilizationPopUpList.ForEach(y =>
                        {
                            decimal percent = (tempYarnChildItems.Where(x => x.YBChildItemID == y.YBChildItemID).FirstOrDefault().NetYarnReqQty / im.NetYarnReqQty) * 100;
                            y.DyedYarnUtilizationQty = Math.Round((y.DyedYarnUtilizationQty / percent) * 100, 2);
                        });
                        im.GreyYarnUtilizationQty = im.GreyYarnUtilizationPopUpList.Sum(x => x.TotalUtilization);
                        im.DyedYarnUtilizationQty = im.DyedYarnUtilizationPopUpList.Sum(x => x.DyedYarnUtilizationQty);

                        fbac.ChildItems.Add(im);
                    });
                    /*
                    yarnItemsRevision.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemRevID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 11;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        fbac.ChildItemsRevision.Add(im);
                    });*/

                    #region Finish Fabric Utilization

                    List<BulkBookingFinishFabricUtilization> utilizations = new List<BulkBookingFinishFabricUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        utilizations.AddRange(x.FinishFabricUtilizationPopUpList);
                    });

                    var fFUtilization = utilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ItemMasterID,
                        g.GSM,
                        g.ColorID,
                        g.SubGroupID,
                        g.BuyerID,
                        g.GSMID,
                        g.CompositionID,
                        g.Width,
                        g.BatchNo,
                        g.WeightSheetNo,
                        g.ExportOrderNo,
                        g.ColorName,
                        g.Buyer,
                        g.FabricConstruction
                    }).Select(s => new BulkBookingFinishFabricUtilization()
                    {
                        BBFFUtilizationID = ycBBFFUtilizationID++,

                        BookingChildID = fbac.BookingChildID,
                        ConsumptionID = fbac.ConsumptionID,

                        ExportOrderID = s.Key.ExportOrderID,
                        ItemMasterID = s.Key.ItemMasterID,
                        GSM = s.Key.GSM,
                        ColorID = s.Key.ColorID,
                        SubGroupID = s.Key.SubGroupID,
                        BuyerID = s.Key.BuyerID,
                        GSMID = s.Key.GSMID,
                        CompositionID = s.Key.CompositionID,
                        Width = s.Key.Width,
                        BatchNo = s.Key.BatchNo,
                        WeightSheetNo = s.Key.WeightSheetNo,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ColorName = s.Key.ColorName,
                        Buyer = s.Key.Buyer,
                        FabricConstruction = s.Key.FabricConstruction,
                        FinishFabricUtilizationQTYinkg = s.Sum(n => n.FinishFabricUtilizationQTYinkg),
                        FinishFabricExcessQtyKg = s.Sum(n => n.FinishFabricExcessQtyKg),
                        FinishFabricRejectQtyKg = s.Sum(n => n.FinishFabricRejectQtyKg),
                        FinishFabricBookingQtyDecreasedbyMerchantQtyKg = s.Sum(n => n.FinishFabricBookingQtyDecreasedbyMerchantQtyKg),
                        FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg = s.Sum(n => n.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg),
                        TotalStockQtyinkg = s.Sum(n => n.TotalStockQtyinkg)
                    }).ToList();


                    fbac.FinishFabricUtilizationPopUpList = fFUtilization;

                    #endregion

                    #region Grey Fabric utilization
                    List<FBookingAcknowledgeChildGFUtilization> greyUtilizations = new List<FBookingAcknowledgeChildGFUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        greyUtilizations.AddRange(x.GreyFabricUtilizationPopUpList);
                    });


                    var gFUtilization = greyUtilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ExportOrderNo,
                        g.ItemMasterID,
                        g.BuyerID,
                        g.Buyer,
                        g.FabricTypeID,
                        g.FabricType,
                        g.ColorID,
                        g.ColorName,
                        g.CompositionID,
                        g.Composition,
                        g.GSMID,
                        g.GSM,
                        g.SubGroupID
                    }).Select(s => new FBookingAcknowledgeChildGFUtilization()
                    {
                        ExportOrderID = s.Key.ExportOrderID,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ItemMasterID = s.Key.ItemMasterID,
                        BuyerID = s.Key.BuyerID,
                        Buyer = s.Key.Buyer,
                        FabricTypeID = s.Key.FabricTypeID,
                        FabricType = s.Key.FabricType,
                        ColorID = s.Key.ColorID,
                        ColorName = s.Key.ColorName,
                        CompositionID = s.Key.CompositionID,
                        Composition = s.Key.Composition,
                        GSMID = s.Key.GSMID,
                        GSM = s.Key.GSM,
                        SubGroupID = s.Key.SubGroupID,
                        GreyFabricUtilizationQTYinkg = s.Sum(n => n.GreyFabricUtilizationQTYinkg)
                    }).ToList();

                    fbac.GreyFabricUtilizationPopUpList = gFUtilization;
                    #endregion

                    #endregion

                    tempChilds.Add(fbac);
                });

                //Cuff
                tempChildsCollar = CommonFunction.DeepClone(data.Childs.Where(x => x.SubGroupID == 12).ToList());
                disList = tempChildsCollar.Select(m => new { m.Construction, m.Composition, m.Color })
                        .Distinct()
                        .ToList();

                tempYarnChildItems = new List<YarnBookingChildItem>();
                disList.ForEach(c =>
                {
                    var tempChilds1 = tempChildsCollar.Where(x => x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList();
                    //tempChilds1.ForEach(x =>
                    //{
                    //    tempYarnChildItems.AddRange(x.ChildItems);
                    //});
                    var firstChild = tempChilds1.First();

                    var fbac = new FBookingAcknowledgeChild()
                    {
                        ConsumptionID = consumptionID++,
                        BookingChildID = bookingChildID++,
                        BookingID = firstChild.BookingID,

                        SubGroupID = firstChild.SubGroupID,

                        ConstructionId = firstChild.ConstructionId,
                        Construction = firstChild.Construction,

                        CompositionId = firstChild.CompositionId,
                        Composition = firstChild.Composition,

                        MachineTypeId = firstChild.MachineTypeId,
                        MachineType = firstChild.MachineType,

                        TechnicalNameId = firstChild.TechnicalNameId,
                        TechnicalName = firstChild.TechnicalName,

                        BrandID = firstChild.BrandID,
                        Brand = firstChild.Brand,

                        YarnAllowance = firstChild.YarnAllowance,

                        ColorID = firstChild.ColorID,
                        Color = firstChild.Color,

                        //YarnTypeID = firstChild.YarnTypeID,
                        YarnType = firstChild.YarnType,

                        YarnProgram = firstChild.YarnProgram,
                        DyeingType = firstChild.DyeingType,
                        Instruction = firstChild.Instruction,
                        LabDipNo = firstChild.LabDipNo,
                        RefSourceNo = firstChild.RefSourceNo,
                        ActualBookingQty = tempChilds1.Sum(x => x.ActualBookingQty),
                        BookingQty = tempChilds1.Sum(x => x.BookingQty),
                        BookingQtyKG = tempChilds1.Sum(x => x.BookingQtyKG),
                        FinishFabricUtilizationQty = firstChild.FinishFabricUtilizationQty,
                        ReqFinishFabricQty = tempChilds1.Sum(x => x.ReqFinishFabricQty),
                        TotalQty = tempChilds1.Sum(x => x.TotalQty),
                        GreyReqQty = tempChilds1.Sum(x => x.GreyReqQty),
                        GreyLeftOverQty = firstChild.GreyLeftOverQty,
                        GreyProdQty = tempChilds1.Sum(x => x.GreyProdQty),
                        //GreyProdQtyPCS = tempChilds1.Sum(x => x.GreyProdQtyPCS),

                        YarnShadeBooks = yarnShadeBooks,
                        YarnSubBrandList = yarnSubBrandList,
                        Spinners = spinners,
                        ChildItems = new List<YarnBookingChildItem>(),
                        ChildItemsRevision = new List<YarnBookingChildItemRevision>(),
                        PreFinishingProcessChilds = firstChild.PreFinishingProcessChilds,
                        PostFinishingProcessChilds = firstChild.PostFinishingProcessChilds
                    };

                    #region Yarn Organizing

                    var mainChilds = CommonFunction.DeepClone(data.Childs.Where(x => x.SubGroupID == 12 && x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList());
                    data.Childs.Where(x => x.SubGroupID == 12 && x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList().ForEach(x =>
                    {
                        tempYarnChildItems.AddRange(CommonFunction.DeepClone(x.ChildItems));
                    });
                    var yarnItems = mainChilds.First().ChildItems;
                    //var yarnItemsRevision = mainChilds.First().ChildItemsRevision;

                    yarnItems.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 12;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        im.NetYarnReqQty = tempYarnChildItems.Where(x => x.YItemMasterID == im.YItemMasterID).Sum(x => x.NetYarnReqQty);


                        im.GreyYarnUtilizationPopUpList.ForEach(y =>
                        {
                            decimal percent = (tempYarnChildItems.Where(x => x.YBChildItemID == y.YBChildItemID).FirstOrDefault().NetYarnReqQty / im.NetYarnReqQty) * 100;
                            y.UtilizationSampleStock = Math.Round((y.UtilizationSampleStock / percent) * 100, 2);
                            y.UtilizationLiabilitiesStock = Math.Round((y.UtilizationLiabilitiesStock / percent) * 100, 2);
                            y.UtilizationLeftoverStock = Math.Round((y.UtilizationLeftoverStock / percent) * 100, 2);
                            y.UtilizationUnusableStock = Math.Round((y.UtilizationUnusableStock / percent) * 100, 2);
                            y.TotalUtilization = Math.Round(y.UtilizationSampleStock + y.UtilizationLiabilitiesStock + y.UtilizationLeftoverStock + y.UtilizationUnusableStock, 2);
                        });
                        im.DyedYarnUtilizationPopUpList.ForEach(y =>
                        {
                            decimal percent = (tempYarnChildItems.Where(x => x.YBChildItemID == y.YBChildItemID).FirstOrDefault().NetYarnReqQty / im.NetYarnReqQty) * 100;
                            y.DyedYarnUtilizationQty = Math.Round((y.DyedYarnUtilizationQty / percent) * 100, 2);
                        });
                        im.GreyYarnUtilizationQty = im.GreyYarnUtilizationPopUpList.Sum(x => x.TotalUtilization);
                        im.DyedYarnUtilizationQty = im.DyedYarnUtilizationPopUpList.Sum(x => x.DyedYarnUtilizationQty);


                        fbac.ChildItems.Add(im);
                    });
                    /*
                    yarnItemsRevision.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemRevID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 12;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        fbac.ChildItemsRevision.Add(im);
                    });*/

                    #region Finish Fabric Utilization 
                    List<BulkBookingFinishFabricUtilization> utilizations = new List<BulkBookingFinishFabricUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        utilizations.AddRange(x.FinishFabricUtilizationPopUpList);
                    });


                    var fFUtilization = utilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ItemMasterID,
                        g.GSM,
                        g.ColorID,
                        g.SubGroupID,
                        g.BuyerID,
                        g.GSMID,
                        g.CompositionID,
                        g.Width,
                        g.BatchNo,
                        g.WeightSheetNo,
                        g.ExportOrderNo,
                        g.ColorName,
                        g.Buyer,
                        g.FabricConstruction
                    }).Select(s => new BulkBookingFinishFabricUtilization()
                    {
                        BBFFUtilizationID = ycBBFFUtilizationID++,

                        BookingChildID = fbac.BookingChildID,
                        ConsumptionID = fbac.ConsumptionID,

                        ExportOrderID = s.Key.ExportOrderID,
                        ItemMasterID = s.Key.ItemMasterID,
                        GSM = s.Key.GSM,
                        ColorID = s.Key.ColorID,
                        SubGroupID = s.Key.SubGroupID,
                        BuyerID = s.Key.BuyerID,
                        GSMID = s.Key.GSMID,
                        CompositionID = s.Key.CompositionID,
                        Width = s.Key.Width,
                        BatchNo = s.Key.BatchNo,
                        WeightSheetNo = s.Key.WeightSheetNo,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ColorName = s.Key.ColorName,
                        Buyer = s.Key.Buyer,
                        FabricConstruction = s.Key.FabricConstruction,
                        FinishFabricUtilizationQTYinkg = s.Sum(n => n.FinishFabricUtilizationQTYinkg),
                        FinishFabricExcessQtyKg = s.Sum(n => n.FinishFabricExcessQtyKg),
                        FinishFabricRejectQtyKg = s.Sum(n => n.FinishFabricRejectQtyKg),
                        FinishFabricBookingQtyDecreasedbyMerchantQtyKg = s.Sum(n => n.FinishFabricBookingQtyDecreasedbyMerchantQtyKg),
                        FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg = s.Sum(n => n.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg),
                        TotalStockQtyinkg = s.Sum(n => n.TotalStockQtyinkg)
                    }).ToList();

                    fbac.FinishFabricUtilizationPopUpList = CommonFunction.DeepClone(fFUtilization);

                    #endregion

                    #region Grey Fabric utilization
                    List<FBookingAcknowledgeChildGFUtilization> greyUtilizations = new List<FBookingAcknowledgeChildGFUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        greyUtilizations.AddRange(x.GreyFabricUtilizationPopUpList);
                    });

                    var gFUtilization = greyUtilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ExportOrderNo,
                        g.ItemMasterID,
                        g.BuyerID,
                        g.Buyer,
                        g.FabricTypeID,
                        g.FabricType,
                        g.ColorID,
                        g.ColorName,
                        g.CompositionID,
                        g.Composition,
                        g.GSMID,
                        g.GSM,
                        g.SubGroupID
                    }).Select(s => new FBookingAcknowledgeChildGFUtilization()
                    {
                        ExportOrderID = s.Key.ExportOrderID,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ItemMasterID = s.Key.ItemMasterID,
                        BuyerID = s.Key.BuyerID,
                        Buyer = s.Key.Buyer,
                        FabricTypeID = s.Key.FabricTypeID,
                        FabricType = s.Key.FabricType,
                        ColorID = s.Key.ColorID,
                        ColorName = s.Key.ColorName,
                        CompositionID = s.Key.CompositionID,
                        Composition = s.Key.Composition,
                        GSMID = s.Key.GSMID,
                        GSM = s.Key.GSM,
                        SubGroupID = s.Key.SubGroupID,
                        GreyFabricUtilizationQTYinkg = s.Sum(n => n.GreyFabricUtilizationQTYinkg)
                    }).ToList();

                    fbac.GreyFabricUtilizationPopUpList = gFUtilization;
                    #endregion
                    #endregion

                    tempChilds.Add(fbac);
                });
                #endregion

                data.Childs = data.Childs.Where(x => x.SubGroupID == 1).ToList();
                data.Childs.AddRange(tempChilds);

                data.FBookingChild = data.Childs.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = data.Childs.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = data.Childs.Where(x => x.SubGroupID == 12).ToList();

                data.BookingQty = data.FBookingChild.Sum(x => Convert.ToInt32(x.BookingQty));

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        private List<BulkBookingDyedYarnUtilization> GetDyedYarnUtilizations(int itemMasterID, List<BulkBookingDyedYarnUtilization> dyedYarnUtilizations)
        {
            List<BulkBookingDyedYarnUtilization> finalList = new List<BulkBookingDyedYarnUtilization>();
            //dyedYarnUtilizations.Where(x => x.ItemMasterId == itemMasterID).ToList().ForEach(c =>
            //{

            //});
            return finalList;
        }

        public async Task<FBookingAcknowledge> GetDataByYBookingNo(string bookingNo, bool isSample, bool isAddition, string yBookingNo, bool isSavedAddition, bool isAllowYBookingNo, bool isYarnRevisionMenu = false, bool isFromYBAck = false)
        {

            var segmentNames = new
            {
                SegmentNames = new string[]
               {
                    ItemSegmentNameConstants.YARN_CERTIFICATIONS,
                    ItemSegmentNameConstants.YARN_SUBPROGRAM_NEW
               }
            };

            string joinName = isSample ? "BAC" : "BA";

            var query =
                $@"-- Master Data
                WITH M AS (
                    SELECT FBA.FBAckID,	FBA.BookingID,FBA.BookingNo,FBA.BookingDate,
                    YarnBookingDate = FBA.ApprovedDatePMC,
                    FBA.SLNo,FBA.StyleMasterID,FBA.StyleNo,FBA.SubGroupID,
	                FBA.BuyerID,FBA.BuyerTeamID,FBA.SupplierID,FBA.ExportOrderID,FBA.ExecutionCompanyID, BM.CompanyID, FBA.WithoutOB,
	                OrderQty = CASE WHEN FBA.WithoutOB=1 THEN SBM.OrderQty ELSE BM.RePurchaseQty END,
	                Remarks = CASE WHEN FBA.WithoutOB=1 THEN SBM.Remarks ELSE BM.Remarks END,
	                BookingBy = CASE WHEN FBA.WithoutOB=1 THEN SBM.AddedBy ELSE BM.AddedBy END,
                    YBM.YBookingNo, ParentYBookingNo = YBM.YBookingNo, FBA.IsSample,YBM.YRequiredDate,
                    FBA.CollarSizeID,FBA.CollarWeightInGm,FBA.CuffSizeID,FBA.CuffWeightInGm,YBM.AddedBy YarnBookingBy,
		            FBA.SeasonID, AddYarnBookingDate = YBM.DateAdded
                    FROM FBookingAcknowledge FBA
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
                    WHERE FBA.BookingNo = '{bookingNo}' AND YBM.YBookingNo = '{yBookingNo}'
                ),
            FBA1 AS
            (
                SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SLNo='',SM.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(BC.BookingQty),
	            IsSample = 0
                FROM FabricBookingAcknowledge A
	            JOIN {DbNames.EPYSL}..BookingMaster b on b.BookingID = a.BookingID
	            Inner Join {DbNames.EPYSL}..BookingChild BC On BC.BookingID = A.BookingID
	            JOIN {DbNames.EPYSL}..ExportOrderMaster EO ON EO.ExportOrderID = B.ExportOrderID
	            JOIN {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = EO.StyleMasterID
                WHERE b.BookingNo in ('{bookingNo}')
	            Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SM.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate
            ),
            EC AS (
	            SELECT TOP(1)PO.ExecutionCompanyID,PO.ExportOrderID
	            FROM FBA1
	            INNER JOIN {DbNames.EPYSL}..ExportOrderPO PO ON PO.ExportOrderID = FBA1.ExportOrderID
            ),
            FBA2 AS
            (
                SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(c.RequiredQty),
	            IsSample = 1
                FROM FabricBookingAcknowledge A
	            Inner Join {DbNames.EPYSL}..SampleBookingMaster b on b.BookingID = a.BookingID
	            Inner Join {DbNames.EPYSL}..SampleBookingConsumptionChild c ON c.BookingID = a.BookingID
                WHERE b.BookingNo in ('{bookingNo}')
	            Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate
            ),
            FBC AS
            (
	            SELECT *FROM FBA1
	            UNION
	            SELECT *FROM FBA2
            ),
            IHD AS
            (
	            SELECT M.BookingID, RequiredFabricDeliveryDate = CASE WHEN M.WithoutOB = 1 THEN MAX(FBC1.InHouseDate) ELSE MAX(FBC1.InHouseDate) END,FBC1.BookingQty,M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm
		        , CompanyName = CASE WHEN ISNULL(FBC1.IsSample,0) = 0 THEN CE.CompanyName ELSE CES.CompanyName END
	            FROM M
		        LEFT JOIN FBC FBC1 ON FBC1.BookingID = M.BookingID
		        LEFT JOIN {DbNames.EPYSL}..CompanyEntity CE On CE.CompanyID = M.ExecutionCompanyID 
		        LEFT JOIN {DbNames.EPYSL}..CompanyEntity CES On CES.CompanyID = FBC1.CompanyID 
	            GROUP BY M.BookingID, M.WithoutOB,FBC1.BookingQty,M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm,
		        CASE WHEN ISNULL(FBC1.IsSample,0) = 0 THEN CE.CompanyName ELSE CES.CompanyName END
            ),
            OEC AS
            (
	            Select top 1 OECL.EventDate, OrderBankMasterID, M.BookingID 
				FROM M
				INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID=M.ExportOrderID 
	            INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	            Where TE.EventDisplayName='Fabric Delivery start'
            ),
            OEC2 AS
            (
	            Select top 1 OECL.EventDate, M.BookingID 
				FROM M
				INNER JOIN {DbNames.EPYSL}..OrderEventCalander OECL ON OECL.ExportOrderID=M.ExportOrderID
	            INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	            Where TE.EventDisplayName='Fabric Delivery complete'
            ),
            OBP AS
            (
	            Select TOP 1 OBP.EDD, OEC.BookingID 
				FROM OEC 
				INNER JOIN {DbNames.EPYSL}..OrderBankPO OBP ON OBP.OrderBankMasterID=OEC.OrderBankMasterID
	            ORDER BY EDD desc 
            ),
			OQK AS
            (
	            Select FBAC.BookingID, SUM(FBAC.BookingQty)OrderQtyKG 
	            from M
				INNER JOIN FBookingAcknowledgeChild FBAC ON FBAC.AcknowledgeID = M.FBAckID AND FBAC.IsDeleted = 0
	            INNER JOIN {DbNames.EPYSL}..BookingChild BC ON BC.ConsumptionID = FBAC.ConsumptionID AND BC.BookingID = FBAC.BookingID
				GROUP BY FBAC.BookingID
            )
            SELECT M.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.YarnBookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,IHD.BookingQty BookingQty,M.BuyerID,M.BuyerTeamID, M.IsSample,
            M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,IHD.CompanyName,M.SubGroupID,M.Remarks,
            Supplier.ShortName [SupplierName],CTS.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, ISNULL(Supplier.MappingCompanyID,0) CompanyID,
            SM.StyleNo, M.YBookingNo, M.ParentYBookingNo, TNACalendarDays = EOM.CalendarDays, IHD.RequiredFabricDeliveryDate,OBP.EDD FirstShipmentDate,OEC.EventDate FabricStartDate,OEC2.EventDate FabricEndDate,OQK.OrderQtyKG,TL.EmployeeName TeamLeader,
            M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm,E.EmployeeName BookingByName,M.YRequiredDate YarnRequiredDate,
	        ET.TeamName MerchandisingTeam,'' YarnProjectionReference,null FabricRequireDate,E2.EmployeeName YarnBookingByName,OBP.EDD GarmentsShipmentDate, M.AddYarnBookingDate
            FROM M
            LEFT JOIN BuyerTeamWiseTeamLeaderSetup BTL ON BTL.BuyerTeamID=M.BuyerTeamID
	        LEFT JOIN {DbNames.EPYSL}..Employee TL ON TL.EmployeeCode=BTL.TeamLeaderEmployeeCode
            LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.ExportOrderID = M.ExportOrderID
            LEFT Join {DbNames.EPYSL}..OrderBankMaster OBM On OBM.StyleMasterID = EOM.StyleMasterID
            LEFT Join {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = OBM.StyleMasterID
            LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
            LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
            LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.CompanyID
            LEFT JOIN {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
            LEFT Join {DbNames.EPYSL}..ContactSeason CTS On CTS.SeasonID = M.SeasonID
	        LEFT JOIN {DbNames.EPYSL}..LoginUser LU On  LU.UserCode=M.BookingBy
            LEFT JOIN {DbNames.EPYSL}..Employee E On E.EmployeeCode = LU.EmployeeCode
	        LEFT JOIN {DbNames.EPYSL}..LoginUser LU2 On  LU2.UserCode=M.YarnBookingBy
            LEFT JOIN {DbNames.EPYSL}..Employee E2 On E2.EmployeeCode = LU2.EmployeeCode
            LEFT JOIN IHD ON IHD.BookingID = M.BookingID
	        --Inner JOIN {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = BM.ExportOrderID 
	        Inner Join {DbNames.EPYSL}..StyleMaster SM2 On SM2.StyleMasterID = EOM.StyleMasterID
	        Inner Join {DbNames.EPYSL}..EmployeeTeamHK ET On ET.TeamID = SM.MerchandiserTeamID
			LEFT JOIN OEC ON OEC.BookingID = M.BookingID
			LEFT JOIN OEC2 ON OEC2.BookingID = M.BookingID
			LEFT JOIN OBP ON OBP.BookingID = M.BookingID
			LEFT JOIN OQK ON OQK.BookingID = M.BookingID;
					/* --Update by Saif 01-06-2024
                --Master Data
                WITH M AS (
                    SELECT FBA.FBAckID,	FBA.BookingID,FBA.BookingNo,FBA.BookingDate,FBA.ApprovedDatePMC YarnBookingDate,FBA.SLNo,FBA.StyleMasterID,FBA.StyleNo,FBA.SubGroupID,
	                FBA.BuyerID,FBA.BuyerTeamID,FBA.SupplierID,FBA.ExportOrderID,FBA.ExecutionCompanyID, BM.CompanyID, FBA.WithoutOB,
	                OrderQty = CASE WHEN FBA.WithoutOB=1 THEN SBM.OrderQty ELSE BM.RePurchaseQty END,
	                Remarks = CASE WHEN FBA.WithoutOB=1 THEN SBM.Remarks ELSE BM.Remarks END,
	                BookingBy = CASE WHEN FBA.WithoutOB=1 THEN SBM.AddedBy ELSE BM.AddedBy END,
                    YBM.YBookingNo, ParentYBookingNo = YBM.YBookingNo, FBA.IsSample,YBM.YRequiredDate,
                    FBA.CollarSizeID,FBA.CollarWeightInGm,FBA.CuffSizeID,FBA.CuffWeightInGm,YBM.AddedBy YarnBookingBy,
		            FBA.SeasonID
                    FROM FBookingAcknowledge FBA
	                LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                    LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
                    WHERE FBA.BookingNo = '{bookingNo}' AND YBM.YBookingNo = '{yBookingNo}'
                ),
            FBA1 AS
            (
                SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SLNo='',SM.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(BC.BookingQty),
	            IsSample = 0
                FROM FabricBookingAcknowledge A
	            JOIN {DbNames.EPYSL}..BookingMaster b on b.BookingID = a.BookingID
	            Inner Join {DbNames.EPYSL}..BookingChild BC On BC.BookingID = A.BookingID
	            JOIN {DbNames.EPYSL}..ExportOrderMaster EO ON EO.ExportOrderID = B.ExportOrderID
	            JOIN {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = EO.StyleMasterID
                WHERE b.BookingNo in ('{bookingNo}')
	            Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SM.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate
            ),
            EC AS (
	            SELECT TOP(1)PO.ExecutionCompanyID,PO.ExportOrderID
	            FROM FBA1
	            INNER JOIN {DbNames.EPYSL}..ExportOrderPO PO ON PO.ExportOrderID = FBA1.ExportOrderID
            ),
            FBA2 AS
            (
                SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(c.RequiredQty),
	            IsSample = 1
                FROM FabricBookingAcknowledge A
	            Inner Join {DbNames.EPYSL}..SampleBookingMaster b on b.BookingID = a.BookingID
	            Inner Join {DbNames.EPYSL}..SampleBookingConsumptionChild c ON c.BookingID = a.BookingID
                WHERE b.BookingNo in ('{bookingNo}')
	            Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	            b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	            b.BuyerID,b.BuyerTeamID,b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate
            ),
            FBC AS
            (
	            SELECT *FROM FBA1
	            UNION
	            SELECT *FROM FBA2
            ),
                IHD AS
                (
	                SELECT M.BookingID, RequiredFabricDeliveryDate = CASE WHEN M.WithoutOB = 1 THEN MAX(FBC1.InHouseDate) ELSE MAX(FBC1.InHouseDate) END,FBC1.BookingQty,M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm
		            , CompanyName = CASE WHEN ISNULL(FBC1.IsSample,0) = 0 THEN CE.CompanyName ELSE CES.CompanyName END
	                FROM M
		            LEFT JOIN FBC FBC1 ON FBC1.BookingID = M.BookingID
		            LEFT JOIN {DbNames.EPYSL}..CompanyEntity CE On CE.CompanyID = M.ExecutionCompanyID 
		            LEFT JOIN {DbNames.EPYSL}..CompanyEntity CES On CES.CompanyID = FBC1.CompanyID 
	                GROUP BY M.BookingID, M.WithoutOB,FBC1.BookingQty,M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm,
		            CASE WHEN ISNULL(FBC1.IsSample,0) = 0 THEN CE.CompanyName ELSE CES.CompanyName END
                )
                SELECT M.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.YarnBookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,IHD.BookingQty BookingQty,M.BuyerID,M.BuyerTeamID, M.IsSample,
                M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,IHD.CompanyName,M.SubGroupID,M.Remarks,
                Supplier.ShortName [SupplierName],CTS.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, ISNULL(Supplier.MappingCompanyID,0) CompanyID,
                SM.StyleNo, M.YBookingNo, M.ParentYBookingNo, TNACalendarDays = EOM.CalendarDays, IHD.RequiredFabricDeliveryDate,OBP.EDD FirstShipmentDate,OEC.EventDate FabricStartDate,OEC2.EventDate FabricEndDate,OQK.OrderQtyKG,TL.EmployeeName TeamLeader,
                M.CollarSizeID,M.CollarWeightInGm,M.CuffSizeID,M.CuffWeightInGm,E.EmployeeName BookingByName,M.YRequiredDate YarnRequiredDate,
	            ET.TeamName MerchandisingTeam,'' YarnProjectionReference,null FabricRequireDate,E2.EmployeeName YarnBookingByName,OBP.EDD GarmentsShipmentDate
                FROM M
                LEFT JOIN BuyerTeamWiseTeamLeaderSetup BTL ON BTL.BuyerTeamID=M.BuyerTeamID
	            LEFT JOIN {DbNames.EPYSL}..Employee TL ON TL.EmployeeCode=BTL.TeamLeaderEmployeeCode
                LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.ExportOrderID = M.ExportOrderID
                LEFT Join {DbNames.EPYSL}..OrderBankMaster OBM On OBM.StyleMasterID = EOM.StyleMasterID
                LEFT Join {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = OBM.StyleMasterID
                LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.CompanyID
                LEFT JOIN {DbNames.EPYSL}..Contacts Supplier On M.SupplierID = Supplier.ContactID
                LEFT Join {DbNames.EPYSL}..ContactSeason CTS On CTS.SeasonID = M.SeasonID
	            LEFT JOIN {DbNames.EPYSL}..LoginUser LU On  LU.UserCode=M.BookingBy
                LEFT JOIN {DbNames.EPYSL}..Employee E On E.EmployeeCode = LU.EmployeeCode
	            LEFT JOIN {DbNames.EPYSL}..LoginUser LU2 On  LU2.UserCode=M.YarnBookingBy
                LEFT JOIN {DbNames.EPYSL}..Employee E2 On E2.EmployeeCode = LU2.EmployeeCode
                LEFT JOIN IHD ON IHD.BookingID = M.BookingID
	            --Inner JOIN {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = BM.ExportOrderID 
	            Inner Join {DbNames.EPYSL}..StyleMaster SM2 On SM2.StyleMasterID = EOM.StyleMasterID
	            Inner Join {DbNames.EPYSL}..EmployeeTeamHK ET On ET.TeamID = SM.MerchandiserTeamID
	            Outer Apply
	            (
	            Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
	            INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	            Where OECL.ExportOrderID=M.ExportOrderID and TE.EventDisplayName='Fabric Delivery start'
	            )OEC
	            Outer Apply
	            (
	            Select top 1 OECL.* from {DbNames.EPYSL}..OrderEventCalander OECL 
	            INNER JOIN {DbNames.EPYSL}..TNAEvent TE ON TE.EventID=OECL.EventID
	            Where OECL.ExportOrderID=M.ExportOrderID and TE.EventDisplayName='Fabric Delivery complete'
	            )OEC2
	            Outer Apply 
	            (
	            Select TOP 1 * FROM {DbNames.EPYSL}..OrderBankPO OBP WHERE OBP.OrderBankMasterID=OEC.OrderBankMasterID
	            ORDER BY EDD desc 
	            )OBP
	            Outer Apply
	            (
		            Select SUM(FBAC.BookingQty)OrderQtyKG 
                    from FBookingAcknowledgeChild FBAC
		            INNER JOIN {DbNames.EPYSL}..BookingChild BC ON BC.BookingChildID =FBAC.BookingChildID
		            Where FBAC.BookingID=M.BookingID AND FBAC.IsDeleted = 0
	            )OQK;
                    */
                    -- Booking Acknowledge Child (Fabric)
                    WITH F AS
                    (
	                    SELECT BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, ActualBookingQty = BAC.BookingQty, BAC.BookingQty,TotalQty =SUM(FCM.TotalQty), BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.YarnBrandID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
	                    IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId, ISG.SubGroupName,
	                    ISV.SegmentValue YarnType, ETV.ValueName YarnProgram, ETV2.ValueName Brand, 
	
	                    BA.BookingNo, YBM.YBookingNo,
	                    ContactID = FCM.BuyerID,
	                    ExecutionCompanyID = FCM.CompanyID,

	                    Construction = ISV1.SegmentValue,
	                    Composition = ISV2.SegmentValue,
	                    Color = ISV3.SegmentValue,
	                    GSM = ISV4.SegmentValue,
	                    FabricWidth = ISV5.SegmentValue,
	                    KnittingType = ISV7.SegmentValue,
	                    DyeingType = ISV6.SegmentValue,
	
	                    Instruction = BAC.Remarks,
	                    ForBDSStyleNo = BA.StyleNo,

	                    T.TechnicalName, KMS.SubClassName MachineType,
	                    BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, KMS.TypeID As KTypeId,
                        BAC.RefSourceID,BAC.RefSourceNo

	                    FROM FBookingAcknowledgeChild BAC
	                    LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                        INNER JOIN YarnBookingChild_New YBC ON YBC.BookingChildID=BAC.BookingChildID
						INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID=YBC.YBookingID AND YBM.BookingID = BAC.BookingID
                        INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
	                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingChildID = BAC.BookingChildID AND FCM.ConsumptionID = BAC.ConsumptionID
	                    LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BAC.ItemMasterID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = {joinName}.SubGroupID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BAC.A1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BAC.YarnBrandID
	                    LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BAC.TechnicalNameID
	                    LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BAC.MachineTypeId
	                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV2 ON ETV2.ValueID = BAC.BrandID
	                    LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = BA.SupplierID
                        WHERE ISG.SubGroupID = 1  AND BAC.IsDeleted = 0 AND BAC.BookingQty > 0
						GROUP BY BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, BAC.BookingQty,BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.YarnBrandID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID, IM.Segment2ValueID,
	                    IM.Segment3ValueID,IM.Segment7ValueID,IM.Segment4ValueID, ISG.SubGroupName,
	                    ISV.SegmentValue, ETV.ValueName, ETV2.ValueName, BA.BookingNo, YBM.YBookingNo, FCM.BuyerID,FCM.CompanyID,ISV1.SegmentValue,ISV2.SegmentValue,ISV3.SegmentValue,ISV4.SegmentValue,ISV5.SegmentValue,ISV7.SegmentValue,
	                    ISV6.SegmentValue,BAC.Remarks,
	                    BA.StyleNo,T.TechnicalName, KMS.SubClassName,
	                    BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0), KMS.TypeID,
                        BAC.RefSourceID,BAC.RefSourceNo
                    )
                    SELECT * FROM F WHERE YBookingNo = '{yBookingNo}';

                    -- Booking Acknowledge Child (Collar & Cuff)
                    WITH F AS
                    (
	                    SELECT BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, ActualBookingQty = BAC.BookingQty, BAC.BookingQty, TotalQty = SUM(FCM.TotalQty), BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID ConstructionId, IM.Segment2ValueID CompositionId,
	                    IM.Segment3ValueID ColorId,IM.Segment7ValueID KnittingTypeId,IM.Segment4ValueID GSMId, ISG.SubGroupName,
	                    ETV2.ValueName Brand,BAC.BookingQtyKG, 
	
	                    BA.BookingNo, YBM.YBookingNo,
	                    ContactID = FCM.BuyerID,
	                    ExecutionCompanyID = FCM.CompanyID,

	                    Construction = ISV1.SegmentValue,
	                    Composition = ISV2.SegmentValue,
	                    Color = ISV5.SegmentValue,
	                    GSM = '',
	                    Length = ISV3.SegmentValue,
	                    Width = ISV4.SegmentValue,
	                    KnittingType = '',
	                    DyeingType = '',
	                    ForBDSStyleNo = BA.StyleNo,

	                    T.TechnicalName, KMS.SubClassName MachineType,
	                    BAC.TestReportDays,BAC.FinishingDays,BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, KMS.TypeID As KTypeId,
                        BAC.RefSourceID,BAC.RefSourceNo,BAC.SourceConsumptionID,BAC.SourceItemMasterID,

	                    YarnTypeID = CASE WHEN BA.IsSample = 0 THEN A.A1ValueID ELSE SBCon.A1ValueID END, 
	                    YarnType = CASE WHEN BA.IsSample = 0 THEN ISVA1.SegmentValue ELSE ISVA11.SegmentValue END,
	                    Instruction = CASE WHEN BA.IsSample = 0 THEN A.Remarks ELSE SBCon.Remarks END,
	                    YarnProgram = CASE WHEN BA.IsSample = 0 THEN ETV.ValueName ELSE ETV1.ValueName END,
	                    YarnBrandID = CASE WHEN BA.IsSample = 0 THEN A.YarnBrandID ELSE SBCon.YarnBrandID END

	                    FROM FBookingAcknowledgeChild BAC
	                    LEFT JOIN FBookingAcknowledge BA ON BA.FBAckID=BAC.AcknowledgeID
                        INNER JOIN YarnBookingChild_New YBC ON YBC.BookingChildID=BAC.BookingChildID
						INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID=YBC.YBookingID AND YBM.BookingID = BAC.BookingID
                        INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID AND FBC.BookingId = YBM.BookingId AND ISNULL(FBC.BookingQty,0) > 0
	                    LEFT JOIN FreeConceptMaster FCM ON FCM.BookingChildID = BAC.BookingChildID AND FCM.ConsumptionID = BAC.ConsumptionID

	                    LEFT Join {DbNames.EPYSL}..BookingChild A on A.ConsumptionID = BAC.ConsumptionID AND A.ItemMasterID = BAC.ItemMasterID
	                    LEFT Join {DbNames.EPYSL}..SampleBookingConsumption SBCon On SBCon.ConsumptionID = BAC.ConsumptionID

	                    LEFT JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BAC.ItemMasterID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BAC.SubGroupID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BAC.A1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	                    LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BAC.TechnicalNameID
	                    LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BAC.MachineTypeId
	                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV2 ON ETV2.ValueID = BAC.BrandID
	                    LEFT Join {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = BA.SupplierID

	                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA1 On ISVA1.SegmentValueID = A.A1ValueID
	                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA11 On ISVA11.SegmentValueID = SBCon.A1ValueID
	                    Left Join {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = A.YarnBrandID
	                    Left Join {DbNames.EPYSL}..EntityTypeValue ETV1 ON ETV1.ValueID = SBCon.YarnBrandID

                        WHERE BAC.SubGroupID IN (11,12) AND BAC.IsDeleted=0 
	                    GROUP BY BAC.BookingChildID, BAC.AcknowledgeID, BAC.BookingID, BAC.ConsumptionChildID, BAC.ConsumptionID, BAC.BOMMasterID,
	                    BAC.ExportOrderID, BAC.ItemGroupID, ISG.SubGroupID, BAC.ItemMasterID, BAC.OrderBankPOID, BAC.SizeID, BAC.TechPackID,
	                    BAC.ConsumptionQty, BAC.BookingQty, BAC.BookingUnitID, BAC.RequisitionQty, BAC.ISourcing, BAC.Remarks, BAC.LengthYds, BAC.LengthInch,
	                    BAC.FUPartID, BAC.A1ValueID, BAC.LabDipNo, BAC.AddedBy, BAC.DateAdded, BAC.UpdatedBy, BAC.DateUpdated,
	                    BAC.BlockBookingQty, BAC.AdjustQty, BAC.AutoAgree, BAC.Price, BAC.SuggestedPrice, BAC.LabdipUpdateDate,
	                    BAC.IsCompleteReceive, BAC.IsCompleteDelivery, BAC.LastDCDate, BAC.ClosingRemarks, BAC.ToItemMasterID, BAC.TechnicalNameID,
	                    BAC.MachineTypeId, BAC.IsSubContact, BAC.TotalDays, BAC.DeliveryDate, BAC.BrandID, BAC.MachineGauge,BAC.MachineDia, IM.Segment1ValueID, IM.Segment2ValueID,
	                    IM.Segment3ValueID,IM.Segment7ValueID,IM.Segment4ValueID, ISG.SubGroupName,
	                    ISV.SegmentValue, ETV.ValueName, ETV1.ValueName, ETV2.ValueName, BA.BookingNo, YBM.YBookingNo, FCM.BuyerID,FCM.CompanyID,ISV1.SegmentValue,ISV2.SegmentValue,ISV5.SegmentValue,ISV3.SegmentValue,
	                    ISV4.SegmentValue,BAC.Remarks,BA.StyleNo,T.TechnicalName, KMS.SubClassName,BAC.TestReportDays,BAC.FinishingDays,
	                    BAC.DyeingDays,BAC.BatchPreparationDays,BAC.KnittingDays,BAC.MaterialDays,
	                    BAC.StructureDays, ISNULL(Supplier.MappingCompanyID,0), KMS.TypeID,
                        BAC.RefSourceID,BAC.RefSourceNo,BAC.SourceConsumptionID,BAC.SourceItemMasterID,
	                    BA.IsSample,A.A1ValueID,SBCon.A1ValueID,A.YarnBrandID,SBCon.YarnBrandID,
	                    ISVA1.SegmentValue,ISVA11.SegmentValue,A.Remarks,SBCon.Remarks,BAC.BookingQtyKG 
                    )
                    SELECT * FROM F WHERE YBookingNo = '{yBookingNo}';

                    ;With A As(
	                    select Min(FBP.FBAChildPlanningID) FBAChildPlanningID, FBP.BookingChildID, FBP.AcknowledgeID, FBP.CriteriaID
	                    From FBAChildPlanning FBP
	                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBP.AcknowledgeID
	                    Where FBA.BookingNo = '{bookingNo}'
	                    Group By BookingChildID, AcknowledgeID, CriteriaID
                    )
                    SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                    FROM A CP
                    INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                    GROUP BY cp.BookingChildID, CR.CriteriaName

                    --Technical Name
                    SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                    FROM FabricTechnicalName T
                    LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                    LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                    Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                    --M/c type
                    ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                    FROM KnittingMachine a
                    INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                    Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                    --Where c.TypeName != 'Flat Bed'
                    GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                    --CriteriaNames
                        ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                    FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                    GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                    --FBAChildPlannings
                    ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                    --FBookingAcknowledgeChildDetails (Fabric)
                    SELECT *
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID = A.BookingChildID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID=B.AcknowledgeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND B.SubGroupID IN (1) AND B.IsDeleted = 0;

                    --FBookingAcknowledgeChildDetails (Collar & Cuff)
                    SELECT *
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID = A.BookingChildID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID=B.AcknowledgeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND B.SubGroupID IN (11,12) AND B.IsDeleted = 0;

                    --Brand List
                    ;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
                    FROM KnittingMachine KM
                    LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
                    ORDER BY [text];

                     --YarnChild
					With DefaultBookingNo As(
										SELECT DISTINCT CASE 
						WHEN CHARINDEX('-Add', YBM.YBookingNo) > 0 
						THEN SUBSTRING(YBM.YBookingNo, 1, CHARINDEX('-Add', YBM.YBookingNo) - 1)
						ELSE YBM.YBookingNo
					END AS YBookingNo
					FROM YarnBookingChild_New YBC
					INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
					WHERE YBM.YBookingNo = '{yBookingNo}'
					),
					PrevAllowance AS(
					Select YBM.SubGroupID, YBC.ConsumptionID, YBC.YarnAllowance
					FROM YarnBookingChild_New YBC
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
					INNER JOIN DefaultBookingNo DBN ON DBN.YBookingNo=YBM.YBookingNo
					)
                    SELECT YBC.*, ExistingYarnAllowance = PA.YarnAllowance, TotalYarnAllowance =  PA.YarnAllowance + YBC.YarnAllowance,
					IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChild_New YBC
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
					INNER JOIN PrevAllowance PA ON PA.ConsumptionID = YBC.ConsumptionID
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBC.ItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE YBM.YBookingNo = '{yBookingNo}';

                     --YarnChildItem
                    SELECT YBCI.*, Spinner = CASE WHEN ISNULL(YBCI.SpinnerId,0) > 0 THEN C.ShortName ELSE '' END
					,IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChildItem_New YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
					LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID = YBCI.SpinnerId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE YBM.YBookingNo = '{yBookingNo}';

                    --YarnChildItemRevision
                    SELECT YBCI.*, Spinner = CASE WHEN ISNULL(YBCI.SpinnerId,0) > 0 THEN C.ShortName ELSE '' END
					,IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChildItem_New_Revision YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
					LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID = YBCI.SpinnerId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE YBM.YBookingNo = '{yBookingNo}';

                    -- Finish Fabric Utilization
                   ;with ISF As (
	                    Select ISF.BookingID, RollID, ISF.ItemMasterID, RollNo, Shade, ISF.BatchNo, TagNo, ISF.GSM, LengthInInch, WidthInInch, CCID1, CCID4, RollQtyInKG = RollQtyInKG, 
	                    RollQtyInKGPcs = RollQtyInKGPcs, AOPRoll, ReceiveStatus, ISF.WeightSheetNo, IsReject, IsExcess, IsQtyDecrease, IsOrderCancel, IsReturn, IsOrderCCBreakDown,
	                    LocationID, RackID
	                    From EPYSLTEX..ItemFinishStockRoll ISF
	                    Inner Join  {DbNames.EPYSL}..ItemMaster IM On IM.ItemMasterID = ISF.ItemMasterID
	                    Inner Join BulkBookingFinishFabricUtilization BB On BB.ItemMasterID  = IM.ItemMasterID
	                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = BB.YBChildID
	                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
	                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
	                    WHERE M.YBookingNo ='{yBookingNo}'
                    ),FFQTY As(
						Select 
						FFU.BBFFUtilizationID, 
						ExcessQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsExcess = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
					                                    When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsExcess = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
														
                        RejectQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                            When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                        BookingQtyDecreasedbyMerchantQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsQtyDecrease = 1 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                    When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 1 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                                        
						AfterProductionOrderCancelledbyMerchantQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 1 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                        When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 1 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End
                                       				             
                                       
					    FROM BulkBookingFinishFabricUtilization FFU
						Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = FFU.SubGroupID
						Inner Join ISF On ISF.ItemMasterID = FFU.ItemMasterID
	                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = FFU.YBChildID
	                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
	                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
						WHERE FBA.BookingNo ='{yBookingNo}'
						Group By FFU.BBFFUtilizationID, ISG.SubGroupName,ISF.IsExcess,ISF.IsQtyDecrease,ISF.IsOrderCancel,ISF.IsOrderCCBreakDown,ISF.IsReject

					), FF As(
                        SELECT  FFU.BBFFUtilizationID,	FFU.YBChildID,	FFU.ExportOrderID,	FFU.ItemMasterID,	FFU.GSM,	FFU.ColorID,	FFU.SubGroupID,	FFU.BuyerID, 
                        FFU.GSMID,	FFU.CompositionID,	FFU.Width,	FFU.BatchNo,	FFU.WeightSheetNo,
                        FFU.FinishFabricUtilizationQTYinkg,FFU.FinishFabricExcessQtyKg,FFU.FinishFabricRejectQtyKg,	
                        FFU.FinishFabricBookingQtyDecreasedbyMerchantQtyKg,FFU.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg,
                        ExportOrderNo = ISNULL(EOM.ExportOrderNo,''), ColorName = ISNULL(ISVC.SegmentValue,''), Buyer = ISNULL(CT.ShortName,''),
                        FabricConstruction = ISV2.SegmentValue + ' ' + ISV1.SegmentValue
                        --TotalStockQtyinkg  = (Case When FFU.SubGroupID = 1 Then Sum(ISF.RollQtyInKG) Else 0 End) + 
					                   --      (Case When FFU.SubGroupID = 1 Then 0 Else Sum(ISF.RollQtyInKGPcs) End)
                        ,UserName = IIF(ISNULL(FFU.UpdatedBy,0) = 0,EAd.EmployeeName,EUP.EmployeeName)

                        FROM BulkBookingFinishFabricUtilization FFU
                        INNER JOIN YarnBookingChild_New C ON C.YBChildID = FFU.YBChildID
                        INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                        INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                        Left Join {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = FFU.ExportOrderID
                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISVC On ISVC.SegmentValueID = FFU.ColorID
                        Left Join {DbNames.EPYSL}..Contacts CT On CT.ContactID = FFU.BuyerID And CT.ContactID >0
                        Inner Join {DbNames.EPYSL}..ItemMaster IM On IM.ItemMasterID = FFU.ItemMasterID
                        Inner Join ISF On ISF.ItemMasterID = FFU.ItemMasterID
                        Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = IM.SubGroupID
                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV2 On ISV2.SegmentValueID = IM.Segment2ValueID
					    Left Join {DbNames.EPYSL}..LoginUser AD On Ad.UserCode = FFU.AddedBy
					    Left Join {DbNames.EPYSL}..LoginUser UP On UP.UserCode = FFU.UpdatedBy
                        Left Join {DbNames.EPYSL}..Employee EAd On EAd.EmployeeCode = AD.EmployeeCode
					    Left Join {DbNames.EPYSL}..Employee EUP On EUP.EmployeeCode = UP.EmployeeCode
                        WHERE  M.YBookingNo ='{yBookingNo}'
                        Group By FFU.BBFFUtilizationID,	FFU.YBChildID,	FFU.ExportOrderID,	FFU.ItemMasterID,	FFU.GSM,	FFU.ColorID,	FFU.SubGroupID,	FFU.BuyerID, 
                        FFU.GSMID,	FFU.CompositionID,	FFU.Width,	FFU.BatchNo,	FFU.WeightSheetNo,
                        FFU.FinishFabricUtilizationQTYinkg,FFU.FinishFabricExcessQtyKg,FFU.FinishFabricRejectQtyKg,	
                        FFU.FinishFabricBookingQtyDecreasedbyMerchantQtyKg,FFU.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg,	
                        ExportOrderNo,	ISNULL(ISVC.SegmentValue,''),	ISNULL(CT.ShortName,''),	(ISV2.SegmentValue + ' ' + ISV1.SegmentValue),
                        IIF(ISNULL(FFU.UpdatedBy,0) = 0,EAd.EmployeeName,EUP.EmployeeName)
                      )

					Select A.*,
					ExcessQtyKg = SUM(ISNULL(FF.ExcessQtyKg,0)), RejectQtyKg = SUM(ISNULL(FF.RejectQtyKg,0)), BookingQtyDecreasedbyMerchantQtyKg = SUM(ISNULL(FF.BookingQtyDecreasedbyMerchantQtyKg,0)), AfterProductionOrderCancelledbyMerchantQtyKg =  SUM(ISNULL(FF.AfterProductionOrderCancelledbyMerchantQtyKg,0))

					From FF A
					Inner Join FFQTY FF On FF.BBFFUtilizationID = A.BBFFUtilizationID
					Group By 
					A.BBFFUtilizationID, YBChildID,	ExportOrderID,	ItemMasterID,	GSM	,ColorID,	SubGroupID,	BuyerID,	GSMID,	CompositionID,	Width,	BatchNo,	WeightSheetNo,	FinishFabricUtilizationQTYinkg,
					FinishFabricExcessQtyKg,	FinishFabricRejectQtyKg	,FinishFabricBookingQtyDecreasedbyMerchantQtyKg,	FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg,	ExportOrderNo,	ColorName,
					Buyer,	FabricConstruction,	UserName


                    -----FBookingAcknowledgeChildGFUtilization

                    Select GFU.* ,ExportOrderNo = ISNULL(EOM.ExportOrderNo,''), ColorName = ISNULL(ISVC.SegmentValue,''), Buyer = ISNULL(CT.ShortName,''),
                    FabricType = ISVFT.SegmentValue,Composition  = ISVCOM.SegmentValue
                    From FBookingAcknowledgeChildGFUtilization GFU
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = GFU.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
                    Left Join {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = GFU.ExportOrderID
                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVC On ISVC.SegmentValueID = GFU.ColorID
                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVFT On ISVFT.SegmentValueID = GFU.FabricTypeID
                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVCOM On ISVCOM.SegmentValueID = GFU.CompositionID
                    Left Join {DbNames.EPYSL}..Contacts CT On CT.ContactID = GFU.BuyerID And CT.ContactID >0
                    Where M.YBookingNo ='{yBookingNo}';

                    ---BulkBookingGreyYarnUtilization
                    Select 
                    ItemMasterID = YSS.ItemMasterId, 
                    SpinnerID = YSS.SpinnerId, Spinner = SPIN.ShortName, PhysicalLot = YSS.YarnLotNo,
                    YSS.PhysicalCount, Composition = ISV1.SegmentValue, NumaricCount = ISV6.SegmentValue,
                    YarnDetails = YSS.YarnCategory,
                    YSM.SampleStockQty, YSM.LiabilitiesStockQty, YSM.UnusableStockQty, YSM.LeftoverStockQty,
                    GYU.*
                    From BulkBookingGreyYarnUtilization GYU
                    INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = GYU.YBChildItemID
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
                    INNER JOIN YarnStockSet YSS ON YSS.YarnStockSetId = GYU.YarnStockSetID
                    INNER JOIN YarnStockMaster YSM ON YSM.YarnStockSetId = YSS.YarnStockSetId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YSS.ItemMasterId
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..Contacts SPIN On SPIN.ContactID = YSS.SpinnerId
                    Where M.YBookingNo = '{yBookingNo}';

                    ---BulkBookingDyedYarnUtilization
                    Select 
                    DYU.*,EOM.ExportOrderNo, Buyer = CC.ShortName
                    From BulkBookingDyedYarnUtilization DYU
                    INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = DYU.YBChildItemID
                    INNER JOIN YarnBookingChild_New C ON C.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = C.YBookingID
					INNER JOIN FBookingAcknowledge FBA ON FBA.BookingID = M.BookingID
					INNER JOIN {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = DYU.ExportOrderID
				    INNER JOIN {DbNames.EPYSL}..Contacts CC On CC.ContactID = DYU.BuyerID
                    Where  M.YBookingNo =  '{yBookingNo}';

                    ---FBookingAcknowledgeChildReplacement
                    SELECT U.*
                    FROM FBookingAcknowledgeChildReplacement U
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = YBC.YBookingID
                    --INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = U.BookingChildID
                    --INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
                    WHERE M.YBookingNo =  '{yBookingNo}';

                    ---FBookingAcknowledgeChildItemNetReqQTY
                    SELECT U.*
                    FROM FBookingAcknowledgeChildItemNetReqQTY U
					INNER JOIN YarnBookingChildItem_New YBCI ON YBCI.YBChildItemID = U.YBChildItemID
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN YarnBookingMaster_New M ON M.YBookingID = YBC.YBookingID
                    --INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID
                    --INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
                    WHERE M.YBookingNo =  '{yBookingNo}'
                    Group By U.ReplacementID,	U.YBChildItemID,	U.ReasonID,	
				    U.DepertmentID,	U.ReplacementQTY,	U.Remarks,	U.AddedBy,	
				    U.DateAdded,	U.UpdatedBy,	U.DateUpdated;

                  
                    --Shade book
                    SELECT ShadeCode [id], ShadeCode [text] FROM YarnShadeBook;
              
                    -- YarnBookingChildItemYarnSubBrand
                    Select ETV.ValueID id, ETV.ValueName [text]
                    From {DbNames.EPYSL}..EntityTypeValue ETV
                    Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
                    Where ET.EntityTypeName = 'Yarn Sub Brand'
                    Order By ETV.ValueName;

                    --Spinner
                    {CommonQueries.GetYarnSpinners()};

                     --FBookingAckChildFinishingProcess
                    SELECT FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                    FMC.FMProcessID ProcessID, FMC.ProcessName ProcessName, FMC.ProcessTypeID, ET.ValueName ProcessType,FMC.FMCMasterID, b.ProcessName MachineName
                    FROM FBookingAckChildFinishingProcess FP
                    INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                    Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                    Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                    Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != '' AND FAC.IsDeleted = 0
                    GROUP BY FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                    --FBookingAckChildFinishingProcessItem
                    SELECT FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName
                    FROM FBookingAckChildFinishingProcessItem FPI
                    INNER JOIN FBookingAckChildFinishingProcess FP ON FP.FPChildID = FPI.FPChildID
                    INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                    Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                    Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                    Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != '' AND FAC.IsDeleted = 0
                    GROUP BY FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                    --SpinnerList
                    {CommonQueries.GetYarnSpinners()}

                    --Gauge List
                    SELECT DISTINCT id = KM.GG, [text] = KM.GG
                    from KnittingMachine KM
                    WHERE KM.GG > 0
                    GROUP BY KM.GG
                    ORDER BY KM.GG;

                    --Dia List
                    SELECT id = KM.Dia, [text] = KM.Dia, additionalValue = KM.GG
                    from KnittingMachine KM
                    WHERE KM.GG > 0
                    GROUP BY KM.Dia, KM.GG
                    ORDER BY KM.GG

                    -- Shade book
                    {CommonQueries.GetYarnShadeBooks()}
                    --Item Segments
                      /*{CommonQueries.GetItemSegmentValuesBySegmentNamesWithSegmentName()}*/;
                    {CommonQueries.GetCertifications()};
                    --Fabric Components
                        /*{CommonQueries.GetEntityTypeValuesOnly(EntityTypeNameConstants.FABRIC_TYPE)};*/
                          {CommonQueries.GetFabricComponents(EntityTypeNameConstants.FABRIC_TYPE)};              
                    --Item Segments
                        {CommonQueries.GetSubPrograms()}; 

                    --Color Wise Size Collar
                        {CommonQueries.GetColorWiseSizeCollar(bookingNo)}; 

                    --Color Wise Size Cuff
                        {CommonQueries.GetColorWiseSizeCuff(bookingNo)}; 

                    --Color Wise All Size Collar
                        {CommonQueries.GetAllColorWiseSizeCollar(bookingNo)}; 

                    --Color Wise All Size Cuff
                        {CommonQueries.GetAllColorWiseSizeCuff(bookingNo)}; 

                    -- Machine Brand
                    SELECT KM.KnittingMachineID,KM.KnittingUnitID,KM.MachineNo,KM.MachineTypeID,KM.MachineSubClassID,
                    KM.GG,KM.Dia,KM.BrandID,KM.Capacity,KU.ShortName AS Contact,EV.ValueName AS Brand,
                    IsSubContact = 0
                    from KnittingMachine KM
                    Left Join KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
                    Left Join {DbNames.EPYSL}..EntityTypeValue EV ON EV.ValueID = KM.BrandID
                    Left Join {DbNames.EPYSL}..Contacts C ON C.ContactID = KU.ContactID
                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI ON CAI.ContactID = C.ContactID
                    Where CAI.InHouse = 1;

                    -- Machine Brand Collar/Cuff
                    SELECT KM.BrandID,EV.ValueName AS Brand
                    from KnittingMachine KM
                    Left Join KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
                    Left Join {DbNames.EPYSL}..EntityTypeValue EV ON EV.ValueID = KM.BrandID
                    Left Join {DbNames.EPYSL}..Contacts C ON C.ContactID = KU.ContactID
                    Left Join {DbNames.EPYSL}..ContactAdditionalInfo CAI ON CAI.ContactID = C.ContactID
                    Where CAI.InHouse = 1
                    GROUP BY KM.BrandID,EV.ValueName
                    ORDER BY EV.ValueName;

                    -----Additional Yarn booking reason
                    Select 
                    id = ETV.ValueID,[text] = ETV.ValueName
                    From {DbNames.EPYSL}..EntityTypeValue ETV
                    INNER JOIN {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
                    Where ET.EntityTypeName='Additional Yarn booking reason'
                    Group By ETV.ValueID,ETV.ValueName
                    order By ETV.ValueID;

                    ------ Department Name EFL
                    Select 
                    id = ED.DepertmentID, [text] = ED.DepertmentDisplayName
                    From {DbNames.EPYSL}..Employee E 
                    INNER JOIN {DbNames.EPYSL}..CompanyEntity CE ON CE.CompanyID = E.CompanyID
                    INNER JOIN {DbNames.EPYSL}..EmployeeDepartment ED ON ED.DepertmentID = E.DepertmentID
                    Where CE.CompanyID = 8
                    Group By ED.DepertmentID,ED.DepertmentDisplayName
                    Order By ED.DepertmentID;

                    --Fiber-SubProgram-Certifications Mapping Setup
                    Select * FROM {DbNames.EPYSL}..FabricComponentMappingSetup";


            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query, segmentNames);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();
                //List<FBAChildPlanning> childPlanningCriterias = records.Read<FBAChildPlanning>().ToList();
                List<FBAChildPlanning> childPlanningCriteriaNameWithIds = records.Read<FBAChildPlanning>().ToList();

                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();

                var fabricChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                var collarCuffChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.KnittingMachines = records.Read<KnittingMachine>().ToList();

                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItemsRevision = records.Read<YarnBookingChildItem>().ToList();
                if (isYarnRevisionMenu == true && yarnBookingChildItemsRevision.Count > 0)
                {
                    data.IsYarnRevision = true;
                    yarnBookingChildItems = yarnBookingChildItemsRevision;
                }
                List<BulkBookingFinishFabricUtilization> fFinishFabricUtilizationList = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                List<FBookingAcknowledgeChildGFUtilization> gGreyFabricUtilizationList = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();
                List<BulkBookingGreyYarnUtilization> gGreyYarnUtilizationList = records.Read<BulkBookingGreyYarnUtilization>().ToList();
                List<BulkBookingDyedYarnUtilization> gDyedYarnUtilizationList = records.Read<BulkBookingDyedYarnUtilization>().ToList();
                List<FBookingAcknowledgeChildReplacement> childReplacementList = records.Read<FBookingAcknowledgeChildReplacement>().ToList();
                List<FBookingAcknowledgeChildItemNetReqQTY> childItemNetReqQTYList = records.Read<FBookingAcknowledgeChildItemNetReqQTY>().ToList();


                yarnBookingChilds.ForEach(x =>
                {
                    x.ChildItems = yarnBookingChildItems.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.ChildItems.ForEach(CI =>
                    {
                        CI.GreyYarnUtilizationPopUpList = gGreyYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();
                        CI.DyedYarnUtilizationPopUpList = gDyedYarnUtilizationList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();
                        CI.AdditionalNetReqPOPUPList = childItemNetReqQTYList.Where(CItem => CItem.YBChildItemID == CI.YBChildItemID).ToList();

                    });
                    //x.ChildItemsRevision = yarnBookingChildItemsRevision.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.FinishFabricUtilizationPopUpList = fFinishFabricUtilizationList.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.GreyFabricUtilizationPopUpList = gGreyFabricUtilizationList.Where(c => c.YBChildID == x.YBChildID).ToList();
                    x.AdditionalReplacementPOPUPList = childReplacementList.Where(c => c.YBChildID == x.YBChildID).ToList();
                });

                if (isAddition)
                {
                    List<int> noNeedBookingChildIDs = new List<int>();
                    bookingChilds.ForEach(x =>
                    {
                        var obj1 = yarnBookingChilds.Find(y => y.BookingChildID == x.BookingChildID);
                        if (obj1 == null) noNeedBookingChildIDs.Add(x.BookingChildID);
                    });
                    noNeedBookingChildIDs.ForEach(bcId =>
                    {
                        bookingChilds.RemoveAll(y => y.BookingChildID == bcId);
                    });
                }

                List<Select2OptionModel> yarnShadeBooks = records.Read<Select2OptionModel>().ToList();
                List<Select2OptionModel> yarnSubBrandList = records.Read<Select2OptionModel>().ToList();
                List<Select2OptionModel> spinners = records.Read<Select2OptionModel>().ToList();

                List<FBookingAckChildFinishingProcess> finishingProcessChilds = records.Read<FBookingAckChildFinishingProcess>().ToList();
                List<FBookingAckChildFinishingProcessItem> finishingProcessChildItems = records.Read<FBookingAckChildFinishingProcessItem>().ToList();

                data.SpinnerList = records.Read<Select2OptionModel>().ToList();
                data.SpinnerList.Insert(0, new Select2OptionModel()
                {
                    id = 0.ToString(),
                    text = "N/A"
                });
                data.GaugeList = records.Read<Select2OptionModel>().ToList();
                data.DiaList = records.Read<Select2OptionModel>().ToList();
                data.YarnShadeBooks = records.Read<Select2OptionModel>();

                YarnBookingChild obj = new YarnBookingChild();
                bookingChilds.ForEach(bc =>
                {
                    obj = yarnBookingChilds.Find(x => x.BookingChildID == bc.BookingChildID);
                    if (isAddition && !isSavedAddition) bc.BookingQty = 0;
                    if (obj.IsNotNull())
                    {
                        if (isAllowYBookingNo || isSavedAddition)
                        {
                            if (obj.IsNotNull() && obj.IsForFabric)
                            {
                                bc.BookingQty = obj.BookingQty;
                                bc.IsForFabric = obj.IsForFabric;
                            }
                        }
                        if (isAddition)
                        {
                            if (obj.IsNotNull())
                            {
                                bc.BookingQty = obj.BookingQty;
                                bc.IsForFabric = obj.IsForFabric;
                                bc.ExistingYarnAllowance = obj.ExistingYarnAllowance;
                                bc.TotalYarnAllowance = obj.TotalYarnAllowance;
                            }
                        }
                        bc.YarnAllowance = obj.YarnAllowance;
                        bc.FinishFabricUtilizationQty = obj.FinishFabricUtilizationQty;
                        bc.GreyLeftOverQty = obj.GreyLeftOverQty;
                        bc.ReqFinishFabricQty = obj.ReqFinishFabricQty;
                        bc.CriteriaNames = criteriaNames;
                        bc.FBAChildPlannings = fbaChildPlannings;
                        bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                        bc.ChildDetails = fabricChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                        bc.YarnShadeBooks = yarnShadeBooks;
                        bc.YarnSubBrandList = yarnSubBrandList;
                        bc.Spinners = spinners;

                        yarnBookingChilds.Where(x => x.BookingChildID == bc.BookingChildID).ToList().ForEach(x =>
                        {
                            x.ChildItems.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItems.AddRange(x.ChildItems);

                            /*x.ChildItemsRevision.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItemsRevision.AddRange(x.ChildItemsRevision);
                            if(x.ChildItemsRevision.Count>0)
                            {
                                data.IsYarnRevision = true;
                            }
                            */
                            x.FinishFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });

                            bc.FinishFabricUtilizationPopUpList.AddRange(x.FinishFabricUtilizationPopUpList);

                            x.GreyFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });
                            bc.GreyFabricUtilizationPopUpList.AddRange(x.GreyFabricUtilizationPopUpList);

                            x.AdditionalReplacementPOPUPList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });
                            bc.AdditionalReplacementPOPUPList.AddRange(x.AdditionalReplacementPOPUPList);


                        });
                        //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));

                        #region Finishing Process
                        if (bc.SubGroupID == 1)
                        {
                            bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                            bc.PreFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                            bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                            bc.PostFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                        }
                        else
                        {
                            bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                            bc.PreFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                            bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                            bc.PostFinishingProcessChilds.ForEach(pc =>
                            {
                                pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                            });
                        }
                        #endregion
                    }
                });

                obj = new YarnBookingChild();
                bookingChildsCollarCuff.ForEach(bc =>
                {
                    obj = yarnBookingChilds.Find(x => x.BookingChildID == bc.BookingChildID);
                    if (isAddition && !isSavedAddition) bc.BookingQty = 0;

                    if (obj.IsNotNull())
                    {
                        if (isAllowYBookingNo || isSavedAddition)
                        {
                            //YarnBookingChild obj = yarnBookingChilds.Find(x => x.BookingChildID == bc.BookingChildID);
                            if (obj.IsNotNull() && obj.IsForFabric)
                            {
                                bc.BookingQty = obj.BookingQty;
                                if (isAddition)
                                {
                                    bc.BookingQtyKG = obj.QtyInKG;
                                    bc.ReqFinishFabricQty = obj.ReqFinishFabricQty;
                                }
                                bc.IsForFabric = obj.IsForFabric;
                            }
                        }
                        if (isAddition)
                        {
                            //YarnBookingChild obj = yarnBookingChilds.Find(x => x.BookingChildID == bc.BookingChildID);
                            if (obj.IsNotNull())
                            {
                                bc.BookingQty = obj.BookingQty;
                                bc.BookingQtyKG = obj.QtyInKG;
                                bc.ReqFinishFabricQty = obj.ReqFinishFabricQty;
                                bc.IsForFabric = obj.IsForFabric;
                                bc.ExistingYarnAllowance = obj.ExistingYarnAllowance;
                                bc.TotalYarnAllowance = obj.TotalYarnAllowance;
                            }
                        }

                        bc.YarnAllowance = obj.YarnAllowance;
                        bc.FinishFabricUtilizationQty = obj.FinishFabricUtilizationQty;
                        bc.GreyLeftOverQty = obj.GreyLeftOverQty;
                        bc.ReqFinishFabricQty = obj.ReqFinishFabricQty;
                        bc.CriteriaNames = criteriaNames;
                        bc.FBAChildPlannings = fbaChildPlannings;
                        bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                        bc.ChildDetails = collarCuffChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                        bc.YarnShadeBooks = yarnShadeBooks;
                        bc.YarnSubBrandList = yarnSubBrandList;
                        bc.Spinners = spinners;

                        yarnBookingChilds.Where(x => x.BookingChildID == bc.BookingChildID).ToList().ForEach(x =>
                        {
                            x.ChildItems.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItems.AddRange(x.ChildItems);
                            /*
                            x.ChildItemsRevision.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                                y.BookingID = bc.BookingID;
                                y.ConsumptionID = bc.ConsumptionID;
                            });
                            bc.ChildItemsRevision.AddRange(x.ChildItemsRevision);
                            if (x.ChildItemsRevision.Count > 0)
                            {
                                data.IsYarnRevision = true;
                            }
                            */

                            x.FinishFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });
                            bc.FinishFabricUtilizationPopUpList.AddRange(x.FinishFabricUtilizationPopUpList);

                            x.GreyFabricUtilizationPopUpList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });
                            bc.GreyFabricUtilizationPopUpList.AddRange(x.GreyFabricUtilizationPopUpList);

                            x.AdditionalReplacementPOPUPList.ForEach(y =>
                            {
                                y.BookingChildID = bc.BookingChildID;
                            });
                            bc.AdditionalReplacementPOPUPList.AddRange(x.AdditionalReplacementPOPUPList);


                        });

                        //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));

                        #region Finishing Process
                        bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                        bc.PreFinishingProcessChilds.ForEach(pc =>
                        {
                            pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                        });
                        bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                        bc.PostFinishingProcessChilds.ForEach(pc =>
                        {
                            pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                        });
                        #endregion
                    }
                });

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                data.Childs.AddRange(data.FBookingChild);
                data.Childs.AddRange(data.FBookingChildCollor);
                data.Childs.AddRange(data.FBookingChildCuff);

                //if (isAddition && !isAllowYBookingNo) data.YBookingNo = "";

                var _recvCertifications = await records.ReadAsync<Select2OptionModelExtended>();
                data.Certifications = _recvCertifications.Where(x => x.desc == ItemSegmentNameConstants.YARN_CERTIFICATIONS);
                data.FabricComponentsNew = await records.ReadAsync<Select2OptionModel>();
                var itemSegments = await records.ReadAsync<Select2OptionModel>();
                data.YarnSubProgramNews = itemSegments.Where(x => x.desc == ItemSegmentNameConstants.YARN_SUBPROGRAM_NEW);

                data.CollarSizeList = records.Read<Select2OptionModel>().ToList();
                data.CuffSizeList = records.Read<Select2OptionModel>().ToList();
                data.AllCollarSizeList = records.Read<FBookingAcknowledgeChild>().ToList();
                data.AllCuffSizeList = records.Read<FBookingAcknowledgeChild>().ToList();

                data.MachineBrandList = records.Read<KnittingMachine>().ToList();
                data.CollarCuffBrandList = records.Read<KnittingMachine>().ToList();



                data.AdditionalYarnBookingReason = records.Read<Select2OptionModel>().ToList();
                data.AdditionalEFLCompanyList = records.Read<Select2OptionModel>().ToList();
                data.FabricComponentMappingSetupList = records.Read<FabricComponentMappingSetup>().ToList();

                #region Grouping Collar Cuff
                //Collar
                List<FBookingAcknowledgeChild> tempChildsCollar = CommonFunction.DeepClone(data.Childs.Where(x => x.SubGroupID == 11).ToList());
                var disList = tempChildsCollar.Select(m => new { m.Construction, m.Composition, m.Color })
                        .Distinct()
                        .ToList();

                List<FBookingAcknowledgeChild> tempChilds = new List<FBookingAcknowledgeChild>();
                List<YarnBookingChildItem> tempYarnChildItems = new List<YarnBookingChildItem>();
                List<YarnBookingChildItem> finalYarnChildItems = new List<YarnBookingChildItem>();

                int consumptionID = 1;
                int bookingChildID = 1;
                int ycChildItemID = 1;
                int ycChildItemRevID = 1;
                int ycBBFFUtilizationID = 1;
                int ycGFUtilizationID = 1;

                disList.ForEach(c =>
                {
                    var tempChilds1 = tempChildsCollar.Where(x => x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList();
                    var firstChild = tempChilds1.First();

                    var fbac = new FBookingAcknowledgeChild()
                    {
                        ConsumptionID = consumptionID++,
                        BookingChildID = bookingChildID++,
                        BookingID = firstChild.BookingID,

                        SubGroupID = firstChild.SubGroupID,

                        ConstructionId = firstChild.ConstructionId,
                        Construction = firstChild.Construction,

                        CompositionId = firstChild.CompositionId,
                        Composition = firstChild.Composition,

                        MachineTypeId = firstChild.MachineTypeId,
                        MachineType = firstChild.MachineType,

                        TechnicalNameId = firstChild.TechnicalNameId,
                        TechnicalName = firstChild.TechnicalName,

                        BrandID = firstChild.BrandID,
                        Brand = firstChild.Brand,

                        YarnAllowance = firstChild.YarnAllowance,
                        ExistingYarnAllowance = firstChild.ExistingYarnAllowance,
                        TotalYarnAllowance = firstChild.TotalYarnAllowance,

                        ColorID = firstChild.ColorID,
                        Color = firstChild.Color,

                        //YarnTypeID = firstChild.YarnTypeID,
                        YarnType = firstChild.YarnType,

                        YarnProgram = firstChild.YarnProgram,
                        DyeingType = firstChild.DyeingType,
                        Instruction = firstChild.Instruction,
                        LabDipNo = firstChild.LabDipNo,
                        RefSourceNo = firstChild.RefSourceNo,
                        IsForFabric = firstChild.IsForFabric,
                        ActualBookingQty = tempChilds1.Sum(x => x.ActualBookingQty),
                        BookingQty = tempChilds1.Sum(x => x.BookingQty),
                        BookingQtyKG = tempChilds1.Sum(x => x.BookingQtyKG),
                        //FinishFabricUtilizationQty = tempChilds1firstChild.FinishFabricUtilizationQty,
                        FinishFabricUtilizationQty = firstChild.FinishFabricUtilizationQty,
                        ReqFinishFabricQty = tempChilds1.Sum(x => x.ReqFinishFabricQty),
                        TotalQty = tempChilds1.Sum(x => x.TotalQty),
                        GreyReqQty = tempChilds1.Sum(x => x.GreyReqQty),
                        GreyLeftOverQty = firstChild.GreyLeftOverQty,
                        GreyProdQty = tempChilds1.Sum(x => x.GreyProdQty),
                        //GreyProdQtyPCS = tempChilds1.Sum(x => x.GreyProdQtyPCS),

                        YarnShadeBooks = yarnShadeBooks,
                        YarnSubBrandList = yarnSubBrandList,
                        Spinners = spinners,
                        ChildItems = new List<YarnBookingChildItem>(),
                        ChildItemsRevision = new List<YarnBookingChildItemRevision>(),
                        FinishFabricUtilizationPopUpList = new List<BulkBookingFinishFabricUtilization>(),
                        GreyFabricUtilizationPopUpList = new List<FBookingAcknowledgeChildGFUtilization>(),
                        AdditionalReplacementPOPUPList = new List<FBookingAcknowledgeChildReplacement>(),
                        PreFinishingProcessChilds = firstChild.PreFinishingProcessChilds,
                        PostFinishingProcessChilds = firstChild.PostFinishingProcessChilds
                    };

                    #region Yarn Organizing

                    finalYarnChildItems = new List<YarnBookingChildItem>();

                    var mainChilds = CommonFunction.DeepClone(data.Childs.Where(x => x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList());
                    var yarnItems = mainChilds.First().ChildItems;
                    //var yarnItemsRevision = mainChilds.First().ChildItemsRevision;

                    yarnItems.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 11;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        fbac.ChildItems.Add(im);
                    });
                    /*
                    yarnItemsRevision.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemRevID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 11;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        fbac.ChildItemsRevision.Add(im);
                    });*/

                    #region Finish Fabric Utilization

                    List<BulkBookingFinishFabricUtilization> utilizations = new List<BulkBookingFinishFabricUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        utilizations.AddRange(x.FinishFabricUtilizationPopUpList);
                    });

                    var fFUtilization = utilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ItemMasterID,
                        g.GSM,
                        g.ColorID,
                        g.SubGroupID,
                        g.BuyerID,
                        g.GSMID,
                        g.CompositionID,
                        g.Width,
                        g.BatchNo,
                        g.WeightSheetNo,
                        g.ExportOrderNo,
                        g.ColorName,
                        g.Buyer,
                        g.FabricConstruction
                    }).Select(s => new BulkBookingFinishFabricUtilization()
                    {
                        BBFFUtilizationID = ycBBFFUtilizationID++,

                        BookingChildID = fbac.BookingChildID,
                        ConsumptionID = fbac.ConsumptionID,

                        ExportOrderID = s.Key.ExportOrderID,
                        ItemMasterID = s.Key.ItemMasterID,
                        GSM = s.Key.GSM,
                        ColorID = s.Key.ColorID,
                        SubGroupID = s.Key.SubGroupID,
                        BuyerID = s.Key.BuyerID,
                        GSMID = s.Key.GSMID,
                        CompositionID = s.Key.CompositionID,
                        Width = s.Key.Width,
                        BatchNo = s.Key.BatchNo,
                        WeightSheetNo = s.Key.WeightSheetNo,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ColorName = s.Key.ColorName,
                        Buyer = s.Key.Buyer,
                        FabricConstruction = s.Key.FabricConstruction,
                        FinishFabricUtilizationQTYinkg = s.Sum(n => n.FinishFabricUtilizationQTYinkg),
                        FinishFabricExcessQtyKg = s.Sum(n => n.FinishFabricExcessQtyKg),
                        FinishFabricRejectQtyKg = s.Sum(n => n.FinishFabricRejectQtyKg),
                        FinishFabricBookingQtyDecreasedbyMerchantQtyKg = s.Sum(n => n.FinishFabricBookingQtyDecreasedbyMerchantQtyKg),
                        FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg = s.Sum(n => n.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg),
                        TotalStockQtyinkg = s.Sum(n => n.TotalStockQtyinkg)
                    }).ToList();

                    fbac.FinishFabricUtilizationPopUpList = fFUtilization;

                    #endregion

                    #region Grey Fabric utilization
                    List<FBookingAcknowledgeChildGFUtilization> greyUtilizations = new List<FBookingAcknowledgeChildGFUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        greyUtilizations.AddRange(x.GreyFabricUtilizationPopUpList);
                    });

                    var gFUtilization = greyUtilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ExportOrderNo,
                        g.ItemMasterID,
                        g.BuyerID,
                        g.Buyer,
                        g.FabricTypeID,
                        g.FabricType,
                        g.ColorID,
                        g.ColorName,
                        g.CompositionID,
                        g.Composition,
                        g.GSMID,
                        g.GSM,
                        g.SubGroupID
                    }).Select(s => new FBookingAcknowledgeChildGFUtilization()
                    {
                        ExportOrderID = s.Key.ExportOrderID,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ItemMasterID = s.Key.ItemMasterID,
                        BuyerID = s.Key.BuyerID,
                        Buyer = s.Key.Buyer,
                        FabricTypeID = s.Key.FabricTypeID,
                        FabricType = s.Key.FabricType,
                        ColorID = s.Key.ColorID,
                        ColorName = s.Key.ColorName,
                        CompositionID = s.Key.CompositionID,
                        Composition = s.Key.Composition,
                        GSMID = s.Key.GSMID,
                        GSM = s.Key.GSM,
                        SubGroupID = s.Key.SubGroupID,
                        GreyFabricUtilizationQTYinkg = s.Sum(n => n.GreyFabricUtilizationQTYinkg)
                    }).ToList();

                    fbac.GreyFabricUtilizationPopUpList = gFUtilization;
                    #endregion

                    #region FBookingAcknowledgeChildReplacement
                    List<FBookingAcknowledgeChildReplacement> replacementList = new List<FBookingAcknowledgeChildReplacement>();
                    tempChilds1.ForEach(x =>
                    {
                        replacementList.AddRange(x.AdditionalReplacementPOPUPList);
                    });

                    fbac.AdditionalReplacementPOPUPList = replacementList;
                    #endregion

                    #endregion

                    tempChilds.Add(fbac);
                });

                //Cuff
                tempChildsCollar = CommonFunction.DeepClone(data.Childs.Where(x => x.SubGroupID == 12).ToList());
                disList = tempChildsCollar.Select(m => new { m.Construction, m.Composition, m.Color })
                        .Distinct()
                        .ToList();

                disList.ForEach(c =>
                {
                    var tempChilds1 = tempChildsCollar.Where(x => x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList();
                    var firstChild = tempChilds1.First();

                    var fbac = new FBookingAcknowledgeChild()
                    {
                        ConsumptionID = consumptionID++,
                        BookingChildID = bookingChildID++,
                        BookingID = firstChild.BookingID,

                        SubGroupID = firstChild.SubGroupID,

                        ConstructionId = firstChild.ConstructionId,
                        Construction = firstChild.Construction,

                        CompositionId = firstChild.CompositionId,
                        Composition = firstChild.Composition,

                        MachineTypeId = firstChild.MachineTypeId,
                        MachineType = firstChild.MachineType,

                        TechnicalNameId = firstChild.TechnicalNameId,
                        TechnicalName = firstChild.TechnicalName,

                        BrandID = firstChild.BrandID,
                        Brand = firstChild.Brand,

                        YarnAllowance = firstChild.YarnAllowance,
                        ExistingYarnAllowance = firstChild.ExistingYarnAllowance,
                        TotalYarnAllowance = firstChild.TotalYarnAllowance,

                        ColorID = firstChild.ColorID,
                        Color = firstChild.Color,

                        //YarnTypeID = firstChild.YarnTypeID,
                        YarnType = firstChild.YarnType,

                        YarnProgram = firstChild.YarnProgram,
                        DyeingType = firstChild.DyeingType,
                        Instruction = firstChild.Instruction,
                        LabDipNo = firstChild.LabDipNo,
                        RefSourceNo = firstChild.RefSourceNo,
                        IsForFabric = firstChild.IsForFabric,
                        ActualBookingQty = tempChilds1.Sum(x => x.ActualBookingQty),
                        BookingQty = tempChilds1.Sum(x => x.BookingQty),
                        BookingQtyKG = tempChilds1.Sum(x => x.BookingQtyKG),
                        FinishFabricUtilizationQty = firstChild.FinishFabricUtilizationQty,
                        ReqFinishFabricQty = tempChilds1.Sum(x => x.ReqFinishFabricQty),
                        TotalQty = tempChilds1.Sum(x => x.TotalQty),
                        GreyReqQty = tempChilds1.Sum(x => x.GreyReqQty),
                        GreyLeftOverQty = firstChild.GreyLeftOverQty,
                        GreyProdQty = tempChilds1.Sum(x => x.GreyProdQty),
                        //GreyProdQtyPCS = tempChilds1.Sum(x => x.GreyProdQtyPCS),

                        YarnShadeBooks = yarnShadeBooks,
                        YarnSubBrandList = yarnSubBrandList,
                        Spinners = spinners,
                        ChildItems = new List<YarnBookingChildItem>(),
                        ChildItemsRevision = new List<YarnBookingChildItemRevision>(),
                        AdditionalReplacementPOPUPList = new List<FBookingAcknowledgeChildReplacement>(),
                        PreFinishingProcessChilds = firstChild.PreFinishingProcessChilds,
                        PostFinishingProcessChilds = firstChild.PostFinishingProcessChilds
                    };

                    #region Yarn Organizing

                    finalYarnChildItems = new List<YarnBookingChildItem>();

                    var mainChilds = CommonFunction.DeepClone(data.Childs.Where(x => x.Construction == c.Construction && x.Composition == c.Composition && x.Color == c.Color).ToList());
                    var yarnItems = mainChilds.First().ChildItems;
                    //var yarnItemsRevision = mainChilds.First().ChildItemsRevision;

                    yarnItems.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 12;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        fbac.ChildItems.Add(im);
                    });
                    /*
                    yarnItemsRevision.ForEach(im =>
                    {
                        im.YBChildItemID = ycChildItemRevID++;
                        im.ConsumptionID = fbac.ConsumptionID;
                        im.BookingChildID = fbac.BookingChildID;
                        im.ItemMasterID = im.YItemMasterID;
                        im.SubGroupId = 12;
                        im.RequiredQty = this.GetQtyFromPer(fbac.BookingQty, im.Distribution, im.Allowance);
                        im.YarnBalanceQty = im.RequiredQty - im.GreyYarnUtilizationQty - im.DyedYarnUtilizationQty;
                        fbac.ChildItemsRevision.Add(im);
                    });*/

                    #region Finish Fabric Utilization 
                    List<BulkBookingFinishFabricUtilization> utilizations = new List<BulkBookingFinishFabricUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        utilizations.AddRange(x.FinishFabricUtilizationPopUpList);
                    });

                    var fFUtilization = utilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ItemMasterID,
                        g.GSM,
                        g.ColorID,
                        g.SubGroupID,
                        g.BuyerID,
                        g.GSMID,
                        g.CompositionID,
                        g.Width,
                        g.BatchNo,
                        g.WeightSheetNo,
                        g.ExportOrderNo,
                        g.ColorName,
                        g.Buyer,
                        g.FabricConstruction
                    }).Select(s => new BulkBookingFinishFabricUtilization()
                    {
                        BBFFUtilizationID = ycBBFFUtilizationID++,

                        BookingChildID = fbac.BookingChildID,
                        ConsumptionID = fbac.ConsumptionID,

                        ExportOrderID = s.Key.ExportOrderID,
                        ItemMasterID = s.Key.ItemMasterID,
                        GSM = s.Key.GSM,
                        ColorID = s.Key.ColorID,
                        SubGroupID = s.Key.SubGroupID,
                        BuyerID = s.Key.BuyerID,
                        GSMID = s.Key.GSMID,
                        CompositionID = s.Key.CompositionID,
                        Width = s.Key.Width,
                        BatchNo = s.Key.BatchNo,
                        WeightSheetNo = s.Key.WeightSheetNo,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ColorName = s.Key.ColorName,
                        Buyer = s.Key.Buyer,
                        FabricConstruction = s.Key.FabricConstruction,
                        FinishFabricUtilizationQTYinkg = s.Sum(n => n.FinishFabricUtilizationQTYinkg),
                        FinishFabricExcessQtyKg = s.Sum(n => n.FinishFabricExcessQtyKg),
                        FinishFabricRejectQtyKg = s.Sum(n => n.FinishFabricRejectQtyKg),
                        FinishFabricBookingQtyDecreasedbyMerchantQtyKg = s.Sum(n => n.FinishFabricBookingQtyDecreasedbyMerchantQtyKg),
                        FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg = s.Sum(n => n.FinishFabricAfterProductionOrderCancelledbyMerchantQtyKg),
                        TotalStockQtyinkg = s.Sum(n => n.TotalStockQtyinkg)
                    }).ToList();

                    fbac.FinishFabricUtilizationPopUpList = fFUtilization;

                    #endregion

                    #region Grey Fabric utilization
                    List<FBookingAcknowledgeChildGFUtilization> greyUtilizations = new List<FBookingAcknowledgeChildGFUtilization>();
                    tempChilds1.ForEach(x =>
                    {
                        greyUtilizations.AddRange(x.GreyFabricUtilizationPopUpList);
                    });

                    var gFUtilization = greyUtilizations.GroupBy(g => new
                    {
                        g.ExportOrderID,
                        g.ExportOrderNo,
                        g.ItemMasterID,
                        g.BuyerID,
                        g.Buyer,
                        g.FabricTypeID,
                        g.FabricType,
                        g.ColorID,
                        g.ColorName,
                        g.CompositionID,
                        g.Composition,
                        g.GSMID,
                        g.GSM,
                        g.SubGroupID
                    }).Select(s => new FBookingAcknowledgeChildGFUtilization()
                    {
                        ExportOrderID = s.Key.ExportOrderID,
                        ExportOrderNo = s.Key.ExportOrderNo,
                        ItemMasterID = s.Key.ItemMasterID,
                        BuyerID = s.Key.BuyerID,
                        Buyer = s.Key.Buyer,
                        FabricTypeID = s.Key.FabricTypeID,
                        FabricType = s.Key.FabricType,
                        ColorID = s.Key.ColorID,
                        ColorName = s.Key.ColorName,
                        CompositionID = s.Key.CompositionID,
                        Composition = s.Key.Composition,
                        GSMID = s.Key.GSMID,
                        GSM = s.Key.GSM,
                        SubGroupID = s.Key.SubGroupID,
                        GreyFabricUtilizationQTYinkg = s.Sum(n => n.GreyFabricUtilizationQTYinkg)
                    }).ToList();

                    fbac.GreyFabricUtilizationPopUpList = gFUtilization;
                    #endregion
                    #endregion
                    #region FBookingAcknowledgeChildReplacement
                    List<FBookingAcknowledgeChildReplacement> replacementList = new List<FBookingAcknowledgeChildReplacement>();
                    tempChilds1.ForEach(x =>
                    {
                        replacementList.AddRange(x.AdditionalReplacementPOPUPList);
                    });

                    fbac.AdditionalReplacementPOPUPList = replacementList;
                    #endregion

                    tempChilds.Add(fbac);
                });
                #endregion

                data.Childs = data.Childs.Where(x => x.SubGroupID == 1).ToList();
                data.Childs.AddRange(tempChilds);

                data.FBookingChild = data.Childs.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = data.Childs.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = data.Childs.Where(x => x.SubGroupID == 12).ToList();

                data.BookingQty = data.FBookingChild.Sum(x => Convert.ToInt32(x.BookingQty));




                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        private decimal GetQtyFromPer(decimal bookingQty, decimal distributionPer, decimal allowancePer)
        {
            decimal distributionQty = (bookingQty * distributionPer) / 100;
            decimal allowanceQty = (bookingQty * allowancePer) / 100;

            return distributionQty + allowanceQty;
        }
        public async Task<FBookingAcknowledge> GetDataByBookingNoRevise(string bookingNo, bool isSample)
        {
            string joinName = isSample ? "BAC" : "BA";
            string joinName2 = isSample ? "SBC" : "M";

            var query =
                $@"-- Master Data
                    WITH M AS (
                        SELECT FBA.FBAckID,	FBA.BookingID,FBA.BookingNo,FBA.BookingDate,FBA.SLNo,FBA.StyleMasterID,FBA.StyleNo,FBA.SubGroupID,
	                    FBA.BuyerID,FBA.BuyerTeamID,FBA.SupplierID,FBA.ExportOrderID,BM.CompanyID,FBA.ExecutionCompanyID,FBA.WithoutOB,
	                    OrderQty = CASE WHEN FBA.WithoutOB=1 THEN SBM.OrderQty ELSE BM.RePurchaseQty END,
	                    Remarks = CASE WHEN FBA.WithoutOB=1 THEN SBM.Remarks ELSE BM.Remarks END,
	                    SeasonID = CASE WHEN FBA.WithoutOB=1 THEN SBM.SeasonID ELSE 0 END,
	                    BookingBy = CASE WHEN FBA.WithoutOB=1 THEN SBM.AddedBy ELSE BM.AddedBy END,
                        YBM.YBookingNo

                        FROM FBookingAcknowledge FBA
	                    LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = FBA.BookingID
	                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = FBA.BookingID
                        LEFT JOIN YarnBookingMaster_New YBM ON YBM.BookingID = FBA.BookingID AND YBM.SubGroupID = FBA.SubGroupID
                        WHERE FBA.BookingNo = '{bookingNo}'
                    ),
                FBA1 AS
                (
                    SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	                b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SLNo='',SM.StyleMasterID,
	                b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(BC.BookingQty)
                    FROM FabricBookingAcknowledge A
				    JOIN {DbNames.EPYSL}..BookingMaster b on b.BookingID = a.BookingID
					Inner Join {DbNames.EPYSL}..BookingChild BC On BC.BookingID = A.BookingID
				    JOIN {DbNames.EPYSL}..ExportOrderMaster EO ON EO.ExportOrderID = B.ExportOrderID
				    JOIN {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = EO.StyleMasterID
                    WHERE b.BookingNo in ('{bookingNo}')
					Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	                b.BookingNo,b.BookingDate,b.Remarks,SM.StyleNo,b.ExportOrderID,SM.StyleMasterID,
	                b.BuyerID,b.BuyerTeamID,b.CompanyID,b.SupplierID,SM.SeasonID,a.WithoutOB,b.InHouseDate
                ),
				FBA2 AS
                (
                    SELECT a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,PreRevisionNo=a.PreProcessRevNo,RevisionNo=a.RevisionNo,
	                b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	                b.BuyerID,b.BuyerTeamID,CompanyID=b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate,BookingQty= SUM(c.RequiredQty)
                    FROM FabricBookingAcknowledge A
				    Inner Join {DbNames.EPYSL}..SampleBookingMaster b on b.BookingID = a.BookingID
					Inner Join {DbNames.EPYSL}..SampleBookingConsumptionChild c ON c.BookingID = a.BookingID
                    WHERE b.BookingNo in ('{bookingNo}')
					Group By a.BookingID,a.BOMMasterID,a.ItemGroupID,a.SubGroupID,a.Status,a.PreProcessRevNo,a.RevisionNo,
	                b.BookingNo,b.BookingDate,b.Remarks,b.StyleNo,b.ExportOrderID,b.SLNo,b.StyleMasterID,
	                b.BuyerID,b.BuyerTeamID,b.ExecutionCompanyID,b.SupplierID,b.SeasonID,a.WithoutOB,b.InHouseDate
                ),
				FBC AS
                (
	                SELECT *FROM FBA1
	                UNION
	                SELECT *FROM FBA2
                ),
                    IHD AS
                    (
	                    SELECT M.BookingID, RequiredFabricDeliveryDate = CASE WHEN M.WithoutOB = 1 THEN MAX(FBC1.InHouseDate) ELSE MAX(FBC1.InHouseDate) END,FBC1.BookingQty
	                    FROM M
	                    --LEFT JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = M.BookingID
	                    --LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = M.BookingID
						LEFT JOIN FBC FBC1 ON FBC1.BookingID = M.BookingID
	                    GROUP BY M.BookingID, M.WithoutOB,FBC1.BookingQty
                    )
                    SELECT M.FBAckID, M.BookingID,M.BookingNo,M.BookingDate,M.SLNo,M.StyleMasterID,M.StyleNo,IHD.BookingQty BookingQty,M.BuyerID,M.BuyerTeamID,
                    M.SupplierID,M.ExportOrderID,M.ExecutionCompanyID, CTO.ShortName BuyerName, CCT.TeamName BuyerTeamName,C.CompanyName,M.SubGroupID,M.Remarks,
                    SupplierName = CASE WHEN M.SupplierID > 0 THEN Supplier.ShortName ELSE ''  END, CTS.SeasonName, M.BookingBy, ISNULL(Supplier.MappingCompanyID,0) TextileCompanyID, ISNULL(Supplier.MappingCompanyID,0) CompanyID,
                    SM.StyleNo, M.YBookingNo, IHD.RequiredFabricDeliveryDate
                    FROM M
                    LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.ExportOrderID = M.ExportOrderID
                    LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = M.BuyerID
                    LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = M.BuyerTeamID
                    LEFT JOIN {DbNames.EPYSL}..CompanyEntity C ON C.CompanyID = M.CompanyID
                    LEFT JOIN {DbNames.EPYSL}..Contacts Supplier On Supplier.ContactID = M.SupplierID
		            LEFT Join {DbNames.EPYSL}..OrderBankMaster OBM On OBM.StyleMasterID = EOM.StyleMasterID
		            LEFT Join {DbNames.EPYSL}..StyleMaster SM ON SM.StyleMasterID = EOM.StyleMasterID
		            LEFT Join {DbNames.EPYSL}..ContactSeason CTS On CTS.SeasonID = SM.SeasonID
                    LEFT JOIN IHD ON IHD.BookingID = M.BookingID;

                    -- Booking Acknowledge Child (Fabric)
                     ;WITH AllChilds AS
                     (
	                    SELECT BM.BookingID, FBC.BookingChildID, BC.ConsumptionID, BC.SubGroupID, FBC.AcknowledgeID, 
	                    BC.BookingUnitID, BC.ItemGroupID, BC.A1ValueID, BC.YarnBrandID, BC.FUPartID, BC.ItemMasterID,
	                    FBC.MachineTypeId, FBC.TechnicalNameID, BC.ConsumptionQty, BC.BookingQty, BC.LengthYds, BC.LengthInch,
	                    BC.Remarks, BC.LabDipNo, FBC.MachineGauge, FBC.MachineDia
	                    FROM {DbNames.EPYSL}..BookingChild BC
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = BC.BookingID
	                    LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = BC.BookingChildID
	                    WHERE BM.BookingNo = '{bookingNo}' AND BC.SubGroupID = 1

	                    UNION

	                    SELECT BM.BookingID, FBC.BookingChildID, BC.ConsumptionID, BC.SubGroupID, FBC.AcknowledgeID, 
	                    FBC.BookingUnitID, BC.ItemGroupID, BC.A1ValueID, BC.YarnBrandID, BC.FUPartID, FBC.ItemMasterID,
	                    FBC.MachineTypeId, FBC.TechnicalNameID, BC.ConsumptionQty, FBC.BookingQty, BC.LengthYds, BC.LengthInch,
	                    BC.Remarks, BC.LabDipNo, FBC.MachineGauge, FBC.MachineDia
	                    FROM {DbNames.EPYSL}..SampleBookingConsumption BC
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster BM ON BM.BookingID = BC.BookingID
	                    LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.ConsumptionID = BC.ConsumptionID AND FBC.BookingID = BC.BookingID AND FBC.SubGroupID = BC.SubGroupID
	                    WHERE BM.BookingNo = '{bookingNo}' AND BC.SubGroupID = 1
                     ),
                    FBAC AS
                    (
	                    Select SBC.BookingID, SBC.BookingChildID, SBC.ItemGroupID, ISG.SubGroupID, SBC.ItemMasterID, U.RelativeFactor, SBC.MachineGauge, SBC.MachineDia,
	                    ISG.SubGroupName, ConsumptionQty = Ceiling(Sum(SBC.ConsumptionQty)),  SBC.ConsumptionID, SBC.MachineTypeId,SBC.TechnicalNameID,
	                    ColorID = CASE WHEN ISG.SubGroupID = 1 THEN IM.Segment3ValueID ELSE IM.Segment5ValueID END,
	                    BookingUnitID = (CASE WHEN ISG.SubGroupID = 1 THEN SBC.BookingUnitID ELSE 28 END),
	                    BookingUOM = CASE WHEN ISG.SubGroupID = 1 THEN  U.DisplayUnitDesc ELSE 'KG' END, 
	                    BookingQty = Ceiling(Sum(SBC.BookingQty)),
	                    RequisitionQty = Ceiling(Sum(SBC.BookingQty)), SBC.Remarks,
	                    SBC.LengthYds, SBC.LengthInch, SBC.FUPartID, YarnTypeID = SBC.A1ValueID, YarnType = ISVA1.SegmentValue, 
	                    SBC.YarnBrandID, YarnBrand = ETV.ValueName, FUP.PartName, ForTechPack = Convert(Varchar(50),''), 
	                    ISourcing = Convert(bit,1), ISourcingName = 'In-House', ContactName = '',ContactID = 0,
	                    LabDipNo = IsNull(SBC.LabDipNo,''), BlockBookingQty = Convert(decimal,0), AdjustQty = Convert(decimal,0), 
	                    AutoAgree = Convert(bit,0),Price = convert(decimal,0), SuggestedPrice = convert(decimal,0), 
	                    IsCompleteReceive = Convert(bit,'0'), IsCompleteDelivery = Convert(bit,'0'), M.BuyerID, M.BuyerTeamID, M.ExportOrderID,
                        ConstructionID = ISV1.SegmentValueID,
	                    Construction = ISV1.SegmentValue, 
	                    Composition = ISV2.SegmentValue,
	                    Color = CASE WHEN ISG.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
	                    Gsm = CASE WHEN ISG.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END, 
	                    DyeingType = CASE WHEN ISG.SubGroupID = 1 THEN ISV6.SegmentValue ELSE '' END, 
	                    KnittingType = CASE WHEN ISG.SubGroupID = 1 THEN ISV7.SegmentValue ELSE '' END,
	                    Length = CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV3.SegmentValue) END,
	                    Width = CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV4.SegmentValue) END,
	                    FabricWidth = CASE WHEN ISG.SubGroupID = 1 THEN ISV5.SegmentValue ELSE '' END

	                    From AllChilds SBC 
	                    INNER Join FBookingAcknowledge M On M.BookingID = SBC.BookingID
	                    Left Join {DbNames.EPYSL}..Unit U On U.UnitID = SBC.BookingUnitID
	                    INNER Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBC.ItemGroupID
	                    INNER Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = M.SubGroupID
	                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA1 On ISVA1.SegmentValueID = SBC.A1ValueID
	                    Left Join {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
	                    Left Join {DbNames.EPYSL}..FabricUsedPart FUP On FUP.FUPartID = SBC.FUPartID 
	                    Left Join {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBC.ItemMasterID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	                    Where M.BookingNo = '{bookingNo}'                               
	                    Group By SBC.BookingID, SBC.BookingChildID, SBC.ItemGroupID, SBC.ItemMasterID, ISG.SubGroupName,
	                    SBC.BookingUnitID,U.DisplayUnitDesc,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.A1ValueID,SBC.YarnBrandID,
	                    IsNull(SBC.LabDipNo,''), SBC.Remarks,ISVA1.SegmentValue,ETV.ValueName,FUP.PartName, M.BuyerID, 
	                    M.BuyerTeamID, M.ExportOrderID, U.RelativeFactor, SBC.MachineGauge, SBC.MachineDia, SBC.ConsumptionID, SBC.MachineTypeId,SBC.TechnicalNameID, ISG.SubGroupID,
	                    CASE WHEN ISG.SubGroupID = 1 THEN IM.Segment3ValueID ELSE IM.Segment5ValueID END,ISV1.SegmentValueID,
	                    ISV1.SegmentValue,ISV2.SegmentValue,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV6.SegmentValue ELSE '' END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV7.SegmentValue ELSE '' END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV3.SegmentValue) END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV4.SegmentValue) END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV5.SegmentValue ELSE '' END
                    ),
                    RSN AS
                    (
	                    SELECT TOP(1) RS.BookingID, RS.ConsumptionID, RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, SourceItemMasterID = RS.ItemMasterID
	                    FROM {DbNames.EPYSL}..BookingChildReferenceSource RS
	                    INNER JOIN FBAC ON FBAC.BookingID = RS.BookingID AND FBAC.ConsumptionID = RS.ConsumptionID
                    ),
                    FinalList AS
                    (
	                    SELECT FBAC.BookingID, FBAC.BookingChildID, FBAC.ItemGroupID, FBAC.SubGroupID, FBAC.ItemMasterID, FBAC.SubGroupName, FBAC.MachineGauge, FBAC.MachineDia,
	                    BookingUnitID,LengthYds,LengthInch,FUPartID,YarnBrandID,
	                    LabDipNo,Remarks,YarnType,YarnBrand,PartName, FBAC.BuyerID, FBAC.
	                    BuyerTeamID, FBAC.ExportOrderID, FBAC.ConsumptionID, FBAC.MachineTypeId,FBAC.TechnicalNameID, FBAC.ConsumptionQty, FBAC.BookingUOM, FBAC.RequisitionQty,
	                    YarnTypeID, FBAC.ForTechPack, FBAC.ISourcing, FBAC.ISourcingName, FBAC.ContactName, FBAC.ContactID, FBAC.BlockBookingQty, FBAC.AdjustQty,
	                    AutoAgree, FBAC.Price, FBAC.SuggestedPrice, FBAC.IsCompleteReceive, FBAC.IsCompleteDelivery,
	                    ColorID, FBAC.Construction, FBAC.ConstructionID, FBAC.Composition, FBAC.Color, FBAC.Gsm, FBAC.DyeingType, FBAC.KnittingType, FBAC.Length, FBAC.Width,
	                    BookingQty = CASE WHEN FBAC.SubGroupID = 1 THEN Sum(FBAC.BookingQty) ELSE (0.045 * ((Convert(decimal(18,3), ISNULL(FBAC.Length,0)) * Convert(decimal(18,3), ISNULL(FBAC.Width,0)))/420)) * (Sum(FBAC.BookingQty) * FBAC.RelativeFactor) END
	                    ,RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, RS.SourceItemMasterID, FBAC.FabricWidth, T.TechnicalName, KMS.SubClassName MachineType
                        FROM FBAC
                        LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = FBAC.MachineTypeId
                        LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBAC.TechnicalNameID
                        LEFT JOIN RSN RS ON RS.BookingID = FBAC.BookingID AND RS.ConsumptionID = FBAC.ConsumptionID
	                    Group By FBAC.BookingID, FBAC.BookingChildID, FBAC.ItemGroupID, FBAC.SubGroupID, FBAC.ItemMasterID, FBAC.SubGroupName, FBAC.MachineGauge, FBAC.MachineDia,
	                    BookingUnitID,LengthYds,LengthInch,FUPartID,YarnBrandID, LabDipNo,Remarks,YarnType,YarnBrand,PartName, FBAC.BuyerID, FBAC.
	                    BuyerTeamID, FBAC.ExportOrderID, FBAC.ConsumptionID, FBAC.MachineTypeId,FBAC.TechnicalNameID, FBAC.ConsumptionQty, FBAC.BookingUOM, FBAC.RequisitionQty,
	                    YarnTypeID, FBAC.ForTechPack, FBAC.ISourcing, FBAC.ISourcingName, FBAC.ContactName, FBAC.ContactID, FBAC.BlockBookingQty, FBAC.AdjustQty,
	                    AutoAgree, FBAC.Price, FBAC.SuggestedPrice, FBAC.IsCompleteReceive, FBAC.IsCompleteDelivery,
	                    ColorID, FBAC.Construction, FBAC.ConstructionID, FBAC.Composition, FBAC.Color, FBAC.Gsm, FBAC.DyeingType, FBAC.KnittingType, FBAC.Length, FBAC.Width, FBAC.RelativeFactor
                        ,RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, RS.SourceItemMasterID, FBAC.FabricWidth, T.TechnicalName, KMS.SubClassName
                    )
                    SELECT * FROM FinalList;

                    -- Booking Acknowledge Child (Collar & Cuff)
                     ;WITH AllChilds AS
                     (
	                    SELECT BM.BookingID, FBC.BookingChildID, BC.ConsumptionID, BC.SubGroupID, FBC.AcknowledgeID, 
	                    BC.BookingUnitID, BC.ItemGroupID, BC.A1ValueID, BC.YarnBrandID, BC.FUPartID, BC.ItemMasterID,
	                    FBC.MachineTypeId, FBC.TechnicalNameID, BC.ConsumptionQty, BC.BookingQty, BC.LengthYds, BC.LengthInch,
	                    BC.Remarks, BC.LabDipNo
	                    FROM {DbNames.EPYSL}..BookingChild BC
	                    INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = BC.BookingID
	                    LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = BC.BookingChildID
	                    WHERE BM.BookingNo = '{bookingNo}' AND BC.SubGroupID IN (11,12)

	                    UNION

	                    SELECT BM.BookingID, FBC.BookingChildID, BC.ConsumptionID, BC.SubGroupID, FBC.AcknowledgeID, 
	                    FBC.BookingUnitID, BC.ItemGroupID, BC.A1ValueID, BC.YarnBrandID, BC.FUPartID, FBC.ItemMasterID,
	                    FBC.MachineTypeId, FBC.TechnicalNameID, BC.ConsumptionQty, FBC.BookingQty, BC.LengthYds, BC.LengthInch,
	                    BC.Remarks, BC.LabDipNo

	                    FROM {DbNames.EPYSL}..SampleBookingConsumption BC
	                    INNER JOIN {DbNames.EPYSL}..SampleBookingMaster BM ON BM.BookingID = BC.BookingID
	                    LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.ConsumptionID = BC.ConsumptionID AND FBC.BookingID = BC.BookingID AND FBC.SubGroupID = BC.SubGroupID
	                    WHERE BM.BookingNo = '{bookingNo}' AND BC.SubGroupID IN (11,12)
                     ),
                    FBAC AS
                    (
	                    Select SBC.BookingID, SBC.BookingChildID, SBC.ItemGroupID, ISG.SubGroupID, SBC.ItemMasterID, U.RelativeFactor,
	                    ISG.SubGroupName, ConsumptionQty = Ceiling(Sum(SBC.ConsumptionQty)),  SBC.ConsumptionID, SBC.MachineTypeId,SBC.TechnicalNameID,
	                    ColorID = CASE WHEN ISG.SubGroupID = 1 THEN IM.Segment3ValueID ELSE IM.Segment5ValueID END,
	                    BookingUnitID = (CASE WHEN ISG.SubGroupID = 1 THEN SBC.BookingUnitID ELSE 28 END),
	                    BookingUOM = CASE WHEN ISG.SubGroupID = 1 THEN  U.DisplayUnitDesc ELSE 'KG' END, 
	                    BookingQty = Ceiling(Sum(SBC.BookingQty)),
	                    RequisitionQty = Ceiling(Sum(SBC.BookingQty)), SBC.Remarks,
	                    SBC.LengthYds, SBC.LengthInch, SBC.FUPartID, YarnTypeID = SBC.A1ValueID, YarnType = ISVA1.SegmentValue, 
	                    SBC.YarnBrandID, YarnBrand = ETV.ValueName, FUP.PartName, ForTechPack = Convert(Varchar(50),''), 
	                    ISourcing = Convert(bit,1), ISourcingName = 'In-House', ContactName = '',ContactID = 0,
	                    LabDipNo = IsNull(SBC.LabDipNo,''), BlockBookingQty = Convert(decimal,0), AdjustQty = Convert(decimal,0), 
	                    AutoAgree = Convert(bit,0),Price = convert(decimal,0), SuggestedPrice = convert(decimal,0), 
	                    IsCompleteReceive = Convert(bit,'0'), IsCompleteDelivery = Convert(bit,'0'), M.BuyerID, M.BuyerTeamID, M.ExportOrderID,
                        ConstructionID = ISV1.SegmentValueID,
	                    Construction = ISV1.SegmentValue, 
	                    Composition = ISV2.SegmentValue,
	                    Color = CASE WHEN ISG.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
	                    Gsm = CASE WHEN ISG.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END, 
	                    DyeingType = CASE WHEN ISG.SubGroupID = 1 THEN ISV6.SegmentValue ELSE '' END, 
	                    KnittingType = CASE WHEN ISG.SubGroupID = 1 THEN ISV7.SegmentValue ELSE '' END,
	                    Length = CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV3.SegmentValue) END,
	                    Width = CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV4.SegmentValue) END,
	                    FabricWidth = CASE WHEN ISG.SubGroupID = 1 THEN ISV5.SegmentValue ELSE '' END

	                    From AllChilds SBC 
	                    INNER Join FBookingAcknowledge M On M.FBAckID = SBC.AcknowledgeID
	                    Left Join {DbNames.EPYSL}..Unit U On U.UnitID = SBC.BookingUnitID
	                    INNER Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBC.ItemGroupID
	                    INNER Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = {joinName2}.SubGroupID
	                    Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA1 On ISVA1.SegmentValueID = SBC.A1ValueID
	                    Left Join {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = SBC.YarnBrandID
	                    Left Join {DbNames.EPYSL}..FabricUsedPart FUP On FUP.FUPartID = SBC.FUPartID 
	                    Left Join {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBC.ItemMasterID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	                    Where M.BookingNo = '{bookingNo}'                               
	                    Group By SBC.BookingID, SBC.BookingChildID, SBC.ItemGroupID, SBC.ItemMasterID, ISG.SubGroupName,
	                    SBC.BookingUnitID,U.DisplayUnitDesc,SBC.LengthYds,SBC.LengthInch,SBC.FUPartID,SBC.A1ValueID,SBC.YarnBrandID,
	                    IsNull(SBC.LabDipNo,''), SBC.Remarks,ISVA1.SegmentValue,ETV.ValueName,FUP.PartName, M.BuyerID, 
	                    M.BuyerTeamID, M.ExportOrderID, U.RelativeFactor, SBC.ConsumptionID, SBC.MachineTypeId,SBC.TechnicalNameID, ISG.SubGroupID,
	                    CASE WHEN ISG.SubGroupID = 1 THEN IM.Segment3ValueID ELSE IM.Segment5ValueID END,ISV1.SegmentValueID,
	                    ISV1.SegmentValue,ISV2.SegmentValue,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV6.SegmentValue ELSE '' END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV7.SegmentValue ELSE '' END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV3.SegmentValue) END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV4.SegmentValue) END,
	                    CASE WHEN ISG.SubGroupID = 1 THEN ISV5.SegmentValue ELSE '' END
                    ),
                    RSN AS
                    (
	                    SELECT TOP(1) RS.BookingID, RS.ConsumptionID, RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, SourceItemMasterID = RS.ItemMasterID
	                    FROM {DbNames.EPYSL}..BookingChildReferenceSource RS
	                    INNER JOIN FBAC ON FBAC.BookingID = RS.BookingID AND FBAC.ConsumptionID = RS.ConsumptionID
                    ),
                    FinalList AS
                    (
	                    SELECT FBAC.BookingID, FBAC.BookingChildID, FBAC.ItemGroupID, FBAC.SubGroupID, FBAC.ItemMasterID, FBAC.SubGroupName,
	                    BookingUnitID,LengthYds,LengthInch,FUPartID,YarnBrandID,
	                    LabDipNo,Remarks,YarnType,YarnBrand,PartName, FBAC.BuyerID, FBAC.
	                    BuyerTeamID, FBAC.ExportOrderID, FBAC.ConsumptionID, FBAC.MachineTypeId,FBAC.TechnicalNameID, FBAC.ConsumptionQty, FBAC.BookingUOM, FBAC.RequisitionQty,
	                    YarnTypeID, FBAC.ForTechPack, FBAC.ISourcing, FBAC.ISourcingName, FBAC.ContactName, FBAC.ContactID, FBAC.BlockBookingQty, FBAC.AdjustQty,
	                    AutoAgree, FBAC.Price, FBAC.SuggestedPrice, FBAC.IsCompleteReceive, FBAC.IsCompleteDelivery,
	                    ColorID, FBAC.Construction, FBAC.ConstructionID, FBAC.Composition, FBAC.Color, FBAC.Gsm, FBAC.DyeingType, FBAC.KnittingType, FBAC.Length, FBAC.Width,
	                    BookingQty = CASE WHEN FBAC.SubGroupID = 1 THEN Sum(FBAC.BookingQty) ELSE (0.045 * ((Convert(decimal(18,3), ISNULL(FBAC.Length,0)) * Convert(decimal(18,3), ISNULL(FBAC.Width,0)))/420)) * (Sum(FBAC.BookingQty) * FBAC.RelativeFactor) END
	                    ,RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, RS.SourceItemMasterID, FBAC.FabricWidth, T.TechnicalName, KMS.SubClassName MachineType
                        FROM FBAC
                        LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = FBAC.MachineTypeId
                        LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBAC.TechnicalNameID
                        LEFT JOIN RSN RS ON RS.BookingID = FBAC.BookingID AND RS.ConsumptionID = FBAC.ConsumptionID
	                    Group By FBAC.BookingID, FBAC.BookingChildID, FBAC.ItemGroupID, FBAC.SubGroupID, FBAC.ItemMasterID, FBAC.SubGroupName,
	                    BookingUnitID,LengthYds,LengthInch,FUPartID,YarnBrandID,
	                    LabDipNo,Remarks,YarnType,YarnBrand,PartName, FBAC.BuyerID, FBAC.
	                    BuyerTeamID, FBAC.ExportOrderID, FBAC.ConsumptionID, FBAC.MachineTypeId,FBAC.TechnicalNameID, FBAC.ConsumptionQty, FBAC.BookingUOM, FBAC.RequisitionQty,
	                    YarnTypeID, FBAC.ForTechPack, FBAC.ISourcing, FBAC.ISourcingName, FBAC.ContactName, FBAC.ContactID, FBAC.BlockBookingQty, FBAC.AdjustQty,
	                    AutoAgree, FBAC.Price, FBAC.SuggestedPrice, FBAC.IsCompleteReceive, FBAC.IsCompleteDelivery,
	                    ColorID, FBAC.Construction, FBAC.ConstructionID, FBAC.Composition, FBAC.Color, FBAC.Gsm, FBAC.DyeingType, FBAC.KnittingType, FBAC.Length, FBAC.Width, FBAC.RelativeFactor
                        ,RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, RS.SourceItemMasterID, FBAC.FabricWidth, T.TechnicalName, KMS.SubClassName
                    )
                    SELECT * FROM FinalList;

                    ;With A As(
	                    select Min(FBP.FBAChildPlanningID) FBAChildPlanningID, FBP.BookingChildID, FBP.AcknowledgeID, FBP.CriteriaID
	                    From FBAChildPlanning FBP
	                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBP.AcknowledgeID
	                    Where FBA.BookingNo = '{bookingNo}'
	                    Group By BookingChildID, AcknowledgeID, CriteriaID
                    )
                    SELECT cp.BookingChildID, CR.CriteriaName, Sum(CR.ProcessTime)TotalTime, CriteriaIDs = String_Agg(CR.CriteriaID,',')
                    FROM A CP
                    INNER JOIN BDSCriteria_HK CR ON CR.CriteriaID = CP.CriteriaID
                    GROUP BY cp.BookingChildID, CR.CriteriaName

                    --Technical Name
                    SELECT Cast(T.TechnicalNameId As varchar) id, T.TechnicalName [text], ISNULL(ST.[Days], 0) [desc], Cast(SC.SubClassID as varchar) additionalValue
                    FROM FabricTechnicalName T
                    LEFT JOIN FabricTechnicalNameKMachineSubClass SC ON SC.TechnicalNameID = T.TechnicalNameId
                    LEFT JOIN KnittingMachineStructureType_HK ST ON ST.StructureTypeID = SC.StructureTypeID
                    Group By T.TechnicalNameId, T.TechnicalName, ST.Days, SC.SubClassID;

                    --M/c type
                    ;SELECT CAST(a.MachineSubClassID AS varchar) [id], b.SubClassName [text], b.TypeID [desc], c.TypeName additionalValue
                    FROM KnittingMachine a
                    INNER JOIN KnittingMachineSubClass b ON b.SubClassID = a.MachineSubClassID
                    Inner Join KnittingMachineType c On c.TypeID = b.TypeID
                    --Where c.TypeName != 'Flat Bed'
                    GROUP BY a.MachineSubClassID, b.SubClassName, b.TypeID, c.TypeName;

                    --CriteriaNames
                        ;SELECT CriteriaName,CriteriaSeqNo,(CASE WHEN CriteriaName  IN('Batch Preparation','Quality Check') THEN '1'ELSE'0'END) AS TotalTime
                    FROM BDSCriteria_HK --WHERE CriteriaName NOT IN('Batch Preparation','Testing')
                    GROUP BY CriteriaSeqNo,CriteriaName order by CriteriaSeqNo,CriteriaName;

                    --FBAChildPlannings
                    ;SELECT * FROM BDSCriteria_HK order by CriteriaSeqNo, OperationSeqNo, CriteriaName;

                    --FBookingAcknowledgeChildDetails (Fabric)
                    SELECT *
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID=B.AcknowledgeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND B.SubGroupID IN (1);

                    --FBookingAcknowledgeChildDetails (Collar & Cuff)
                    SELECT *
                    FROM FBookingAcknowledgeChildDetails A
                    LEFT JOIN FBookingAcknowledgeChild B ON B.BookingChildID=A.BookingChildID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID=B.AcknowledgeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND B.SubGroupID IN (11,12);

                    --Brand List
                    ;SELECT DISTINCT(KM.BrandID) [id], EV.ValueName [text]
                    FROM KnittingMachine KM
                    LEFT JOIN KnittingUnit KU ON KU.KnittingUnitID = KM.KnittingUnitID
                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue EV ON ValueID = KM.BrandID
                    ORDER BY [text];

                    --YarnChild
                    SELECT YBC.*,IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChild_New YBC
                    INNER JOIN FBookingAcknowledgeChild FAB ON FAB.BookingChildID = YBC.BookingChildID
                    INNER JOIN FBookingAcknowledge FA ON FA.FBAckID = FAB.AcknowledgeID
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBC.ItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE FA.BookingNo = '{bookingNo}';

                     --YarnChildItem
                    SELECT YBCI.*, Spinner = CASE WHEN ISNULL(YBCI.SpinnerId,0) > 0 THEN C.ShortName ELSE '' END
					,IM.Segment1ValueID,IM.Segment2ValueID
                    ,IM.Segment3ValueID,IM.Segment4ValueID,IM.Segment5ValueID,IM.Segment6ValueID
                    ,IM.Segment7ValueID,IM.Segment8ValueID,IM.Segment9ValueID,IM.Segment10ValueID
                    ,ISV1.SegmentValue AS Segment1ValueDesc, ISV2.SegmentValue AS Segment2ValueDesc, ISV3.SegmentValue AS Segment3ValueDesc
                    ,ISV4.SegmentValue AS Segment4ValueDesc, ISV5.SegmentValue AS Segment5ValueDesc, ISV6.SegmentValue AS Segment6ValueDesc
                    ,ISV7.SegmentValue AS Segment7ValueDesc, ISV8.SegmentValue AS Segment8ValueDesc
                    FROM YarnBookingChildItem_New YBCI
                    INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = YBCI.YBChildID
                    INNER JOIN FBookingAcknowledgeChild FAB ON FAB.BookingChildID = YBC.BookingChildID
                    INNER JOIN FBookingAcknowledge FA ON FA.FBAckID = FAB.AcknowledgeID
					LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID = YBCI.SpinnerId
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YBCI.YItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV8 ON ISV8.SegmentValueID = IM.Segment8ValueID
                    WHERE FA.BookingNo = '{bookingNo}';
                  
                    --Shade book
                    SELECT ShadeCode [id], ShadeCode [text] FROM YarnShadeBook;
              
                    -- YarnBookingChildItemYarnSubBrand
                    Select ETV.ValueID id, ETV.ValueName [text]
                    From {DbNames.EPYSL}..EntityTypeValue ETV
                    Inner Join {DbNames.EPYSL}..EntityType ET On ET.EntityTypeID = ETV.EntityTypeID
                    Where ET.EntityTypeName = 'Yarn Sub Brand'
                    Order By ETV.ValueName;

                    --Spinner
                    {CommonQueries.GetYarnSpinners()};

                     --FBookingAckChildFinishingProcess
                    SELECT FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                    FMC.FMProcessID ProcessID, FMC.ProcessName ProcessName, FMC.ProcessTypeID, ET.ValueName ProcessType,FMC.FMCMasterID, b.ProcessName MachineName
                    FROM FBookingAckChildFinishingProcess FP
                    INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                    Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                    Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                    Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                    GROUP BY FP.FPChildID, FP.BookingChildID, FP.ProcessID, FP.ColorID, FP.SeqNo, FP.ProcessTypeID, FP.IsPreProcess, FP.Remarks,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                    --FBookingAckChildFinishingProcessItem
                    SELECT FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName
                    FROM FBookingAckChildFinishingProcessItem FPI
                    INNER JOIN FBookingAckChildFinishingProcess FP ON FP.FPChildID = FPI.FPChildID
                    INNER JOIN FBookingAcknowledgeChild FAC ON FAC.BookingChildID = FP.BookingChildID
                    INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FAC.AcknowledgeID
                    Inner JOIN FinishingMachineProcess_HK FMC ON FMC.FMProcessID = FP.ProcessID
                    Inner Join FinishingMachineConfigurationMaster b on b.FMCMasterID = FMC.FMCMasterID
                    Inner join {DbNames.EPYSL}..EntityTypeValue ET on ET.ValueID = FMC.ProcessTypeID
                    WHERE FBA.BookingNo = '{bookingNo}' AND FMC.ProcessName != ''
                    GROUP BY FPI.FPChildItemID, FPI.FPChildID, FPI.BookingChildID, FPI.SegmentNo, FPI.ItemMasterID, FPI.Qty, FPI.IsPreProcess, FPI.ActualQty,
                    FMC.FMProcessID, FMC.ProcessName, FMC.ProcessTypeID, ET.ValueName,FMC.FMCMasterID, b.ProcessName;

                    --SpinnerList
                    {CommonQueries.GetYarnSpinners()}

                    --Gauge List
                    SELECT DISTINCT id = KM.GG, [text] = KM.GG
                    from KnittingMachine KM
                    WHERE KM.GG > 0
                    GROUP BY KM.GG
                    ORDER BY KM.GG;

                    --Dia List
                    SELECT id = KM.Dia, [text] = KM.Dia, additionalValue = KM.GG
                    from KnittingMachine KM
                    WHERE KM.GG > 0
                    GROUP BY KM.Dia, KM.GG
                    ORDER BY KM.GG

                    -- Shade book
                    {CommonQueries.GetYarnShadeBooks()}";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                Guard.Against.NullObject(data);

                List<FBookingAcknowledgeChild> bookingChilds = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBookingAcknowledgeChild> bookingChildsCollarCuff = records.Read<FBookingAcknowledgeChild>().ToList();
                //List<FBAChildPlanning> childPlanningCriterias = records.Read<FBAChildPlanning>().ToList();
                List<FBAChildPlanning> childPlanningCriteriaNameWithIds = records.Read<FBAChildPlanning>().ToList();

                data.TechnicalNameList = await records.ReadAsync<Select2OptionModel>();
                List<Select2OptionModel> mcTypeList = records.Read<Select2OptionModel>().ToList();
                data.MCTypeForFabricList = mcTypeList.Where(x => x.additionalValue != "Flat Bed");
                data.MCTypeForOtherList = mcTypeList.Where(x => x.additionalValue == "Flat Bed");

                List<FBookingAcknowledgeChild> criteriaNames = records.Read<FBookingAcknowledgeChild>().ToList();
                List<FBAChildPlanning> fbaChildPlannings = records.Read<FBAChildPlanning>().ToList();

                var fabricChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                var collarCuffChildDetails = records.Read<FBookingAcknowledgeChildDetails>().ToList();
                data.KnittingMachines = records.Read<KnittingMachine>().ToList();

                List<YarnBookingChild> yarnBookingChilds = records.Read<YarnBookingChild>().ToList();
                List<YarnBookingChildItem> yarnBookingChildItems = records.Read<YarnBookingChildItem>().ToList();
                yarnBookingChilds.ForEach(x =>
                {
                    x.ChildItems = yarnBookingChildItems.Where(c => c.YBChildID == x.YBChildID).ToList();
                });

                List<Select2OptionModel> yarnShadeBooks = records.Read<Select2OptionModel>().ToList();
                List<Select2OptionModel> yarnSubBrandList = records.Read<Select2OptionModel>().ToList();
                List<Select2OptionModel> spinners = records.Read<Select2OptionModel>().ToList();

                List<FBookingAckChildFinishingProcess> finishingProcessChilds = records.Read<FBookingAckChildFinishingProcess>().ToList();
                List<FBookingAckChildFinishingProcessItem> finishingProcessChildItems = records.Read<FBookingAckChildFinishingProcessItem>().ToList();

                data.SpinnerList = records.Read<Select2OptionModel>().ToList();
                data.SpinnerList.Insert(0, new Select2OptionModel()
                {
                    id = 0.ToString(),
                    text = "N/A"
                });
                data.GaugeList = records.Read<Select2OptionModel>().ToList();
                data.DiaList = records.Read<Select2OptionModel>().ToList();
                data.YarnShadeBooks = records.Read<Select2OptionModel>();

                bookingChilds.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                    bc.ChildDetails = fabricChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    bc.YarnShadeBooks = yarnShadeBooks;
                    bc.YarnSubBrandList = yarnSubBrandList;
                    bc.Spinners = spinners;

                    yarnBookingChilds.Where(x => x.BookingChildID == bc.BookingChildID).ToList().ForEach(x =>
                    {
                        x.ChildItems.ForEach(y =>
                        {
                            y.BookingChildID = bc.BookingChildID;
                            y.BookingID = bc.BookingID;
                            y.ConsumptionID = bc.ConsumptionID;
                        });
                        bc.ChildItems.AddRange(x.ChildItems);
                    });
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));

                    #region Finishing Process
                    bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                    bc.PreFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                    bc.PostFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    #endregion
                });
                bookingChildsCollarCuff.ForEach(bc =>
                {
                    bc.CriteriaNames = criteriaNames;
                    bc.FBAChildPlannings = fbaChildPlannings;
                    bc.FBAChildPlanningsWithIds = childPlanningCriteriaNameWithIds.Where(x => x.BookingChildID == bc.BookingChildID).ToList();
                    bc.ChildDetails = collarCuffChildDetails.Where(y => y.BookingChildID == bc.BookingChildID).ToList();
                    bc.YarnShadeBooks = yarnShadeBooks;
                    bc.YarnSubBrandList = yarnSubBrandList;
                    bc.Spinners = spinners;

                    yarnBookingChilds.Where(x => x.BookingChildID == bc.BookingChildID).ToList().ForEach(x =>
                    {
                        x.ChildItems.ForEach(y =>
                        {
                            y.BookingChildID = bc.BookingChildID;
                            y.BookingID = bc.BookingID;
                            y.ConsumptionID = bc.ConsumptionID;
                        });
                        bc.ChildItems.AddRange(x.ChildItems);
                    });
                    //bc.CriteriaIDs = string.Join(",", childPlanningCriterias.Where(x => x.BookingChildID == bc.BookingChildID).ToList().Select(y => y.CriteriaID));

                    #region Finishing Process
                    bc.PreFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == true).ToList();
                    bc.PreFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    bc.PostFinishingProcessChilds = finishingProcessChilds.Where(x => x.BookingChildID == bc.BookingChildID && x.IsPreProcess == false).ToList();
                    bc.PostFinishingProcessChilds.ForEach(pc =>
                    {
                        pc.FinishingProcessChildItems = finishingProcessChildItems.Where(x => x.FPChildID == pc.FPChildID).ToList();
                    });
                    #endregion
                });

                data.FBookingChild = bookingChilds.Where(x => x.SubGroupID == 1).ToList();
                data.FBookingChildCollor = bookingChildsCollarCuff.Where(x => x.SubGroupID == 11).ToList();
                data.FBookingChildCuff = bookingChildsCollarCuff.Where(x => x.SubGroupID == 12).ToList();
                data.HasFabric = data.FBookingChild.Count() > 0 ? true : false;
                data.HasCollar = data.FBookingChildCollor.Count() > 0 ? true : false;
                data.HasCuff = data.FBookingChildCuff.Count() > 0 ? true : false;

                data.Childs.AddRange(data.FBookingChild);
                data.Childs.AddRange(data.FBookingChildCollor);
                data.Childs.AddRange(data.FBookingChildCuff);

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledgeChild>> GetDataForAcknowledgColourAsync(int bookingId)
        {
            //var query =
            //   $@";With A AS(
            //Select BookingID, BookingChildID, ItemMasterID, DeliveryDate
            //From FBookingAcknowledgeChild
            //Where BookingID ={bookingId}
            //   )
            //   Select ISV.SegmentValue Color, Max(A.DeliveryDate) DeliveryDate
            //   From A
            //   Inner Join FBookingAcknowledgeChildDetails B ON B.BookingChildID = A.BookingChildID
            //   Inner Join {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = B.ColorID
            //   Group by ISV.SegmentValue;";

            var query =
              $@";With A AS(
                    Select BookingID, BookingChildID, ConsumptionID, ItemMasterID, DeliveryDate
                    From FBookingAcknowledgeChild
                    Where BookingID = {bookingId}
                ),
                R AS
                (
                    Select Color = CASE WHEN FBA.IsSample = 1 THEN CASE WHEN SBCC.SubGroupID = 1 Then SBC.GarmentsColor ELSE SBCC.Segment5Desc END ELSE BCT.GmtColor END,
                    Max(A.DeliveryDate) DeliveryDate
                    From A
                    --Inner Join FBookingAcknowledgeChildDetails B ON B.BookingChildID = A.BookingChildID
                    LEFT JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = A.BookingChildID
                    LEFT JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
                    LEFT JOIN {DbNames.EPYSL}..BookingChildText BCT On BCT.BookingID = A.BookingID and BCT.BookingChildID = A.BookingChildID
                    LEFT JOIN {DbNames.EPYSL}..SampleBookingConsumptionText SBC On SBC.BookingID = A.BookingID and SBC.ConsumptionID = A.ConsumptionID
                    Left Join {DbNames.EPYSL}..SampleBookingConsumption SBCC On SBCC.BookingID = A.BookingID and SBCC.ConsumptionID = A.ConsumptionID
                    Group by CASE WHEN FBA.IsSample = 1 THEN CASE WHEN SBCC.SubGroupID = 1 Then SBC.GarmentsColor ELSE SBCC.Segment5Desc END ELSE BCT.GmtColor END
                )
                SELECT * FROM R WHERE ISNULL(Color,'') <> ''";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FBookingAcknowledgeChild> data = records.Read<FBookingAcknowledgeChild>().ToList();

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledge>> GetItsSampleOrNot(string BookingNo)
        {
            string query = $@"SELECT FBA.IsSample, FBA.WithoutOB,FBA.BookingID
                        FROM FBookingAcknowledge FBA
                        LEFT JOIN FabricBookingAcknowledge FBA1 ON FBA1.BookingID = FBA.BookingID
                        WHERE FBA.BookingNo ='{BookingNo}'
                        Group By FBA.IsSample, FBA.WithoutOB, FBA.BookingID";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FBookingAcknowledge> data = records.Read<FBookingAcknowledge>().ToList();

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> GetYBForBulkAsync(string bookingNo, bool isAddition)
        {
            string additionQuery = isAddition ? " AND YBM.IsAddition = 1 " : " AND YBM.IsAddition = 0 ";

            string sql = $@"  
                --Seq 1
                 Select top 1 * From FBookingAcknowledge Where BookingNo = '{bookingNo}';

                --Seq 2
                WITH 
                FBAC AS
                (
	                Select SBC.BookingID, SBC.BookingChildID, SBCon.ItemGroupID, SBC.SubGroupID, SBC.ItemMasterID, U.RelativeFactor,
	                ISG.SubGroupName, ConsumptionQty = Ceiling(Sum(SBC.ConsumptionQty)),  SBC.ConsumptionID, SBC.MachineTypeId,SBC.TechnicalNameID,
	                ColorID = CASE WHEN SBC.SubGroupID = 1 THEN IM.Segment3ValueID ELSE IM.Segment5ValueID END,
	                BookingUnitID = (CASE WHEN SBC.SubGroupID = 1 THEN SBC.BookingUnitID ELSE 28 END),
	                BookingUOM = CASE WHEN SBC.SubGroupID = 1 THEN  U.DisplayUnitDesc ELSE 'KG' END, 
	                BookingQty = Ceiling(Sum(SBC.BookingQty)),
	                RequisitionQty = Ceiling(Sum(SBC.BookingQty)), SBCon.Remarks,
	                SBCon.LengthYds, SBCon.LengthInch, SBCon.FUPartID, 
	                YarnTypeID = CASE WHEN M.IsSample = 0 THEN A.A1ValueID ELSE SBCon.A1ValueID END, 
	                YarnType = CASE WHEN M.IsSample = 0 THEN ISVA1.SegmentValue ELSE ISVA11.SegmentValue END, 
	                SBCon.YarnBrandID, YarnBrand = ETV.ValueName, FUP.PartName, ForTechPack = Convert(Varchar(50),''), 
	                ISourcing = Convert(bit,1), ISourcingName = 'In-House', ContactName = '',ContactID = 0,
	                LabDipNo = IsNull(SBCon.LabDipNo,''), BlockBookingQty = Convert(decimal,0), AdjustQty = Convert(decimal,0), 
	                AutoAgree = Convert(bit,0),Price = convert(decimal,0), SuggestedPrice = convert(decimal,0), 
	                IsCompleteReceive = Convert(bit,'0'), IsCompleteDelivery = Convert(bit,'0'), M.BuyerID, M.BuyerTeamID, M.ExportOrderID,
                    ConstructionID = ISV1.SegmentValueID,
	                Construction = ISV1.SegmentValue, 
	                Composition = ISV2.SegmentValue,
	                Color = CASE WHEN SBC.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
	                Gsm = CASE WHEN SBC.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END, 
	                DyeingType = CASE WHEN SBC.SubGroupID = 1 THEN ISV6.SegmentValue ELSE '' END, 
	                KnittingType = CASE WHEN SBC.SubGroupID = 1 THEN ISV7.SegmentValue ELSE '' END,
	                Length = CASE WHEN SBC.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV3.SegmentValue) END,
	                Width = CASE WHEN SBC.SubGroupID = 1 THEN 0 ELSE CONVERT(decimal(18,2),ISV4.SegmentValue) END,
	                FabricWidth = CASE WHEN SBC.SubGroupID = 1 THEN ISV5.SegmentValue ELSE '' END,
	                Instruction = CASE WHEN M.IsSample = 0 THEN A.Remarks ELSE SBCon.Remarks END,
	                YarnProgram = CASE WHEN M.IsSample = 0 THEN ETV.ValueName ELSE ETV1.ValueName END

	                From FBookingAcknowledgeChild SBC 
                    LEFT Join {DbNames.EPYSL}..BookingChild A on A.ConsumptionID = SBC.ConsumptionID AND A.ItemMasterID = SBC.ItemMasterID
	                LEFT Join {DbNames.EPYSL}..SampleBookingConsumption SBCon On SBCon.ConsumptionID = SBC.ConsumptionID
	                INNER Join FBookingAcknowledge M On M.FBAckID = SBC.AcknowledgeID
	                Left Join {DbNames.EPYSL}..Unit U On U.UnitID = SBC.BookingUnitID
	                INNER Join {DbNames.EPYSL}..ItemGroup IG On IG.ItemGroupID = SBC.ItemGroupID
	                INNER Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = SBC.SubGroupID
	                Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA1 On ISVA1.SegmentValueID = A.A1ValueID
	                Left Join {DbNames.EPYSL}..ItemSegmentValue ISVA11 On ISVA11.SegmentValueID = SBCon.A1ValueID
	                Left Join {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = A.YarnBrandID
	                Left Join {DbNames.EPYSL}..EntityTypeValue ETV1 ON ETV1.ValueID = SBCon.YarnBrandID
	                Left Join {DbNames.EPYSL}..FabricUsedPart FUP On FUP.FUPartID = SBCon.FUPartID 
	                Left Join {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = SBC.ItemMasterID
	                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	                LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	                Where M.BookingNo = '{bookingNo}' AND SBC.IsDeleted=0                              
	                Group By SBC.BookingID, SBC.BookingChildID, SBCon.ItemGroupID, SBC.ItemMasterID, ISG.SubGroupName,
	                SBC.BookingUnitID,U.DisplayUnitDesc,SBCon.LengthYds,SBCon.LengthInch,SBCon.FUPartID,A.A1ValueID,SBCon.A1ValueID,SBCon.YarnBrandID,ISVA1.SegmentValue,ISVA11.SegmentValue,
	                IsNull(SBCon.LabDipNo,''),SBCon.Remarks,ISVA1.SegmentValue,ETV.ValueName,ETV1.ValueName,FUP.PartName, M.BuyerID, 
	                M.BuyerTeamID, M.ExportOrderID, U.RelativeFactor, SBC.ConsumptionID, SBC.MachineTypeId,SBC.TechnicalNameID, SBCon.Segment3Desc, SBCon.Segment4Desc,
	                SBC.SubGroupID, IM.Segment3ValueID, IM.Segment5ValueID, A.Remarks, SBCon.Remarks, M.IsSample
	                ,ISV1.SegmentValueID,ISV1.SegmentValue,ISV2.SegmentValue, ISV3.SegmentValue, ISV4.SegmentValue, ISV5.SegmentValue, ISV6.SegmentValue, ISV7.SegmentValue
                ),
                FinalList AS
                (
	                SELECT FBAC.BookingID, FBAC.BookingChildID, FBAC.ItemGroupID, FBAC.SubGroupID, FBAC.ItemMasterID, FBAC.SubGroupName,
	                BookingUnitID,LengthYds,LengthInch,FUPartID,YarnBrandID,
	                LabDipNo,Remarks,FBAC.YarnTypeID,FBAC.YarnType,YarnBrand,PartName, FBAC.BuyerID, FBAC.
	                BuyerTeamID, FBAC.ExportOrderID, FBAC.ConsumptionID, FBAC.MachineTypeId,FBAC.TechnicalNameID, FBAC.ConsumptionQty, FBAC.BookingUOM, FBAC.RequisitionQty,
	                FBAC.ForTechPack, FBAC.ISourcing, FBAC.ISourcingName, FBAC.ContactName, FBAC.ContactID, FBAC.BlockBookingQty, FBAC.AdjustQty,
	                AutoAgree, FBAC.Price, FBAC.SuggestedPrice, FBAC.IsCompleteReceive, FBAC.IsCompleteDelivery,
	                ColorID, FBAC.Construction, FBAC.ConstructionID, FBAC.Composition, FBAC.Color, FBAC.Gsm, FBAC.DyeingType, FBAC.KnittingType, FBAC.Length, FBAC.Width,
	                FBAC.BookingQty,
	                RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, SourceItemMasterID = RS.ItemMasterID, FBAC.FabricWidth, T.TechnicalName, KMS.SubClassName MachineType,FBAC.Instruction, FBAC.YarnProgram
                    FROM FBAC
                    LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = FBAC.MachineTypeId
                    LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = FBAC.TechnicalNameID
	                LEFT JOIN {DbNames.EPYSL}..BookingChildReferenceSource RS ON RS.BookingID = FBAC.BookingID AND RS.ConsumptionID = FBAC.ConsumptionID
	                Group By FBAC.BookingID, FBAC.BookingChildID, FBAC.ItemGroupID, FBAC.SubGroupID, FBAC.ItemMasterID, FBAC.SubGroupName,
	                BookingUnitID,LengthYds,LengthInch,FUPartID,YarnBrandID,
	                LabDipNo,Remarks,FBAC.YarnType,YarnBrand,PartName, FBAC.BuyerID, FBAC.BuyerTeamID, FBAC.ExportOrderID, FBAC.ConsumptionID, FBAC.MachineTypeId,FBAC.TechnicalNameID, FBAC.ConsumptionQty, FBAC.BookingUOM, FBAC.RequisitionQty,
	                FBAC.YarnTypeID, FBAC.ForTechPack, FBAC.ISourcing, FBAC.ISourcingName, FBAC.ContactName, FBAC.ContactID, FBAC.BlockBookingQty, FBAC.AdjustQty,
	                AutoAgree, FBAC.Price, FBAC.SuggestedPrice, FBAC.IsCompleteReceive, FBAC.IsCompleteDelivery,FBAC.BookingQty,
	                ColorID, FBAC.Construction, FBAC.ConstructionID, FBAC.Composition, FBAC.Color, FBAC.Gsm, FBAC.DyeingType, FBAC.KnittingType, FBAC.Length, FBAC.Width, FBAC.RelativeFactor
                    ,RS.RefSourceID, RS.RefSourceNo, RS.SourceConsumptionID, RS.ItemMasterID, FBAC.FabricWidth, T.TechnicalName, KMS.SubClassName,FBAC.Instruction, FBAC.YarnProgram
                )
                SELECT * FROM FinalList;

                SELECT U.*, FBC.BookingChildID
				FROM BulkBookingFinishFabricUtilization U
				INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
				INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID
				INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
				WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

				SELECT U.*, FBC.BookingChildID
				FROM FBookingAcknowledgeChildGFUtilization U
				INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
				INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = YBC.BookingChildID
				INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
                WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};

                ----FBookingAcknowledgeChildReplacement
                SELECT U.*
                FROM FBookingAcknowledgeChildReplacement U
                INNER JOIN YarnBookingChild_New YBC ON YBC.YBChildID = U.YBChildID
                INNER JOIN YarnBookingMaster_New YBM ON YBM.YBookingID = YBC.YBookingID
                INNER JOIN FBookingAcknowledgeChild FBC ON FBC.BookingChildID = U.BookingChildID
                INNER JOIN FBookingAcknowledge FBA ON FBA.FBAckID = FBC.AcknowledgeID
                WHERE FBA.BookingNo = '{bookingNo}' {additionQuery};";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(sql);
                FBookingAcknowledge data = records.Read<FBookingAcknowledge>().FirstOrDefault();
                data.Childs = records.Read<FBookingAcknowledgeChild>().ToList();

                var listFF = records.Read<BulkBookingFinishFabricUtilization>().ToList();
                var listGF = records.Read<FBookingAcknowledgeChildGFUtilization>().ToList();
                var listChildReplacement = records.Read<FBookingAcknowledgeChildReplacement>().ToList();

                data.Childs.ForEach(c =>
                {
                    c.FinishFabricUtilizationPopUpList = listFF.Where(x => x.BookingChildID == c.BookingChildID).ToList();
                    c.GreyFabricUtilizationPopUpList = listGF.Where(x => x.BookingChildID == c.BookingChildID).ToList();
                    c.AdditionalReplacementPOPUPList = listChildReplacement.Where(x => x.BookingChildID == c.BookingChildID).ToList();
                });

                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task SaveAsync(FBookingAcknowledge entity,
            List<FBookingAcknowledgeChild> entityChilds,
            List<FBookingAcknowledgeChildAddProcess> entityChildAddProcess,
            List<FBookingAcknowledgeChildDetails> entityChildDetails,
            List<FBookingAcknowledgeChildGarmentPart> entityChildsGpart,
            List<FBookingAcknowledgeChildProcess> entityChildsProcess,
            List<FBookingAcknowledgeChildText> entityChildsText,
            List<FBookingAcknowledgeChildDistribution> entityChildsDistribution,
            List<FBookingAcknowledgeChildYarnSubBrand> entityChildsYarnSubBrand,
            List<FBookingAcknowledgeImage> entityChildsImage,
            List<BDSDependentTNACalander> BDCalander, int isBDS,
            List<FreeConceptMaster> entityFreeConcepts = null,
            List<FreeConceptMRMaster> entityFreeMRs = null,
            List<FBookingAcknowledgementLiabilityDistribution> entityChildsLiabilitiesDistribution = null,
            List<FabricBookingAcknowledge> entityFBA = null,
            List<FBookingAcknowledgementYarnLiability> entityFBYL = null,
            List<YarnBookingMaster> entityYarnBookings = null,
            List<FreeConceptMaster> entityFreeConceptsForRevise = null,
            List<SampleBookingConsumption> sampleBookingChilds = null,
            bool isRevised = false,
            int UserId = 0)
        {
            SqlTransaction transaction = null;
            try
            {
                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();

                List<FBookingAcknowledge> FBAListForBulk = new List<FBookingAcknowledge>();
                if (isBDS == 2)
                {
                    FBAListForBulk = entity.FBookingAcknowledgeList;
                }

                if (entity.FBAckID > 0) entity.EntityState = EntityState.Modified;
                else entity.FBAckID = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE);

                if (entityFBA == null) entityFBA = new List<FabricBookingAcknowledge>();
                if (entityChildsLiabilitiesDistribution == null) entityChildsLiabilitiesDistribution = new List<FBookingAcknowledgementLiabilityDistribution>();

                if (entityFBA.Count > 0)
                {
                    if (entityFBA[0].AcknowledgeID > 0) entity.EntityState = EntityState.Modified;
                    else entityFBA[0].AcknowledgeID = await _service.GetMaxIdAsync(TableNames.FabricBookingAcknowledge);
                }
                if (entityFBYL == null) entityFBYL = new List<FBookingAcknowledgementYarnLiability>();
                int maxConceptMRId = 0;
                int maxConceptMRChildId = 0;
                int maxFBAckChildDetailId = 0;
                int maxConceptId = 0;
                int maxConceptChildId = 0;

                List<FreeConceptChildColor> childColors = new List<FreeConceptChildColor>();
                List<FreeConceptMRChild> childMRs = new List<FreeConceptMRChild>();

                List<YarnBookingMaster> yarnBookings = new List<YarnBookingMaster>();
                List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                List<YarnBookingChildItem> yarnBookingChildItems = new List<YarnBookingChildItem>();


                if (entity.EntityState == EntityState.Modified)
                {
                    List<FreeConceptMaster> newFreeConceptMasterList = new List<FreeConceptMaster>();
                    List<FreeConceptChildColor> newFreeConceptChildColorList = new List<FreeConceptChildColor>();
                    List<FreeConceptMRMaster> newFreeConceptMRList = new List<FreeConceptMRMaster>();
                    List<FreeConceptMRChild> newFreeConceptMRChildList = new List<FreeConceptMRChild>();

                    List<YarnBookingMaster> newYarnBookingMasterList = new List<YarnBookingMaster>();
                    List<YarnBookingChild> newYarnBookingChildList = new List<YarnBookingChild>();
                    List<YarnBookingChildItem> newYarnBookingChildItemList = new List<YarnBookingChildItem>();

                    int maxChildId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD, entityChilds.Count(x => x.EntityState == EntityState.Added));
                    int maxChildAddProcessId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_ADD_PROCESS, entityChildAddProcess.Count(x => x.EntityState == EntityState.Added));
                    int maxChildDetailsId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_DETAILS, entityChildDetails.Count(x => x.EntityState == EntityState.Added));
                    int maxChildGarmentPartId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_GARMENT_PART, entityChildsGpart.Count(x => x.EntityState == EntityState.Added));
                    int maxChildProcessId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_PROCESS, entityChildsProcess.Count(x => x.EntityState == EntityState.Added));
                    int maxChildTextId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_TEXT, entityChildsText.Count(x => x.EntityState == EntityState.Added));
                    int maxChildDistributionId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_DISTRIBUTION, entityChildsDistribution.Count(x => x.EntityState == EntityState.Added));
                    int maxChildYarnSubBrandId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_YARN_SUB_BRAND, entityChildsYarnSubBrand.Count(x => x.EntityState == EntityState.Added));
                    int maxPlanningId = await _service.GetMaxIdAsync(TableNames.FBOOKING_ACKNOWLEDGE_CHILD_PLANNING, entityChilds.Sum(x => x.FBAChildPlannings.Count(y => y.EntityState == EntityState.Added)));
                    int maxBDSEventID = await _service.GetMaxIdAsync(TableNames.BDS_Dependent_TNA_Calander, BDCalander.Count(x => x.EntityState == EntityState.Added));
                    int maxLCID = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_LIABILITIES_DISTRIBUTION, entityChildsLiabilitiesDistribution.Count(x => x.EntityState == EntityState.Added));
                    int maxYLID = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_YARN_LIABILITIES, entityChildsLiabilitiesDistribution.Count(x => x.EntityState == EntityState.Added));

                    if (entity.PageName == "BulkBookingKnittingInfo")
                    {
                        var tempObjList = new List<dynamic>();
                        var maxChildCount = 0;

                        entityChilds.ForEach(item =>
                        {
                            maxChildCount += item.ChildItems.Count();

                            var tObj = tempObjList.Find(x => x.BookingID == item.BookingID &&
                                                           x.ItemMasterID == item.ItemMasterID &&
                                                           x.SubGroupID == item.SubGroupID);
                            if (tObj == null)
                            {
                                dynamic tempObj = new System.Dynamic.ExpandoObject();
                                tempObj.BookingID = item.BookingID;
                                tempObj.ItemMasterID = item.ItemMasterID;
                                tempObj.SubGroupID = item.SubGroupID;
                                tempObjList.Add(tempObj);
                            }
                        });

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, tempObjList.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, tempObjList.Count);

                        maxConceptMRId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_MASTER, tempObjList.Count);
                        maxConceptMRChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_CHILD, maxChildCount);
                    }
                    else
                    {

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entityChilds.Count(x => x.EntityState == EntityState.Added));
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entityChilds.Count(x => x.EntityState == EntityState.Added));
                        if (maxConceptId == 0 & entityFreeConcepts.Count() == 0)
                        {
                            maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entityChilds.Count(x => x.EntityState == EntityState.Modified));
                            maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entityChilds.Count(x => x.EntityState == EntityState.Modified));

                        }
                    }

                    int i = 0;
                    entityChilds.ForEach(item =>
                    {
                        int bookingChildId = 0;
                        if (item.EntityState == EntityState.Added) bookingChildId = maxChildId++;
                        entityChildAddProcess.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.BookingCAddProcessID = maxChildAddProcessId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        entityChildDetails.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.BookingCDetailsID = maxChildDetailsId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        entityChildsGpart.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.BookingCGPID = maxChildGarmentPartId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        entityChildsProcess.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.BookingCProcessID = maxChildProcessId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        entityChildsText.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.TextID = maxChildTextId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        entityChildsDistribution.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.DistributionID = maxChildDistributionId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        entityChildsYarnSubBrand.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.BookingCYSubBrandID = maxChildYarnSubBrandId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        entityChildsLiabilitiesDistribution.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.LChildID = maxLCID++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });
                        item.FBAChildPlannings.Where(x => x.BookingChildID == item.BookingChildID && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.FBAChildPlanningID = maxPlanningId++;
                            x.BookingChildID = bookingChildId > 0 ? bookingChildId : item.BookingChildID;
                        });

                        if (item.EntityState == EntityState.Added) item.BookingChildID = bookingChildId;

                        #region FreeConcept & FreeConceptMR
                        if (item.EntityState != EntityState.Deleted)
                        {
                            int conceptID = 0;
                            string conceptNo = "";

                            if (entity.PageName == "BulkBookingKnittingInfo") //isBDS == 2
                            {
                                #region FreeConceptMaster & FreeConceptMRMaster

                                //NEXT
                                bool isUpdate = false;
                                List<FreeConceptMaster> freeConcepts = entityFreeConceptsForRevise;// await this.GetFreeConcepts(entity.BookingNo);

                                FreeConceptMaster concept = new FreeConceptMaster();
                                FreeConceptMRMaster conceptMR = new FreeConceptMRMaster();

                                conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);

                                FreeConceptMaster fcm = freeConcepts.Find(x => x.ConceptNo == conceptNo);
                                if (fcm.IsNotNull())
                                {
                                    isUpdate = true;
                                    conceptID = fcm.ConceptID;
                                }
                                else
                                {
                                    conceptID = maxConceptId++;
                                }
                                var freeConcept = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                                if (isUpdate)
                                {
                                    freeConcept.EntityState = EntityState.Modified;
                                }
                                entityFreeConcepts.Add(freeConcept);
                                newFreeConceptMasterList.Add(freeConcept);

                                if (!string.IsNullOrEmpty(freeConcept.Color))
                                {
                                    isUpdate = false;
                                    int conceptChildId = 0;
                                    if (fcm.IsNotNull() && fcm.ChildColors.Count() > 0)
                                    {
                                        var color = fcm.ChildColors.Find(x => x.ColorName == freeConcept.Color);
                                        if (color.IsNotNull())
                                        {
                                            isUpdate = true;
                                            conceptChildId = color.CCColorID;
                                        }
                                        else
                                        {
                                            conceptChildId = maxConceptChildId++;
                                        }
                                    }
                                    else
                                    {
                                        conceptChildId = maxConceptChildId++;
                                    }
                                    var colorChild = this.GetFreeConceptColorChild(item, freeConcept, conceptChildId);
                                    if (isUpdate)
                                    {
                                        colorChild.EntityState = EntityState.Modified;
                                    }

                                    childColors.Add(colorChild);
                                    newFreeConceptChildColorList.Add(colorChild);
                                }
                                if (item.ChildItems.Count() > 0)
                                {
                                    isUpdate = false;
                                    int fCMRMasterID = 0;

                                    FreeConceptMRMaster freeConceptMRObj = null;

                                    if (fcm.IsNotNull() && fcm.MRList.Count() > 0)
                                    {
                                        isUpdate = true;
                                        freeConceptMRObj = fcm.MRList.First();
                                        fCMRMasterID = freeConceptMRObj.FCMRMasterID;
                                    }
                                    else
                                    {
                                        fCMRMasterID = maxConceptMRId++;
                                    }

                                    var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                    if (isUpdate)
                                    {
                                        freeConceptMR.EntityState = EntityState.Modified;
                                    }
                                    entityFreeMRs.Add(freeConceptMR);
                                    newFreeConceptMRList.Add(freeConceptMR);

                                    item.ChildItems.ForEach(ybci =>
                                    {
                                        isUpdate = false;
                                        int mRChildId = 0;

                                        if (freeConceptMRObj.IsNotNull())
                                        {
                                            var mrChildObj = freeConceptMRObj.Childs.Find(c => c.ItemMasterID == ybci.YItemMasterID);
                                            if (mrChildObj.IsNotNull())
                                            {
                                                isUpdate = true;
                                                mRChildId = mrChildObj.FCMRChildID;
                                            }
                                            else
                                            {
                                                mRChildId = maxConceptMRChildId++;
                                            }
                                        }
                                        else
                                        {
                                            mRChildId = maxConceptMRChildId++;
                                        }
                                        var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                        if (isUpdate)
                                        {
                                            mrChild.EntityState = EntityState.Modified;
                                        }
                                        childMRs.Add(mrChild);
                                        newFreeConceptMRChildList.Add(mrChild);
                                    });
                                }

                                i++;

                                #endregion FreeConceptMaster & FreeConceptMRMaster
                            }
                            else
                            {
                                int ab = item.BookingChildID;
                                var obj = entityFreeConcepts.Find(x => x.BookingChildID == item.BookingChildID);
                                i = entityFreeConcepts.Count();
                                if (obj != null)
                                {
                                    conceptID = obj.ConceptID;
                                    conceptNo = obj.ConceptNo;
                                    var childs = obj.ChildColors;

                                    obj = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);

                                    childs.ForEach(colorChild =>
                                    {
                                        colorChild = this.GetFreeConceptColorChild(item, obj, colorChild.CCColorID);
                                        colorChild.EntityState = EntityState.Modified;
                                        newFreeConceptChildColorList.Add(colorChild);
                                    });

                                    obj.EntityState = EntityState.Modified;
                                    newFreeConceptMasterList.Add(obj);
                                }
                                else
                                {
                                    if (i > 0) i++;
                                    conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);
                                    conceptID = maxConceptId++;
                                    obj = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                                    obj.EntityState = EntityState.Added;
                                    newFreeConceptMasterList.Add(obj);

                                    if (!string.IsNullOrEmpty(item.Color))
                                    {
                                        int conceptChildId = maxConceptChildId++;
                                        var colorChild = this.GetFreeConceptColorChild(item, obj, conceptChildId);
                                        colorChild.EntityState = EntityState.Added;
                                        newFreeConceptChildColorList.Add(colorChild);
                                    }
                                }
                            }
                        }
                        #endregion FreeConcept & FreeConceptMR
                    });
                    entityFBYL.Where(x => x.EntityState == EntityState.Added).ToList().ForEach(x =>
                    {
                        x.YLChildID = maxYLID++;
                    });
                    BDCalander.Where(x => x.EntityState == EntityState.Added).ToList().ForEach(x =>
                    {
                        x.BDSEventID = maxBDSEventID++;
                    });

                    #region FreeConceptMR
                    entityFreeConcepts = newFreeConceptMasterList;

                    List<FreeConceptMaster> lFrreCM = new List<FreeConceptMaster>();
                    entityFreeConcepts.ForEach(item =>
                    {
                        var objFrreCM = entityChilds.Find(x => x.BookingChildID == item.BookingChildID);
                        if (objFrreCM == null)
                        {
                            item.IsActive = true;
                            item.EntityState = EntityState.Modified;
                            lFrreCM.Add(item);
                        }
                    });

                    childColors = newFreeConceptChildColorList;
                    entityFreeMRs = newFreeConceptMRList;
                    childMRs = newFreeConceptMRChildList;
                    #endregion

                }
                else
                {
                    int maxChildId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD, entityChilds.Count);
                    int maxChildAddProcessId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_ADD_PROCESS, entityChildAddProcess.Count);
                    int maxChildDetailsId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_DETAILS, entityChildDetails.Count);
                    int maxChildGarmentPartId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_GARMENT_PART, entityChildsGpart.Count);
                    int maxChildProcessId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_PROCESS, entityChildsProcess.Count);
                    int maxChildTextId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_TEXT, entityChildsText.Count);
                    int maxChildDistributionId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_DISTRIBUTION, entityChildsDistribution.Count);
                    int maxChildYarnSubBrandId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_YARN_SUB_BRAND, entityChildsYarnSubBrand.Count);
                    int maxImageId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_IMAGE, entityChildsImage.Count);
                    int maxLCID = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_LIABILITIES_DISTRIBUTION, entityChildsLiabilitiesDistribution.Count(x => x.EntityState == EntityState.Added));
                    int maxPlanningId = await _service.GetMaxIdAsync(TableNames.FBOOKING_ACKNOWLEDGE_CHILD_PLANNING, entityChilds.Sum(x => x.FBAChildPlannings.Count));
                    int maxBDSEventID = await _service.GetMaxIdAsync(TableNames.BDS_Dependent_TNA_Calander, BDCalander.Count);
                    int maxYLID = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_YARN_LIABILITIES, entityChildsLiabilitiesDistribution.Count(x => x.EntityState == EntityState.Added));
                    if (isBDS == 1 || isBDS == 3)
                    {
                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entityChilds.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entityChilds.Count);
                    }
                    entityFreeConcepts = new List<FreeConceptMaster>();
                    childColors = new List<FreeConceptChildColor>();

                    entityFreeMRs = new List<FreeConceptMRMaster>();
                    childMRs = new List<FreeConceptMRChild>();

                    int i = 0;
                    entityChilds.ForEach(item =>
                    {
                        int bChildID = maxChildId++; //item.BookingChildID;
                        item.AcknowledgeID = entity.FBAckID;
                        item.AddedBy = entity.AddedBy;
                        if (item.SubGroupID == 11 || item.SubGroupID == 12) item.MachineDia = 0;

                        #region BDSDependentTNACalander

                        BDCalander.Where(x => x.BookingChildID == item.BookingChildID).ToList().ForEach(addProcess =>
                        {
                            addProcess.BDSEventID = maxBDSEventID++;
                            addProcess.BookingID = item.BookingID;
                            addProcess.BookingChildID = bChildID;
                        });

                        #endregion BDSDependentTNACalander

                        item.BookingChildID = bChildID;

                        #region FBookingAcknowledgeChildAddProcess

                        entityChildAddProcess.Where(x => x.ConsumptionID == item.ConsumptionID && x.BookingID == item.BookingID).ToList().ForEach(addProcess =>
                        {
                            addProcess.BookingCAddProcessID = maxChildAddProcessId++;
                            addProcess.BookingChildID = item.BookingChildID;
                        });

                        #endregion FBookingAcknowledgeChildAddProcess
                        entityChildsLiabilitiesDistribution.Where(x => x.LChildID == 0 && x.EntityState == EntityState.Added).ToList().ForEach(x =>
                        {
                            x.LChildID = maxLCID++;
                        });
                        #region FBookingAcknowledgeChildDetails

                        entityChildDetails.Where(x => x.ConsumptionID == item.ConsumptionID && x.BookingID == item.BookingID).ToList().ForEach(details =>
                        {
                            details.BookingCDetailsID = maxChildDetailsId++;
                            details.AddedBy = entity.AddedBy;
                            details.DateAdded = DateTime.Now;
                            details.BookingChildID = item.BookingChildID;
                        });

                        #endregion FBookingAcknowledgeChildDetails

                        #region FBookingAcknowledgeChildGarmentPart

                        entityChildsGpart.Where(x => x.ConsumptionID == item.ConsumptionID && x.BookingID == item.BookingID).ToList().ForEach(garmentPart =>
                        {
                            garmentPart.BookingCGPID = maxChildGarmentPartId++;
                            garmentPart.BookingChildID = item.BookingChildID;
                        });

                        #endregion FBookingAcknowledgeChildGarmentPart

                        #region FBookingAcknowledgeChildProcess

                        entityChildsProcess.Where(x => x.ConsumptionID == item.ConsumptionID && x.BookingID == item.BookingID).ToList().ForEach(process =>
                        {
                            process.BookingCProcessID = maxChildProcessId++;
                            process.BookingChildID = item.BookingChildID;
                        });

                        #endregion FBookingAcknowledgeChildProcess

                        #region FBookingAcknowledgeChildText

                        entityChildsText.Where(x => x.ConsumptionID == item.ConsumptionID && x.BookingID == item.BookingID).ToList().ForEach(text =>
                        {
                            text.TextID = maxChildTextId++;
                            text.BookingChildID = item.BookingChildID;
                        });

                        #endregion FBookingAcknowledgeChildText

                        #region FBookingAcknowledgeChildDistribution

                        entityChildsDistribution.Where(x => x.ConsumptionID == item.ConsumptionID && x.BookingID == item.BookingID).ToList().ForEach(distribution =>
                        {
                            distribution.DistributionID = maxChildDistributionId++;
                            distribution.BookingChildID = item.BookingChildID;
                        });

                        #endregion FBookingAcknowledgeChildDistribution

                        #region FBookingAcknowledgeChildYarnSubBrand

                        entityChildsYarnSubBrand.Where(x => x.ConsumptionID == item.ConsumptionID && x.BookingID == item.BookingID).ToList().ForEach(subBrand =>
                        {
                            subBrand.BookingCYSubBrandID = maxChildYarnSubBrandId++;
                            subBrand.BookingChildID = item.BookingChildID;
                        });

                        #endregion FBookingAcknowledgeChildYarnSubBrand

                        #region FBAChildPlanning

                        #region Remove multiple data for dyeing criteria (From 21 to 25 is dyeing Criteria) - Dyeing all time single item
                        List<FBAChildPlanning> dyeingPlans = item.FBAChildPlannings.Where(p => p.CriteriaID >= 21 && p.CriteriaID <= 25).ToList();
                        if (dyeingPlans.Count() > 1)
                        {
                            int lastDyeingCriteriaID = dyeingPlans.Last().CriteriaID;
                            item.FBAChildPlannings.Where(p => p.CriteriaID != lastDyeingCriteriaID && p.CriteriaID >= 21 && p.CriteriaID <= 25).ToList().Where(x => x.FBAChildPlanningID > 0).ToList().ForEach(pc =>
                            {
                                pc.EntityState = EntityState.Deleted;
                            });
                            item.FBAChildPlannings.RemoveAll(p => p.FBAChildPlanningID == 0 && p.CriteriaID != lastDyeingCriteriaID && p.CriteriaID >= 21 && p.CriteriaID <= 25);
                        }
                        #endregion

                        #region Remove multiple data for Testing criteria (From 18 to 20 is dyeing Criteria) - Testing all time single item
                        List<FBAChildPlanning> testingPlans = item.FBAChildPlannings.Where(p => p.CriteriaID >= 18 && p.CriteriaID <= 20).ToList();
                        if (testingPlans.Count() > 1)
                        {
                            int lastTestingCriteriaID = testingPlans.Last().CriteriaID;
                            //item.FBAChildPlannings.RemoveAll(p => p.CriteriaID != lastTestingCriteriaID && p.CriteriaID >= 18 && p.CriteriaID <= 20);
                            item.FBAChildPlannings.Where(p => p.CriteriaID != lastTestingCriteriaID && p.CriteriaID >= 18 && p.CriteriaID <= 20).ToList().Where(x => x.FBAChildPlanningID > 0).ToList().ForEach(pc =>
                            {
                                pc.EntityState = EntityState.Deleted;
                            });
                            item.FBAChildPlannings.RemoveAll(p => p.FBAChildPlanningID == 0 && p.CriteriaID != lastTestingCriteriaID && p.CriteriaID >= 18 && p.CriteriaID <= 20);
                        }
                        #endregion

                        item.FBAChildPlannings.ForEach(planning =>
                        {
                            planning.FBAChildPlanningID = maxPlanningId++;
                            planning.BookingChildID = item.BookingChildID;
                            planning.AcknowledgeID = entity.FBAckID;
                        });

                        #endregion FBAChildPlanning

                        if (item.EntityState != EntityState.Deleted)
                        {
                            if (entity.EntityState == EntityState.Added && (isBDS == 1 || isBDS == 3))
                            {
                                #region FreeConceptMaster & FreeConceptMRMaster

                                FreeConceptMaster concept = new FreeConceptMaster();
                                FreeConceptMRMaster conceptMR = new FreeConceptMRMaster();

                                int conceptID = maxConceptId++;
                                string conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);
                                var freeConcept = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                                entityFreeConcepts.Add(freeConcept);

                                if (!string.IsNullOrEmpty(freeConcept.Color))
                                {
                                    int conceptChildId = maxConceptChildId++;
                                    var colorChild = this.GetFreeConceptColorChild(item, freeConcept, conceptChildId);
                                    childColors.Add(colorChild);
                                }

                                if (isBDS == 2 && item.ChildItems.Count() > 0)
                                {
                                    int fCMRMasterID = maxConceptMRId++;
                                    var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                    entityFreeMRs.Add(freeConceptMR);

                                    item.ChildItems.ForEach(ybci =>
                                    {
                                        int mRChildId = maxConceptMRChildId++;
                                        var fBAChildDetail = this.GetFBookingAcknowledgeChildDetail(maxFBAckChildDetailId++, item, entity, ybci);
                                        entityChildDetails.Add(fBAChildDetail);
                                        var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                        childMRs.Add(mrChild);
                                    });
                                }
                                i++;

                                #endregion FreeConceptMaster & FreeConceptMRMaster
                            }
                        }
                    });
                    entityFBYL.Where(x => x.EntityState == EntityState.Added).ToList().ForEach(x =>
                    {
                        x.YLChildID = maxYLID++;

                    });
                    if (isBDS == 2 && entity.EntityState == EntityState.Added)
                    {
                        var tempObjList = new List<dynamic>();
                        var maxChildCount = 0;

                        entityChilds.ForEach(item =>
                        {
                            maxChildCount += item.ChildItems.Count();

                            var tObj = tempObjList.Find(x => x.BookingID == item.BookingID &&
                                                           x.ItemMasterID == item.ItemMasterID &&
                                                           x.SubGroupID == item.SubGroupID);
                            if (tObj == null)
                            {
                                dynamic tempObj = new System.Dynamic.ExpandoObject();
                                tempObj.BookingID = item.BookingID;
                                tempObj.ItemMasterID = item.ItemMasterID;
                                tempObj.SubGroupID = item.SubGroupID;
                                tempObjList.Add(tempObj);
                            }
                        });

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, tempObjList.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, tempObjList.Count);

                        if (isBDS == 2)
                        {
                            entityChildDetails = new List<FBookingAcknowledgeChildDetails>();
                            maxConceptMRId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_MASTER, tempObjList.Count);
                            maxConceptMRChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_CHILD, maxChildCount);
                            maxFBAckChildDetailId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_DETAILS, maxChildCount);
                        }
                        i = 0;

                        tempObjList.ForEach(tempObj =>
                        {
                            var fbaChilds = entityChilds.Where(x => x.BookingID == tempObj.BookingID &&
                                                                    x.ItemMasterID == tempObj.ItemMasterID &&
                                                                    x.SubGroupID == tempObj.SubGroupID).ToList();

                            List<YarnBookingChildItem> ChildItems = new List<YarnBookingChildItem>();
                            fbaChilds.ForEach(x => ChildItems.AddRange(x.ChildItems));

                            #region FreeConceptMaster

                            int conceptID = maxConceptId++;
                            string conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);

                            decimal height = 0,
                                    length = 0;

                            fbaChilds.ForEach(childObj =>
                            {
                                height += childObj.Height.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Height) : 0;
                                length += childObj.Length.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Length) : 0;
                            });

                            FBookingAcknowledgeChild fbaChild = new FBookingAcknowledgeChild();
                            fbaChild = fbaChilds.FirstOrDefault();
                            fbaChild.BookingQty = fbaChilds.Sum(x => x.BookingQty);
                            fbaChild.Height = height.ToString();
                            fbaChild.Length = length.ToString();

                            var freeConcept = this.GetFreeConceptMaster(fbaChild, entity, isBDS, conceptID, conceptNo, true); //true means group by ItemMasterID and BookingID
                            entityFreeConcepts.Add(freeConcept);

                            #endregion FreeConceptMaster

                            #region FreeConceptColorChild

                            if (!string.IsNullOrEmpty(freeConcept.Color))
                            {
                                int conceptChildId = maxConceptChildId++;
                                var colorChild = this.GetFreeConceptColorChild(fbaChild, freeConcept, conceptChildId);
                                childColors.Add(colorChild);
                            }

                            #endregion FreeConceptColorChild

                            #region FreeConceptMR

                            if (isBDS == 2 && ChildItems.Count() > 0)
                            {
                                int fCMRMasterID = maxConceptMRId++;
                                var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                entityFreeMRs.Add(freeConceptMR);

                                ChildItems.ForEach(ybci =>
                                {
                                    int mRChildId = maxConceptMRChildId++;
                                    var fBAChildDetail = this.GetFBookingAcknowledgeChildDetail(maxFBAckChildDetailId++, fbaChild, entity, ybci);
                                    entityChildDetails.Add(fBAChildDetail);
                                    ybci.ItemMasterID = tempObj.ItemMasterID;
                                    ybci = this.CheckAndSetSegmentValueDesc(ybci, tempObj);
                                    //Segment1ValueDesc


                                    var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                    childMRs.Add(mrChild);
                                });
                            }
                            #endregion
                            i++;
                        });

                        tempObjList.ForEach(tempObj =>
                        {
                            var fbaChilds = entityChilds.Where(x => x.BookingID == tempObj.BookingID &&
                                                                    x.ItemMasterID == tempObj.ItemMasterID &&
                                                                    x.SubGroupID == tempObj.SubGroupID).ToList();

                            List<YarnBookingChildItem> ChildItems = new List<YarnBookingChildItem>();
                            fbaChilds.ForEach(x => ChildItems.AddRange(x.ChildItems));

                            #region FreeConceptMaster

                            int conceptID = maxConceptId++;
                            string conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);

                            decimal height = 0,
                                    length = 0;

                            fbaChilds.ForEach(childObj =>
                            {
                                height += childObj.Height.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Height) : 0;
                                length += childObj.Length.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Length) : 0;
                            });

                            FBookingAcknowledgeChild fbaChild = new FBookingAcknowledgeChild();
                            fbaChild = fbaChilds.FirstOrDefault();
                            fbaChild.BookingQty = fbaChilds.Sum(x => x.BookingQty);
                            fbaChild.Height = height.ToString();
                            fbaChild.Length = length.ToString();

                            var freeConcept = this.GetFreeConceptMaster(fbaChild, entity, isBDS, conceptID, conceptNo, true); //true means group by ItemMasterID and BookingID
                            entityFreeConcepts.Add(freeConcept);

                            #endregion FreeConceptMaster

                            #region FreeConceptColorChild

                            if (!string.IsNullOrEmpty(freeConcept.Color))
                            {
                                int conceptChildId = maxConceptChildId++;
                                var colorChild = this.GetFreeConceptColorChild(fbaChild, freeConcept, conceptChildId);
                                childColors.Add(colorChild);
                            }

                            #endregion FreeConceptColorChild

                            #region FreeConceptMR

                            if (isBDS == 2 && ChildItems.Count() > 0)
                            {
                                int fCMRMasterID = maxConceptMRId++;
                                var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                entityFreeMRs.Add(freeConceptMR);

                                ChildItems.ForEach(ybci =>
                                {
                                    int mRChildId = maxConceptMRChildId++;
                                    var fBAChildDetail = this.GetFBookingAcknowledgeChildDetail(maxFBAckChildDetailId++, fbaChild, entity, ybci);
                                    entityChildDetails.Add(fBAChildDetail);
                                    ybci.ItemMasterID = tempObj.ItemMasterID;
                                    ybci = this.CheckAndSetSegmentValueDesc(ybci, tempObj);
                                    var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                    childMRs.Add(mrChild);
                                });
                            }
                            #endregion

                            i++;
                        });
                    }

                    #region FBookingAcknowledgeImage

                    entityChildsImage.ForEach(img =>
                    {
                        img.ChildImgID = maxImageId++;
                    });
                    #endregion FBookingAcknowledgeImage
                }
                //entity.AddedBy = 0;

                //string validationMessage = FBookingAcknowledgeValidation.IsValidFBookingAcknowledge(entity);
                //if (validationMessage.Trim() != "")
                //{
                //    throw new Exception(validationMessage);
                //}

                await _service.SaveSingleAsync(entity, transaction);
                //await _service.ValidationSingleAsync(entity, transaction, "sp_Validation_FBookingAcknowledge", entity.EntityState, UserId, entity.FBAckID);
                await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge", new { EntityState = entity.EntityState, UserId = UserId, PrimaryKeyId = entity.FBAckID }, transaction, 30, CommandType.StoredProcedure);

                List<FBookingAcknowledgeChild> SaveEntityChilds = new List<FBookingAcknowledgeChild>();
                List<FBookingAcknowledgeChild> DeleteEntityChilds = new List<FBookingAcknowledgeChild>();
                SaveEntityChilds = entityChilds.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChilds = entityChilds.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgeChildAddProcess> SaveEntityChildAddProcess = new List<FBookingAcknowledgeChildAddProcess>();
                List<FBookingAcknowledgeChildAddProcess> DeleteEntityChildAddProcess = new List<FBookingAcknowledgeChildAddProcess>();
                SaveEntityChildAddProcess = entityChildAddProcess.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildAddProcess = entityChildAddProcess.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgeChildDetails> SaveEntityChildDetails = new List<FBookingAcknowledgeChildDetails>();
                List<FBookingAcknowledgeChildDetails> DeleteEntityChildDetails = new List<FBookingAcknowledgeChildDetails>();
                SaveEntityChildDetails = entityChildDetails.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildDetails = entityChildDetails.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgeChildGarmentPart> SaveEntityChildsGpart = new List<FBookingAcknowledgeChildGarmentPart>();
                List<FBookingAcknowledgeChildGarmentPart> DeleteEntityChildsGpart = new List<FBookingAcknowledgeChildGarmentPart>();
                SaveEntityChildsGpart = entityChildsGpart.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildsGpart = entityChildsGpart.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgeChildProcess> SaveEntityChildsProcess = new List<FBookingAcknowledgeChildProcess>();
                List<FBookingAcknowledgeChildProcess> DeleteEntityChildsProcess = new List<FBookingAcknowledgeChildProcess>();
                SaveEntityChildsProcess = entityChildsProcess.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildsProcess = entityChildsProcess.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgeChildText> SaveEntityChildsText = new List<FBookingAcknowledgeChildText>();
                List<FBookingAcknowledgeChildText> DeleteEntityChildsText = new List<FBookingAcknowledgeChildText>();
                SaveEntityChildsText = entityChildsText.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildsText = entityChildsText.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgeChildDistribution> SaveEntityChildsDistribution = new List<FBookingAcknowledgeChildDistribution>();
                List<FBookingAcknowledgeChildDistribution> DeleteEntityChildsDistribution = new List<FBookingAcknowledgeChildDistribution>();
                SaveEntityChildsDistribution = entityChildsDistribution.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildsDistribution = entityChildsDistribution.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgementYarnLiability> SaveEntityChildsLiability = new List<FBookingAcknowledgementYarnLiability>();
                List<FBookingAcknowledgementYarnLiability> DeleteEntityChildsLiability = new List<FBookingAcknowledgementYarnLiability>();
                SaveEntityChildsLiability = entityFBYL.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildsLiability = entityFBYL.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgeChildYarnSubBrand> SaveEntityChildsYarnSubBrand = new List<FBookingAcknowledgeChildYarnSubBrand>();
                List<FBookingAcknowledgeChildYarnSubBrand> DeleteEntityChildsYarnSubBrand = new List<FBookingAcknowledgeChildYarnSubBrand>();
                SaveEntityChildsYarnSubBrand = entityChildsYarnSubBrand.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildsYarnSubBrand = entityChildsYarnSubBrand.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBookingAcknowledgementLiabilityDistribution> SaveFBookingAcknowledgementLiabilityDistribution = new List<FBookingAcknowledgementLiabilityDistribution>();
                List<FBookingAcknowledgementLiabilityDistribution> DeleteFBookingAcknowledgementLiabilityDistribution = new List<FBookingAcknowledgementLiabilityDistribution>();
                SaveFBookingAcknowledgementLiabilityDistribution = entityChildsLiabilitiesDistribution.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteFBookingAcknowledgementLiabilityDistribution = entityChildsLiabilitiesDistribution.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FabricBookingAcknowledge> SaveFabricBookingAcknowledge = new List<FabricBookingAcknowledge>();
                List<FabricBookingAcknowledge> DeleteFabricBookingAcknowledge = new List<FabricBookingAcknowledge>();

                if (entityFBA.IsNotNull())
                {
                    SaveFabricBookingAcknowledge = entityFBA.Where(x => x.EntityState != EntityState.Deleted).ToList();
                    DeleteFabricBookingAcknowledge = entityFBA.Where(x => x.EntityState == EntityState.Deleted).ToList();
                }

                List<FBookingAcknowledgeImage> SaveEntityChildsImage = new List<FBookingAcknowledgeImage>();
                List<FBookingAcknowledgeImage> DeleteEntityChildsImage = new List<FBookingAcknowledgeImage>();
                SaveEntityChildsImage = entityChildsImage.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityChildsImage = entityChildsImage.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptMaster> SaveEntityFreeConcepts = new List<FreeConceptMaster>();
                List<FreeConceptMaster> DeleteEntityFreeConcepts = new List<FreeConceptMaster>();
                SaveEntityFreeConcepts = entityFreeConcepts.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityFreeConcepts = entityFreeConcepts.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptChildColor> SaveChildColors = new List<FreeConceptChildColor>();
                List<FreeConceptChildColor> DeleteChildColors = new List<FreeConceptChildColor>();
                SaveChildColors = childColors.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteChildColors = childColors.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptMRMaster> SaveEntityFreeMRs = new List<FreeConceptMRMaster>();
                List<FreeConceptMRMaster> DeleteEntityFreeMRs = new List<FreeConceptMRMaster>();
                SaveEntityFreeMRs = entityFreeMRs.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityFreeMRs = entityFreeMRs.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptMRChild> SaveChildMRs = new List<FreeConceptMRChild>();
                List<FreeConceptMRChild> DeleteChildMRs = new List<FreeConceptMRChild>();
                SaveChildMRs = childMRs.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteChildMRs = childMRs.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<BDSDependentTNACalander> SaveBDCalander = new List<BDSDependentTNACalander>();
                List<BDSDependentTNACalander> DeleteBDCalander = new List<BDSDependentTNACalander>();
                SaveBDCalander = BDCalander.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteBDCalander = BDCalander.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FBAChildPlanning> plannings = new List<FBAChildPlanning>();
                entityChilds.ForEach(child =>
                {
                    plannings.AddRange(child.FBAChildPlannings);
                });
                List<FBAChildPlanning> SavePlannings = new List<FBAChildPlanning>();
                List<FBAChildPlanning> DeletePlannings = new List<FBAChildPlanning>();
                SavePlannings = plannings.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeletePlannings = plannings.Where(x => x.EntityState == EntityState.Deleted).ToList();

                //Delete
                if (DeleteFabricBookingAcknowledge.Count() > 0)
                {
                    await _service.SaveAsync(DeleteFabricBookingAcknowledge, transaction);
                }
                await _service.SaveAsync(DeleteEntityChilds, transaction);
                await _service.SaveAsync(DeleteEntityChildAddProcess, transaction);
                await _service.SaveAsync(DeleteEntityChildDetails, transaction);
                await _service.SaveAsync(DeleteEntityChildsGpart, transaction);
                await _service.SaveAsync(DeleteEntityChildsProcess, transaction);
                await _service.SaveAsync(DeleteEntityChildsText, transaction);
                await _service.SaveAsync(DeleteEntityChildsDistribution, transaction);
                await _service.SaveAsync(DeleteEntityChildsYarnSubBrand, transaction);
                await _service.SaveAsync(DeleteFBookingAcknowledgementLiabilityDistribution, transaction);
                await _service.SaveAsync(DeleteEntityChildsLiability, transaction);
                await _service.SaveAsync(DeleteEntityChildsImage, transaction);
                await _service.SaveAsync(DeleteEntityFreeConcepts, transaction);
                await _service.SaveAsync(DeleteChildColors, transaction);
                if (isBDS == 2)
                {
                    await _service.SaveAsync(DeleteEntityFreeMRs, transaction);
                    await _service.SaveAsync(DeleteChildMRs, transaction);
                }
                await _service.SaveAsync(DeleteBDCalander, transaction);
                await _service.SaveAsync(DeletePlannings, transaction);

                //Save
                if (SaveFabricBookingAcknowledge.Count() > 0)
                {
                    await _service.SaveAsync(SaveFabricBookingAcknowledge, transaction);
                }

                if (isBDS == 2 && FBAListForBulk.Count() > 0)
                {
                    await _service.SaveAsync(FBAListForBulk, transaction);
                }

                await _service.SaveAsync(SaveEntityChilds, transaction);
                await _service.SaveAsync(SaveEntityChildAddProcess, transaction);
                await _service.SaveAsync(SaveEntityChildDetails, transaction);
                await _service.SaveAsync(SaveEntityChildsGpart, transaction);
                await _service.SaveAsync(SaveEntityChildsProcess, transaction);
                await _service.SaveAsync(SaveEntityChildsText, transaction);
                await _service.SaveAsync(SaveEntityChildsDistribution, transaction);
                await _service.SaveAsync(SaveEntityChildsYarnSubBrand, transaction);
                await _service.SaveAsync(SaveFBookingAcknowledgementLiabilityDistribution, transaction);
                await _service.SaveAsync(SaveEntityChildsLiability, transaction);
                await _service.SaveAsync(SaveEntityChildsImage, transaction);

                //SaveEntityFreeConcepts[0].AddedBy = 0;

                //string FCMvalidationMessage = FreeConceptMasterValidation.IsValidFreeConceptMaster(SaveEntityFreeConcepts);
                //if (FCMvalidationMessage.Trim() != "")
                //{
                //    throw new Exception(FCMvalidationMessage);
                //}

                await _service.SaveAsync(SaveEntityFreeConcepts, transaction);

                foreach (FreeConceptMaster item in SaveEntityFreeConcepts)
                {
                    //await _service.ValidationSingleAsync(entity, transaction, "sp_Validation_FreeConceptMaster", item.EntityState, UserId, item.ConceptID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMaster", new { EntityState = item.EntityState, UserId = UserId, PrimaryKeyId = item.ConceptID }, transaction, 30, CommandType.StoredProcedure);

                }

                //foreach (FreeConceptMaster item in SaveEntityFreeConcepts)
                //{
                //    await _connection.ExecuteAsync("sp_Validation_FreeConceptMaster", new { ConceptID = item.ConceptID, UserId = UserId, EntityState = item.EntityState }, transaction, 30, CommandType.StoredProcedure);
                //}

                await _service.SaveAsync(SaveChildColors, transaction);
                if (isBDS == 2)
                {
                    await _service.SaveAsync(SaveEntityFreeMRs, transaction);
                    //var childsTemp = SaveChildMRs.Where(x => x.YarnCategory.Trim() == "").ToList();
                    //if (childsTemp.Count() > 0)
                    //{
                    //    throw new Exception("Yarn Category missing => SaveAsync => BDSAcknowledgeService");
                    //}
                    await _service.SaveAsync(SaveChildMRs, transaction);
                }
                await _service.SaveAsync(SaveBDCalander, transaction);
                await _service.SaveAsync(SavePlannings, transaction);

                #region Update For Labdip
                if (sampleBookingChilds.Count() > 0)
                {
                    string sbcQuery = "";
                    sampleBookingChilds.ForEach(c =>
                    {
                        if (c.BookingID > 0 && c.ConsumptionID > 0)
                        {
                            int isFabricReq = c.IsFabricReq ? 1 : 0;
                            sbcQuery += $@";UPDATE {DbNames.EPYSL}..SampleBookingConsumption SET ConsumptionQty = {c.ConsumptionQty}, IsFabricReq = {isFabricReq} WHERE BookingID = {c.BookingID} AND ConsumptionID = {c.ConsumptionID}";
                        }
                    });

                    if (sbcQuery.IsNotNullOrEmpty())
                    {
                        await _gmtservice.ExecuteAsync(sbcQuery, AppConstants.GMT_CONNECTION);
                    }
                }
                #endregion

                #region Sample Booking Master

                var query = "";
                if (entity.IsUnAcknowledge)
                    query = $@"Update {DbNames.EPYSL}..SampleBookingMaster Set UnAcknowledge = 1, UnAcknowledgeReason = '{entity.UnAcknowledgeReason}' Where BookingID = {entity.BookingID}";
                else
                    query = $@"Update {DbNames.EPYSL}..SampleBookingMaster Set Acknowledge = 1 Where BookingID ={entity.BookingID}";
                await _gmtservice.ExecuteAsync(query, AppConstants.GMT_CONNECTION);

                #endregion Sample Booking Master

                //query = $@"Insert into {DbNames.EPYSLTEX}..HostApplication Values( '{hostName}')";
                //await _gmtservice.ExecuteAsync(query, AppConstants.GMT_CONNECTION);

                transaction.Commit();
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }




        private YarnBookingChildItem CheckAndSetSegmentValueDesc(YarnBookingChildItem ybci, dynamic tempObj)
        {
            if (ybci.Segment1ValueDesc.IsNullOrEmpty()) ybci = tempObj.Segment1ValueDesc;
            if (ybci.Segment2ValueDesc.IsNullOrEmpty()) ybci = tempObj.Segment2ValueDesc;
            if (ybci.Segment3ValueDesc.IsNullOrEmpty()) ybci = tempObj.Segment3ValueDesc;
            if (ybci.Segment4ValueDesc.IsNullOrEmpty()) ybci = tempObj.Segment4ValueDesc;
            if (ybci.Segment5ValueDesc.IsNullOrEmpty()) ybci = tempObj.Segment5ValueDesc;
            if (ybci.Segment6ValueDesc.IsNullOrEmpty()) ybci = tempObj.Segment6ValueDesc;
            if (ybci.Segment7ValueDesc.IsNullOrEmpty()) ybci = tempObj.Segment7ValueDesc;
            return ybci;
        }
        public async Task<string> SaveAsyncBulk(int userId, FBookingAcknowledge entity, List<FBookingAcknowledge> entities, bool isAddition, List<FreeConceptMRChild> mcChilds)
        {
            SqlTransaction transaction = null;
            try
            {
                //if (entity.IsReviseBBKI)
                //{
                //    await _service.ExecuteAsync("spBackupFBookingAcknowledge", new { UserId = entity.UserId, BookingId = entity.BookingID, IsReviseBBKI = true, IsReviseLabdip = false }, 30, CommandType.StoredProcedure);
                //}

                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();

                List<YarnBookingMaster> yarnBookings = new List<YarnBookingMaster>();
                //if (!entity.IsUnAcknowledge)
                //{
                if (entity.YarnBookings.Count() > 0)
                {
                    yarnBookings = await this.GetYarnBookingForUpdate(entity.YarnBookings, entity, isAddition);
                }
                else if (!entity.HasYarnBooking)
                {
                    yarnBookings = await this.GetYarnBooking(entity, isAddition);
                }
                //}

                #region Finishing Process Operation
                entity = await this.GetFinishingProcess(entity);
                #endregion

                List<FBookingAcknowledgeChildDetails> fBookingAcknowledgeChildDetails = new List<FBookingAcknowledgeChildDetails>();
                List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                List<YarnBookingChildItem> yarnBookingChildItems = new List<YarnBookingChildItem>();
                /*List<BulkBookingGreyYarnUtilization> greyYarnUtPopUpList = new List<BulkBookingGreyYarnUtilization>(); //Saif
                List<BulkBookingDyedYarnUtilization> dyedYarnUtPopUpList = new List<BulkBookingDyedYarnUtilization>();
                List<BulkBookingFinishFabricUtilization> finishFabricUtPopUpList = new List<BulkBookingFinishFabricUtilization>();
                List<FBookingAcknowledgeChildGFUtilization> greyFabricUtPopUpList = new List<FBookingAcknowledgeChildGFUtilization>();*/

                //if (!entity.IsUnAcknowledge)
                //{
                yarnBookings.ForEach(yb =>
                {
                    yarnBookingChilds.AddRange(yb.Childs);
                    yarnBookingChildItems.AddRange(yb.ChildItems);
                });
                /*yarnBookingChilds.ForEach(ybc =>//saif
                {
                    finishFabricUtPopUpList.AddRange(ybc.FinishFabricUtilizationPopUpList);
                    greyFabricUtPopUpList.AddRange(ybc.GreyFabricUtilizationPopUpList);
                });
                yarnBookingChildItems.ForEach(ybci =>
                {
                    greyYarnUtPopUpList.AddRange(ybci.GreyYarnUtilizationPopUpList);
                    dyedYarnUtPopUpList.AddRange(ybci.DyedYarnUtilizationPopUpList);
                });*/
                //}


                /*
                ybChilds.ForEach(c =>
                {
                    fFUtilizationList.AddRange(c.FinishFabricUtilizationPopUpList);
                    gFUtilizationList.AddRange(c.GreyFabricUtilizationPopUpList);
                });
                await _service.SaveAsync(fFUtilizationList, transaction);
                await _service.SaveAsync(gFUtilizationList, transaction);
                */

                if (!isAddition)
                {
                    await _service.SaveSingleAsync(entity, transaction);
                    //await _service.ValidationSingleAsync(entity, transaction, "sp_Validation_FBookingAcknowledge_1", entity.EntityState, userId, entity.FBAckID);
                    await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.FBAckID }, transaction, 30, CommandType.StoredProcedure);

                    await _service.SaveAsync(entity.FBookingChild, transaction);
                    foreach (FBookingAcknowledgeChild item in entity.FBookingChild)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledgeChild_1", item.EntityState, userId, item.BookingChildID, item.ConsumptionID, item.BookingID, item.ItemMasterID, item.AcknowledgeID);
                        await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledgeChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.BookingChildID, SecondParamValue = item.ConsumptionID, ThirdParamValue = item.BookingID, ForthParamValue = item.ItemMasterID, FifthParamValue = item.AcknowledgeID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                /*
                yarnBookingChilds = await this.GetYBChilds(yarnBookingChilds);
                */

                yarnBookingChilds = await this.GetYBChilds_ForUtilizationPOPUP(yarnBookingChilds);
                List<BulkBookingFinishFabricUtilization> fFUtilizationList = new List<BulkBookingFinishFabricUtilization>();
                List<FBookingAcknowledgeChildGFUtilization> gFUtilizationList = new List<FBookingAcknowledgeChildGFUtilization>();

                await _service.SaveAsync(yarnBookings, transaction);
                foreach (YarnBookingMaster item in yarnBookings)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChilds, transaction);
                foreach (YarnBookingChild item in yarnBookingChilds)
                {
                    //if (item.EntityState != EntityState.Deleted)
                    //{
                    //    decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                    //    if (totalDis != 100)
                    //    {
                    //        throw new Exception("Total Distribution Qty is not 100%. => SaveAsyncBulk => BDSAcknowledgeService");
                    //    }
                    //}

                    if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                    {
                        throw new Exception("Qty In KG missing => SaveAsyncBulk => BDSAcknowledgeService");
                    }
                    int countChildItem = yarnBookingChildItems.Count(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted);
                    if (countChildItem == 0 && item.EntityState != EntityState.Deleted)
                    {
                        throw new Exception("Yarn Item missing => SaveAsyncBulkAddition => BDSAcknowledgeService");
                    }
                    fFUtilizationList.AddRange(item.FinishFabricUtilizationPopUpList);
                    gFUtilizationList.AddRange(item.GreyFabricUtilizationPopUpList);

                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChild_1", item.EntityState, userId, item.YBChildID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChildItems, transaction);
                foreach (YarnBookingChildItem item in yarnBookingChildItems)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChildItem_1", item.EntityState, userId, item.YBChildItemID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChildItem_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildItemID }, transaction, 30, CommandType.StoredProcedure);
                }


                /*await _service.SaveAsync(finishFabricUtPopUpList, transaction); //Saif
                await _service.SaveAsync(greyFabricUtPopUpList, transaction);
                await _service.SaveAsync(greyYarnUtPopUpList, transaction);
                await _service.SaveAsync(dyedYarnUtPopUpList, transaction);*/

                await _service.SaveAsync(fFUtilizationList, transaction);
                await _service.SaveAsync(gFUtilizationList, transaction);


                if (!isAddition && !entity.IsUnAcknowledge)
                {
                    #region Finishing Process

                    List<FBookingAckChildFinishingProcess> FPChilds = new List<FBookingAckChildFinishingProcess>();
                    List<FBookingAckChildFinishingProcessItem> FPChildItems = new List<FBookingAckChildFinishingProcessItem>();
                    entity.FBookingChild.ForEach(c =>
                    {
                        c.PreFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                        c.PostFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                    });
                    await _service.SaveAsync(FPChilds, transaction);
                    await _service.SaveAsync(FPChildItems, transaction);

                    #endregion
                }

                if (entities.Count() > 0) //Use only for knitting head check or reject
                {
                    await _service.SaveAsync(entities, transaction);
                    foreach (FBookingAcknowledge item in entities)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledge_1", item.EntityState, userId, item.FBAckID);
                        await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FBAckID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                await _service.SaveAsync(mcChilds, transaction);
                foreach (FreeConceptMRChild item in mcChilds)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, userId, item.FCMRChildID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                }

                transaction.Commit();

                return _yarnBookingNo;
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        public async Task<string> SaveAsyncBulkAddition(int userId, FBookingAcknowledge entity, List<FBookingAcknowledge> entities, bool isAddition, List<FreeConceptMRChild> mcChilds, bool isUpdateAddition = false, List<YarnBookingMaster_New_RevisionReason> RevisionReasonList = null, bool isRevisedYarn = false)
        {//--
            SqlTransaction transaction = null;
            try
            {
                //if (entity.IsReviseBBKI)
                //{
                //    await _service.ExecuteAsync("spBackupFBookingAcknowledge", new { UserId = entity.UserId, BookingId = entity.BookingID, IsReviseBBKI = true, IsReviseLabdip = false }, 30, CommandType.StoredProcedure);
                //}

                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();

                List<YarnBookingMaster> yarnBookings = new List<YarnBookingMaster>();
                if (!entity.IsUnAcknowledge)
                {
                    if (entity.YarnBookings.Count() > 0)
                    {
                        yarnBookings = await this.GetYarnBookingForUpdate(entity.YarnBookings, entity, isAddition, isUpdateAddition);
                    }
                    else if (!entity.HasYarnBooking)
                    {
                        yarnBookings = await this.GetYarnBooking(entity, isAddition);
                    }
                }

                #region Finishing Process Operation
                entity = await this.GetFinishingProcess(entity);
                #endregion

                List<FBookingAcknowledgeChildDetails> fBookingAcknowledgeChildDetails = new List<FBookingAcknowledgeChildDetails>();
                List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                List<YarnBookingChildItem> yarnBookingChildItems = new List<YarnBookingChildItem>();
                List<BulkBookingGreyYarnUtilization> greyYarnUtPopUpList = new List<BulkBookingGreyYarnUtilization>();
                List<BulkBookingDyedYarnUtilization> dyedYarnUtPopUpList = new List<BulkBookingDyedYarnUtilization>();
                List<BulkBookingFinishFabricUtilization> finishFabricUtPopUpList = new List<BulkBookingFinishFabricUtilization>();
                List<FBookingAcknowledgeChildGFUtilization> greyFabricUtPopUpList = new List<FBookingAcknowledgeChildGFUtilization>();
                List<FBookingAcknowledgeChildReplacement> ReplacementPopUpList = new List<FBookingAcknowledgeChildReplacement>();
                List<FBookingAcknowledgeChildItemNetReqQTY> ReqQTYReplacementPopUpList = new List<FBookingAcknowledgeChildItemNetReqQTY>();

                if (!entity.IsUnAcknowledge)
                {
                    yarnBookings.ForEach(yb =>
                    {
                        yarnBookingChilds.AddRange(yb.Childs);
                        yarnBookingChildItems.AddRange(yb.ChildItems);
                    });
                    yarnBookingChilds.ForEach(ybc =>
                    {
                        finishFabricUtPopUpList.AddRange(ybc.FinishFabricUtilizationPopUpList);
                        greyFabricUtPopUpList.AddRange(ybc.GreyFabricUtilizationPopUpList);
                        ReplacementPopUpList.AddRange(ybc.AdditionalReplacementPOPUPList);
                    });
                    yarnBookingChildItems.ForEach(ybci =>
                    {
                        greyYarnUtPopUpList.AddRange(ybci.GreyYarnUtilizationPopUpList);
                        dyedYarnUtPopUpList.AddRange(ybci.DyedYarnUtilizationPopUpList);
                        ReqQTYReplacementPopUpList.AddRange(ybci.AdditionalNetReqPOPUPList);
                    });
                }

                if (!isAddition)
                {
                    await _service.SaveSingleAsync(entity, transaction);
                    //await _service.ValidationSingleAsync(entity, transaction, "sp_Validation_FBookingAcknowledge_1", entity.EntityState, userId, entity.FBAckID);
                    await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.FBAckID }, transaction, 30, CommandType.StoredProcedure);

                    await _service.SaveAsync(entity.FBookingChild, transaction);
                    foreach (FBookingAcknowledgeChild item in entity.FBookingChild)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledgeChild_1", item.EntityState, userId, item.BookingChildID, item.ConsumptionID, item.BookingID, item.ItemMasterID, item.AcknowledgeID);
                        await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledgeChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.BookingChildID, SecondParamValue = item.ConsumptionID, ThirdParamValue = item.BookingID, ForthParamValue = item.ItemMasterID, FifthParamValue = item.AcknowledgeID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                if ((entity.IsAdditionalRevise || isRevisedYarn) && yarnBookings[0].AcknowledgeCount > 0)
                {
                    await _connection.ExecuteAsync("spYarnBooking_BK", new { YBookingNo = yarnBookings[0].YBookingNo, IsFinalApprove = false, IsFinalReject = false, IsFabricRevision = true }, transaction, 30, CommandType.StoredProcedure);
                }

                await _service.SaveAsync(yarnBookings, transaction);
                foreach (YarnBookingMaster item in yarnBookings)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChilds, transaction);
                foreach (YarnBookingChild item in yarnBookingChilds)
                {
                    if (item.EntityState != EntityState.Deleted)
                    {
                        decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                        if (item.ChildItems.Count == 0)
                        {
                            totalDis = yarnBookingChildItems.Where(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                        }
                        if (totalDis != 100)
                        {
                            throw new Exception("Total Distribution Qty is not 100%. => SaveAsyncBulkAddition => BDSAcknowledgeService");
                        }
                    }

                    if (item.BookingUnitID == 1 && item.QtyInKG == 0 && isAddition == false)
                    {
                        throw new Exception("Qty In KG missing => SaveAsyncBulkAddition => BDSAcknowledgeService");
                    }
                    int countChildItem = yarnBookingChildItems.Count(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted);
                    if (countChildItem == 0 && item.EntityState != EntityState.Deleted)
                    {
                        throw new Exception("Yarn Item missing => SaveAsyncBulkAddition => BDSAcknowledgeService");
                    }
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChild_1", item.EntityState, userId, item.YBChildID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChildItems, transaction);
                foreach (YarnBookingChildItem item in yarnBookingChildItems)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChildItem_1", item.EntityState, userId, item.YBChildItemID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChildItem_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildItemID }, transaction, 30, CommandType.StoredProcedure);
                }


                await _service.SaveAsync(finishFabricUtPopUpList, transaction);
                await _service.SaveAsync(greyFabricUtPopUpList, transaction);
                await _service.SaveAsync(ReplacementPopUpList, transaction);
                await _service.SaveAsync(greyYarnUtPopUpList, transaction);
                await _service.SaveAsync(dyedYarnUtPopUpList, transaction);
                await _service.SaveAsync(ReqQTYReplacementPopUpList, transaction);

                if (!isAddition && !entity.IsUnAcknowledge)
                {
                    #region Finishing Process

                    List<FBookingAckChildFinishingProcess> FPChilds = new List<FBookingAckChildFinishingProcess>();
                    List<FBookingAckChildFinishingProcessItem> FPChildItems = new List<FBookingAckChildFinishingProcessItem>();
                    entity.FBookingChild.ForEach(c =>
                    {
                        c.PreFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                        c.PostFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                    });
                    await _service.SaveAsync(FPChilds, transaction);
                    await _service.SaveAsync(FPChildItems, transaction);

                    #endregion
                }
                if (!isAddition)
                {
                    if (entities.Count() > 0) //Use only for knitting head check or reject
                    {
                        await _service.SaveAsync(entities, transaction);
                        foreach (FBookingAcknowledge item in entities)
                        {
                            //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledge_1", item.EntityState, userId, item.FBAckID);
                            await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.FBAckID }, transaction, 30, CommandType.StoredProcedure);
                        }
                    }
                }
                //await _service.SaveAsync(mcChilds, transaction);
                foreach (FreeConceptMRChild item in mcChilds)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, userId, item.FCMRChildID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                }


                #region Yarn Booking Revision Reason

                await _connection.ExecuteAsync("spDeleteRevisionReason", new { YBookingNo = yarnBookings[0].YBookingNo }, transaction, 30, CommandType.StoredProcedure);

                if (RevisionReasonList.Count > 0)
                {
                    int maxChildId = 0;

                    maxChildId = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster_New_RevisionReason, RevisionReasonList.Count);
                    foreach (YarnBookingMaster_New_RevisionReason item in RevisionReasonList)
                    {
                        item.YBRReasonID = maxChildId++;
                    }
                    await _service.SaveAsync(RevisionReasonList, transaction);
                }

                #endregion

                //if ((entity.ParamTypeId == (int)ParamTypeId.AYBKnittingHeadApproval && (yarnBookings[0].PMCFinalApproveCount > 1) || (entity.IsReject && yarnBookings[0].PMCFinalApproveCount > 0)))
                if (entity.IsReject && yarnBookings[0].AcknowledgeCount > 0)
                {
                    await _connection.ExecuteAsync("spYarnBooking_BK", new { YBookingNo = yarnBookings[0].YBookingNo, IsFinalApprove = entity.IsApprove, IsFinalReject = entity.IsReject, IsFabricRevision = false }, transaction, 30, CommandType.StoredProcedure);
                    //if (entity.IsApprove == true && yarnBookings[0].PMCFinalApproveCount > 1)
                    //{
                    //    yarnBookings.ForEach(x =>
                    //    {
                    //        x.RevisionNo = x.RevisionNo + 1;//RevisionNo Update 1
                    //        x.RevisedDate = DateTime.Now;
                    //        x.DateRevised = DateTime.Now;
                    //    });
                    //}
                }

                transaction.Commit();

                return _yarnBookingNo;
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        public async Task<string> SaveAsyncBulkWithRevision(int userId, FBookingAcknowledge entity, List<FBookingAcknowledge> entities, bool isAddition, List<FreeConceptMRChild> mcChilds)
        {
            SqlTransaction transaction = null;
            try
            {
                //if (entity.IsReviseBBKI)
                //{
                //    await _service.ExecuteAsync("spBackupFBookingAcknowledge", new { UserId = entity.UserId, BookingId = entity.BookingID, IsReviseBBKI = true, IsReviseLabdip = false }, 30, CommandType.StoredProcedure);
                //}

                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();

                List<YarnBookingMaster> yarnBookings = new List<YarnBookingMaster>();
                if (!entity.IsUnAcknowledge)
                {
                    if (entity.YarnBookings.Count() > 0)
                    {
                        yarnBookings = await this.GetYarnBookingForUpdateWithRevision(entity.YarnBookings, entity, isAddition);
                    }
                    else if (!entity.HasYarnBooking)
                    {
                        yarnBookings = await this.GetYarnBookingWithRevision(entity, isAddition);
                    }
                }

                #region Finishing Process Operation
                entity = await this.GetFinishingProcess(entity);
                #endregion

                List<FBookingAcknowledgeChildDetails> fBookingAcknowledgeChildDetails = new List<FBookingAcknowledgeChildDetails>();
                List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                List<YarnBookingChildItemRevision> yarnBookingChildItemsRevision = new List<YarnBookingChildItemRevision>();

                if (!entity.IsUnAcknowledge)
                {
                    yarnBookings.ForEach(yb =>
                    {
                        yarnBookingChilds.AddRange(yb.Childs);
                        yarnBookingChildItemsRevision.AddRange(yb.ChildItemsRevision);
                    });
                }

                if (!isAddition)
                {
                    await _service.SaveSingleAsync(entity, transaction);
                    //await _service.ValidationSingleAsync(entity, transaction, "sp_Validation_FBookingAcknowledge_1", entity.EntityState, userId, entity.FBAckID);
                    await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.FBAckID }, transaction, 30, CommandType.StoredProcedure);

                    await _service.SaveAsync(entity.FBookingChild, transaction);
                    foreach (FBookingAcknowledgeChild item in entity.FBookingChild)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledgeChild_1", item.EntityState, userId, item.BookingChildID, item.ConsumptionID, item.BookingID, item.ItemMasterID, item.AcknowledgeID);
                        await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledgeChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.BookingChildID, SecondParamValue = item.ConsumptionID, ThirdParamValue = item.BookingID, ForthParamValue = item.ItemMasterID, FifthParamValue = item.AcknowledgeID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                await _service.SaveAsync(yarnBookings, transaction);
                foreach (YarnBookingMaster item in yarnBookings)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChilds, transaction);
                foreach (YarnBookingChild item in yarnBookingChilds)
                {
                    if (item.EntityState != EntityState.Deleted)
                    {
                        decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                        if (totalDis != 100)
                        {
                            throw new Exception("Total Distribution Qty is not 100%. => SaveAsyncBulkWithRevision => BDSAcknowledgeService");
                        }
                    }
                    if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                    {
                        throw new Exception("Qty In KG missing => SaveAsyncBulkWithRevision => BDSAcknowledgeService");
                    }
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChild_1", item.EntityState, userId, item.YBChildID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChildItemsRevision, transaction);

                if (!isAddition && !entity.IsUnAcknowledge)
                {
                    #region Finishing Process

                    List<FBookingAckChildFinishingProcess> FPChilds = new List<FBookingAckChildFinishingProcess>();
                    List<FBookingAckChildFinishingProcessItem> FPChildItems = new List<FBookingAckChildFinishingProcessItem>();
                    entity.FBookingChild.ForEach(c =>
                    {
                        c.PreFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                        c.PostFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                    });
                    await _service.SaveAsync(FPChilds, transaction);
                    await _service.SaveAsync(FPChildItems, transaction);

                    #endregion
                }

                if (entities.Count() > 0) //Use only for knitting head check or reject
                {
                    await _service.SaveAsync(entities, transaction);
                    foreach (FBookingAcknowledge item in entities)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledge_1", item.EntityState, userId, item.FBAckID);
                        await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FBAckID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                await _service.SaveAsync(mcChilds, transaction);
                foreach (FreeConceptMRChild item in mcChilds)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, userId, item.FCMRChildID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                }

                transaction.Commit();

                return _yarnBookingNo;
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        public async Task<string> SaveAsyncBulkWithFreeConcept(int userId, FBookingAcknowledge entity,
            List<FBookingAcknowledge> entities,
            bool isAddition, int isBDS,
            List<FreeConceptMaster> entityFreeConcepts = null,
            List<FreeConceptMRMaster> entityFreeMRs = null,
            List<FreeConceptMaster> entityFreeConceptsForRevise = null,
            bool isRevised = false,
            List<YarnBookingMaster> entitiesYB = null,
            bool isYarnRevised = false,
            List<YarnBookingMaster_New_RevisionReason> RevisionReasonList = null)
        {
            SqlTransaction transaction = null;
            try
            {
                //if (entity.IsReviseBBKI)
                //{
                //    await _service.ExecuteAsync("spBackupFBookingAcknowledge", new { UserId = entity.UserId, BookingId = entity.BookingID, IsReviseBBKI = true, IsReviseLabdip = false }, 30, CommandType.StoredProcedure);
                //}

                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();
                if (entity.IsReviseBBKI)
                {
                    await _connection.ExecuteAsync("spBackupFBookingAcknowledge_Full", new { BookingNo = entity.BookingNo }, transaction, 30, CommandType.StoredProcedure);
                }
                List<YarnBookingMaster> yarnBookings = new List<YarnBookingMaster>();
                if (entity.YarnBookings.Count() > 0)
                {
                    yarnBookings = await this.GetYarnBookingForUpdate(entity.YarnBookings, entity, isAddition);
                }
                else if (!entity.HasYarnBooking)
                {
                    yarnBookings = await this.GetYarnBooking(entity, isAddition);
                }
                if (yarnBookings[0].PMCFinalApproveCount > 0)
                {
                    await _connection.ExecuteAsync("spYarnBooking_BK", new { YBookingNo = yarnBookings[0].YBookingNo, IsFinalApprove = false, IsFinalReject = false, IsFabricRevision = true }, transaction, 30, CommandType.StoredProcedure);
                }

                #region Finishing Process Operation
                entity = await this.GetFinishingProcess(entity);
                #endregion

                List<FBookingAcknowledgeChildDetails> fBookingAcknowledgeChildDetails = new List<FBookingAcknowledgeChildDetails>();
                List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                List<YarnBookingChildItem> yarnBookingChildItems = new List<YarnBookingChildItem>();
                yarnBookings.ForEach(yb =>
                {
                    yarnBookingChilds.AddRange(yb.Childs);
                    yarnBookingChildItems.AddRange(yb.ChildItems);
                });

                if (!isAddition)
                {
                    await _service.SaveSingleAsync(entity, transaction);
                    //await _service.ValidationSingleAsync(entity, transaction, "sp_Validation_FBookingAcknowledge_1", entity.EntityState, userId, entity.FBAckID);
                    await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.FBAckID }, transaction, 30, CommandType.StoredProcedure);

                    await _service.SaveAsync(entity.FBookingChild, transaction);
                    foreach (FBookingAcknowledgeChild item in entity.FBookingChild)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledgeChild_1", item.EntityState, userId, item.BookingChildID, item.ConsumptionID, item.BookingID, item.ItemMasterID, item.AcknowledgeID);
                        await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledgeChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.BookingChildID, SecondParamValue = item.ConsumptionID, ThirdParamValue = item.BookingID, ForthParamValue = item.ItemMasterID, FifthParamValue = item.AcknowledgeID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                #region Yarn Booking Revision Reason
                if (isYarnRevised)
                {
                    await _connection.ExecuteAsync("spDeleteRevisionReason", new { YBookingNo = yarnBookings[0].YBookingNo }, transaction, 30, CommandType.StoredProcedure);

                    if (RevisionReasonList.Count > 0)
                    {
                        int maxChildId = 0;

                        maxChildId = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster_New_RevisionReason, RevisionReasonList.Count);
                        foreach (YarnBookingMaster_New_RevisionReason item in RevisionReasonList)
                        {
                            item.YBRReasonID = maxChildId++;
                        }
                        await _service.SaveAsync(RevisionReasonList, transaction);
                    }
                }
                #endregion

                #region Yarn Booking Save Operation
                if (isYarnRevised)
                {
                    yarnBookings.ForEach(c =>
                    {
                        c.IsRevised = true;
                        c.RevisedBy = userId;
                        c.RevisionDate = DateTime.Now;
                        /*//Off By Saif on 07/03/2024 as PreProcessRevNo will be updated from Yarn Booking Acknowledge
                        int preRevisionNo = entities.Count() > 0 ? entities.First().PreRevisionNo : 0;
                        c.PreProcessRevNo = entity.PreRevisionNo > 0 ? entity.PreRevisionNo : preRevisionNo;
                        */
                    });
                }
                await _service.SaveAsync(yarnBookings, transaction);
                foreach (YarnBookingMaster item in yarnBookings)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChilds, transaction);
                foreach (YarnBookingChild item in yarnBookingChilds)
                {
                    if (item.EntityState != EntityState.Deleted)
                    {
                        decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                        if (totalDis != 100)
                        {
                            throw new Exception("Total Distribution Qty is not 100%. => SaveAsyncBulkWithFreeConcept => BDSAcknowledgeService");
                        }
                    }
                    if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                    {
                        throw new Exception("Qty In KG missing => SaveAsyncBulkWithFreeConcept => BDSAcknowledgeService");
                    }
                    int countChildItem = yarnBookingChildItems.Count(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted);
                    if (countChildItem == 0 && item.EntityState != EntityState.Deleted)
                    {
                        throw new Exception("Yarn Item missing => SaveAsyncBulkWithFreeConcept => BDSAcknowledgeService");
                    }
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChild_1", item.EntityState, userId, item.YBChildID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChildItems, transaction);
                foreach (YarnBookingChildItem item in yarnBookingChildItems)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChildItem_1", item.EntityState, userId, item.YBChildItemID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChildItem_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildItemID }, transaction, 30, CommandType.StoredProcedure);
                }
                #endregion

                if (entitiesYB.IsNotNull())
                {
                    if (isYarnRevised)
                    {
                        entitiesYB.ForEach(c =>
                        {
                            c.IsRevised = true;
                            c.RevisedBy = userId;
                            c.RevisionDate = DateTime.Now;
                            /* //Off By Saif on 07/03/2024 as PreProcessRevNo will be updated from Yarn Booking Acknowledge
                            int preRevisionNo = entities.Count() > 0 ? entities.First().PreRevisionNo : 0;
                            c.PreProcessRevNo = entity.PreRevisionNo > 0 ? entity.PreRevisionNo : preRevisionNo;
                            */
                        });
                    }
                    await _service.SaveAsync(entitiesYB, transaction);
                    foreach (YarnBookingMaster item in entitiesYB)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                        await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                if (!isAddition)
                {

                    #region Finishing Process

                    List<FBookingAckChildFinishingProcess> FPChilds = new List<FBookingAckChildFinishingProcess>();
                    List<FBookingAckChildFinishingProcessItem> FPChildItems = new List<FBookingAckChildFinishingProcessItem>();
                    entity.FBookingChild.ForEach(c =>
                    {
                        c.PreFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                        c.PostFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                    });
                    await _service.SaveAsync(FPChilds, transaction);
                    await _service.SaveAsync(FPChildItems, transaction);

                    #endregion

                    if (entities.Count() > 0) //Use only for knitting head check or reject
                    {
                        await _service.SaveAsync(entities, transaction);
                        foreach (FBookingAcknowledge item in entities)
                        {
                            //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledge_1", item.EntityState, userId, item.FBAckID);
                            await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FBAckID }, transaction, 30, CommandType.StoredProcedure);
                        }
                    }
                }
                #region Free Concept
                int maxConceptMRId = 0;
                int maxConceptMRChildId = 0;
                int maxFBAckChildDetailId = 0;
                int maxConceptId = 0;
                int maxConceptChildId = 0;

                List<FreeConceptChildColor> childColors = new List<FreeConceptChildColor>();
                List<FreeConceptMRChild> childMRs = new List<FreeConceptMRChild>();

                if (entity.EntityState == EntityState.Modified)
                {
                    List<FreeConceptMaster> newFreeConceptMasterList = new List<FreeConceptMaster>();
                    List<FreeConceptChildColor> newFreeConceptChildColorList = new List<FreeConceptChildColor>();
                    List<FreeConceptMRMaster> newFreeConceptMRList = new List<FreeConceptMRMaster>();
                    List<FreeConceptMRChild> newFreeConceptMRChildList = new List<FreeConceptMRChild>();

                    int maxChildId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD, entity.FBookingChild.Count(x => x.EntityState == EntityState.Added));

                    if (entity.PageName == "BulkBookingKnittingInfo")
                    {

                        var tempObjList = new List<dynamic>();
                        var maxChildCount = 0;

                        entity.FBookingChild.ForEach(item =>
                        {
                            maxChildCount += item.ChildItems.Count();

                            var tObj = tempObjList.Find(x => x.BookingID == item.BookingID &&
                                                           x.ItemMasterID == item.ItemMasterID &&
                                                           x.SubGroupID == item.SubGroupID);
                            if (tObj == null)
                            {
                                dynamic tempObj = new System.Dynamic.ExpandoObject();
                                tempObj.BookingID = item.BookingID;
                                tempObj.ItemMasterID = item.ItemMasterID;
                                tempObj.SubGroupID = item.SubGroupID;
                                tempObjList.Add(tempObj);
                            }
                        });

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, tempObjList.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, tempObjList.Count);

                        maxConceptMRId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_MASTER, tempObjList.Count);
                        maxConceptMRChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_CHILD, maxChildCount);
                    }
                    else
                    {

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entity.FBookingChild.Count(x => x.EntityState == EntityState.Added));
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entity.FBookingChild.Count(x => x.EntityState == EntityState.Added));
                        if (maxConceptId == 0 & entityFreeConcepts.Count() == 0)
                        {
                            maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entity.FBookingChild.Count(x => x.EntityState == EntityState.Modified));
                            maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entity.FBookingChild.Count(x => x.EntityState == EntityState.Modified));

                        }

                    }
                    int i = 0;
                    List<FreeConceptMaster> freeConcepts = entityFreeConceptsForRevise;// await this.GetFreeConcepts(entity.BookingNo);
                    int FCCount = freeConcepts.Count();
                    entity.FBookingChild.ForEach(item =>
                    {
                        item.ChildItems = yarnBookingChilds.Where(ybc => ybc.BookingChildID == item.BookingChildID).FirstOrDefault().ChildItems;
                        int bookingChildId = 0;
                        if (item.EntityState == EntityState.Added) bookingChildId = maxChildId++;

                        if (item.EntityState == EntityState.Added) item.BookingChildID = bookingChildId;

                        #region FreeConcept & FreeConceptMR
                        if (item.EntityState != EntityState.Deleted)
                        {
                            int conceptID = 0;
                            string conceptNo = "";

                            if (entity.PageName == "BulkBookingKnittingInfo") //isBDS == 2
                            {
                                #region FreeConceptMaster & FreeConceptMRMaster
                                //NEXT
                                bool isUpdate = false;
                                //List<FreeConceptMaster> freeConcepts = entityFreeConceptsForRevise;// await this.GetFreeConcepts(entity.BookingNo);

                                FreeConceptMaster concept = new FreeConceptMaster();
                                FreeConceptMRMaster conceptMR = new FreeConceptMRMaster();

                                if (freeConcepts.Where(fc => fc.BookingChildID == item.BookingChildID).Count() > 0)
                                {
                                    conceptNo = freeConcepts.Where(fc => fc.BookingChildID == item.BookingChildID).FirstOrDefault().ConceptNo;
                                }
                                else
                                {
                                    conceptNo = (FCCount > 0 ? entity.BookingNo + '_' + FCCount : entity.BookingNo);
                                    FCCount += 1;
                                }
                                //conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);

                                FreeConceptMaster fcm = freeConcepts.Find(x => x.ConceptNo == conceptNo);
                                if (fcm.IsNotNull())
                                {
                                    isUpdate = true;
                                    conceptID = fcm.ConceptID;
                                }
                                else
                                {
                                    conceptID = maxConceptId++;
                                }
                                var freeConcept = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                                if (isUpdate)
                                {
                                    freeConcept.EntityState = EntityState.Modified;
                                }
                                //entityFreeConcepts.Add(freeConcept);
                                //newFreeConceptMasterList.Add(freeConcept);

                                if (!string.IsNullOrEmpty(freeConcept.Color))
                                {
                                    isUpdate = false;
                                    int conceptChildId = 0;
                                    if (fcm.IsNotNull() && fcm.ChildColors.Count() > 0)
                                    {
                                        var color = fcm.ChildColors.Find(x => x.ColorName == freeConcept.Color);
                                        if (color.IsNotNull())
                                        {
                                            isUpdate = true;
                                            conceptChildId = color.CCColorID;
                                        }
                                        else
                                        {
                                            conceptChildId = maxConceptChildId++;
                                        }
                                    }
                                    else
                                    {
                                        conceptChildId = maxConceptChildId++;
                                    }
                                    var colorChild = this.GetFreeConceptColorChild(item, freeConcept, conceptChildId);
                                    if (isUpdate)
                                    {
                                        colorChild.EntityState = EntityState.Modified;
                                    }

                                    childColors.Add(colorChild);
                                    newFreeConceptChildColorList.Add(colorChild);
                                }
                                if (item.ChildItems.Count() > 0)
                                {
                                    isUpdate = false;
                                    int fCMRMasterID = 0;

                                    FreeConceptMRMaster freeConceptMRObj = null;

                                    if (fcm.IsNotNull() && fcm.MRList.Count() > 0)
                                    {
                                        isUpdate = true;
                                        freeConceptMRObj = fcm.MRList.First();
                                        fCMRMasterID = freeConceptMRObj.FCMRMasterID;
                                    }
                                    else
                                    {
                                        fCMRMasterID = maxConceptMRId++;
                                    }

                                    var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                    if (isUpdate)
                                    {
                                        freeConceptMR.AddedBy = freeConceptMRObj.AddedBy;
                                        freeConceptMR.EntityState = EntityState.Modified;
                                    }
                                    entityFreeMRs.Add(freeConceptMR);
                                    newFreeConceptMRList.Add(freeConceptMR);

                                    item.ChildItems.ForEach(ybci =>
                                    {
                                        isUpdate = false;
                                        int mRChildId = 0;

                                        if (freeConceptMRObj.IsNotNull())
                                        {
                                            //var mrChildObj = freeConceptMRObj.Childs.Find(c => c.ItemMasterID == ybci.YItemMasterID);
                                            var mrChildObj = freeConceptMRObj.Childs.Find(c => c.YBChildItemID == ybci.YBChildItemID);
                                            if (mrChildObj.IsNotNull())
                                            {
                                                isUpdate = true;
                                                mRChildId = mrChildObj.FCMRChildID;
                                            }
                                            else
                                            {
                                                mRChildId = maxConceptMRChildId++;
                                            }
                                        }
                                        else
                                        {
                                            mRChildId = maxConceptMRChildId++;
                                        }
                                        var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                        if (isUpdate)
                                        {
                                            if (ybci.EntityState == EntityState.Deleted)
                                            {
                                                mrChild.EntityState = EntityState.Deleted;
                                            }
                                            else
                                            {
                                                mrChild.EntityState = EntityState.Modified;
                                            }
                                        }
                                        childMRs.Add(mrChild);
                                        newFreeConceptMRChildList.Add(mrChild);
                                    });
                                }
                                else
                                {
                                    freeConcept.EntityState = EntityState.Deleted;

                                    int fCMRMasterID = 0;

                                    FreeConceptMRMaster freeConceptMRObj = null;

                                    if (fcm.IsNotNull() && fcm.MRList.Count() > 0)
                                    {
                                        freeConceptMRObj = fcm.MRList.First();
                                        fCMRMasterID = freeConceptMRObj.FCMRMasterID;
                                    }


                                    var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                    freeConceptMR.EntityState = EntityState.Deleted;

                                    entityFreeMRs.Add(freeConceptMR);
                                    newFreeConceptMRList.Add(freeConceptMR);
                                    if (freeConceptMRObj.IsNotNull())
                                    {
                                        freeConceptMRObj.Childs.ForEach(ybci =>
                                        {
                                            ybci.EntityState = EntityState.Deleted;
                                            childMRs.Add(ybci);
                                            newFreeConceptMRChildList.Add(ybci);
                                        });
                                    }
                                }
                                entityFreeConcepts.Add(freeConcept);
                                newFreeConceptMasterList.Add(freeConcept);

                                i++;

                                #endregion FreeConceptMaster & FreeConceptMRMaster
                            }
                            else
                            {
                                int ab = item.BookingChildID;
                                var obj = entityFreeConcepts.Find(x => x.BookingChildID == item.BookingChildID);
                                i = entityFreeConcepts.Count();
                                if (obj != null)
                                {
                                    conceptID = obj.ConceptID;
                                    conceptNo = obj.ConceptNo;
                                    var childs = obj.ChildColors;

                                    obj = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);

                                    childs.ForEach(colorChild =>
                                    {
                                        colorChild = this.GetFreeConceptColorChild(item, obj, colorChild.CCColorID);
                                        colorChild.EntityState = EntityState.Modified;
                                        newFreeConceptChildColorList.Add(colorChild);
                                    });

                                    obj.EntityState = EntityState.Modified;
                                    newFreeConceptMasterList.Add(obj);
                                }
                                else
                                {
                                    if (i > 0) i++;
                                    conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);
                                    conceptID = maxConceptId++;
                                    obj = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                                    obj.EntityState = EntityState.Added;
                                    newFreeConceptMasterList.Add(obj);

                                    if (!string.IsNullOrEmpty(item.Color))
                                    {
                                        int conceptChildId = maxConceptChildId++;
                                        var colorChild = this.GetFreeConceptColorChild(item, obj, conceptChildId);
                                        colorChild.EntityState = EntityState.Added;
                                        newFreeConceptChildColorList.Add(colorChild);
                                    }
                                }
                            }
                        }
                        #endregion FreeConcept & FreeConceptMR
                    });

                    #region FreeConceptMR
                    entityFreeConcepts = newFreeConceptMasterList;

                    List<FreeConceptMaster> lFrreCM = new List<FreeConceptMaster>();
                    entityFreeConcepts.ForEach(item =>
                    {
                        var objFrreCM = entity.FBookingChild.Find(x => x.BookingChildID == item.BookingChildID);
                        if (objFrreCM == null)
                        {
                            item.IsActive = true;
                            item.EntityState = EntityState.Modified;
                            lFrreCM.Add(item);
                        }
                    });

                    childColors = newFreeConceptChildColorList;
                    entityFreeMRs = newFreeConceptMRList;
                    childMRs = newFreeConceptMRChildList;
                    #endregion

                }
                else
                {
                    if (isBDS == 1 || isBDS == 3)
                    {
                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entity.FBookingChild.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entity.FBookingChild.Count);
                    }
                    entityFreeConcepts = new List<FreeConceptMaster>();
                    childColors = new List<FreeConceptChildColor>();

                    entityFreeMRs = new List<FreeConceptMRMaster>();
                    childMRs = new List<FreeConceptMRChild>();
                    int i = 0;

                    entity.FBookingChild.Where(x => x.EntityState != EntityState.Deleted).ToList().ForEach(item =>
                    {
                        if (entity.EntityState == EntityState.Added && (isBDS == 1 || isBDS == 3))
                        {
                            #region FreeConceptMaster & FreeConceptMRMaster

                            FreeConceptMaster concept = new FreeConceptMaster();
                            FreeConceptMRMaster conceptMR = new FreeConceptMRMaster();

                            int conceptID = maxConceptId++;
                            string conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);
                            var freeConcept = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                            entityFreeConcepts.Add(freeConcept);

                            if (!string.IsNullOrEmpty(freeConcept.Color))
                            {
                                int conceptChildId = maxConceptChildId++;
                                var colorChild = this.GetFreeConceptColorChild(item, freeConcept, conceptChildId);
                                childColors.Add(colorChild);
                            }

                            if (isBDS == 2 && item.ChildItems.Count() > 0)
                            {
                                int fCMRMasterID = maxConceptMRId++;
                                var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                entityFreeMRs.Add(freeConceptMR);

                                item.ChildItems.ForEach(ybci =>
                                {
                                    int mRChildId = maxConceptMRChildId++;
                                    var fBAChildDetail = this.GetFBookingAcknowledgeChildDetail(maxFBAckChildDetailId++, item, entity, ybci);
                                    //entityChildDetails.Add(fBAChildDetail);
                                    var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                    childMRs.Add(mrChild);
                                });
                            }
                            i++;

                            #endregion FreeConceptMaster & FreeConceptMRMaster
                        }
                    });

                    if (isBDS == 2 && entity.EntityState == EntityState.Added)
                    {
                        var tempObjList = new List<dynamic>();
                        var maxChildCount = 0;

                        entity.FBookingChild.ForEach(item =>
                        {
                            maxChildCount += item.ChildItems.Count();

                            var tObj = tempObjList.Find(x => x.BookingID == item.BookingID &&
                                                           x.ItemMasterID == item.ItemMasterID &&
                                                           x.SubGroupID == item.SubGroupID);
                            if (tObj == null)
                            {
                                dynamic tempObj = new System.Dynamic.ExpandoObject();
                                tempObj.BookingID = item.BookingID;
                                tempObj.ItemMasterID = item.ItemMasterID;
                                tempObj.SubGroupID = item.SubGroupID;
                                tempObjList.Add(tempObj);
                            }
                        });

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, tempObjList.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, tempObjList.Count);

                        if (isBDS == 2)
                        {
                            //entityChildDetails = new List<FBookingAcknowledgeChildDetails>();
                            maxConceptMRId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_MASTER, tempObjList.Count);
                            maxConceptMRChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_CHILD, maxChildCount);
                            maxFBAckChildDetailId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_DETAILS, maxChildCount);
                        }
                        i = 0;

                        tempObjList.ForEach(tempObj =>
                        {
                            var fbaChilds = entity.FBookingChild.Where(x => x.BookingID == tempObj.BookingID &&
                                                                    x.ItemMasterID == tempObj.ItemMasterID &&
                                                                    x.SubGroupID == tempObj.SubGroupID).ToList();

                            List<YarnBookingChildItem> ChildItems = new List<YarnBookingChildItem>();
                            fbaChilds.ForEach(x => ChildItems.AddRange(x.ChildItems));

                            #region FreeConceptMaster

                            int conceptID = maxConceptId++;
                            string conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);

                            decimal height = 0,
                                    length = 0;

                            fbaChilds.ForEach(childObj =>
                            {
                                height += childObj.Height.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Height) : 0;
                                length += childObj.Length.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Length) : 0;
                            });

                            FBookingAcknowledgeChild fbaChild = new FBookingAcknowledgeChild();
                            fbaChild = fbaChilds.FirstOrDefault();
                            fbaChild.BookingQty = fbaChilds.Sum(x => x.BookingQty);
                            fbaChild.Height = height.ToString();
                            fbaChild.Length = length.ToString();

                            var freeConcept = this.GetFreeConceptMaster(fbaChild, entity, isBDS, conceptID, conceptNo, true); //true means group by ItemMasterID and BookingID
                            entityFreeConcepts.Add(freeConcept);

                            #endregion FreeConceptMaster

                            #region FreeConceptColorChild

                            if (!string.IsNullOrEmpty(freeConcept.Color))
                            {
                                int conceptChildId = maxConceptChildId++;
                                var colorChild = this.GetFreeConceptColorChild(fbaChild, freeConcept, conceptChildId);
                                childColors.Add(colorChild);
                            }

                            #endregion FreeConceptColorChild

                            #region FreeConceptMR

                            if (isBDS == 2 && ChildItems.Count() > 0)
                            {
                                int fCMRMasterID = maxConceptMRId++;
                                var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                entityFreeMRs.Add(freeConceptMR);

                                ChildItems.ForEach(ybci =>
                                {
                                    int mRChildId = maxConceptMRChildId++;
                                    var fBAChildDetail = this.GetFBookingAcknowledgeChildDetail(maxFBAckChildDetailId++, fbaChild, entity, ybci);
                                    ybci.ItemMasterID = tempObj.ItemMasterID;
                                    ybci = this.CheckAndSetSegmentValueDesc(ybci, tempObj);
                                    var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                    childMRs.Add(mrChild);
                                });
                            }
                            #endregion

                            i++;
                        });
                    }
                }
                List<FreeConceptMaster> SaveEntityFreeConcepts = new List<FreeConceptMaster>();
                List<FreeConceptMaster> DeleteEntityFreeConcepts = new List<FreeConceptMaster>();
                SaveEntityFreeConcepts = entityFreeConcepts.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityFreeConcepts = entityFreeConcepts.Where(x => x.EntityState == EntityState.Deleted).ToList();
                List<FreeConceptChildColor> SaveChildColors = new List<FreeConceptChildColor>();
                List<FreeConceptChildColor> DeleteChildColors = new List<FreeConceptChildColor>();
                SaveChildColors = childColors.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteChildColors = childColors.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptMRMaster> SaveEntityFreeMRs = new List<FreeConceptMRMaster>();
                List<FreeConceptMRMaster> DeleteEntityFreeMRs = new List<FreeConceptMRMaster>();
                SaveEntityFreeMRs = entityFreeMRs.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityFreeMRs = entityFreeMRs.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptMRChild> SaveChildMRs = new List<FreeConceptMRChild>();
                List<FreeConceptMRChild> DeleteChildMRs = new List<FreeConceptMRChild>();
                SaveChildMRs = childMRs.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteChildMRs = childMRs.Where(x => x.EntityState == EntityState.Deleted).ToList();

                await _service.SaveAsync(DeleteEntityFreeConcepts, transaction);
                await _service.SaveAsync(DeleteChildColors, transaction);
                if (isBDS == 2)
                {
                    await _service.SaveAsync(DeleteChildMRs, transaction);
                    await _service.SaveAsync(DeleteEntityFreeMRs, transaction);
                }
                await _service.SaveAsync(SaveEntityFreeConcepts, transaction);
                foreach (FreeConceptMaster item in SaveEntityFreeConcepts)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMaster_1", item.EntityState, userId, item.ConceptID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.ConceptID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(SaveChildColors, transaction);
                foreach (FreeConceptChildColor item in SaveChildColors)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptChildColor_1", item.EntityState, userId, item.CCColorID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptChildColor_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.CCColorID }, transaction, 30, CommandType.StoredProcedure);
                }
                if (isBDS == 2)
                {
                    await _service.SaveAsync(SaveEntityFreeMRs, transaction);
                    foreach (FreeConceptMRMaster item in SaveEntityFreeMRs)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRMaster_1", item.EntityState, userId, item.FCMRMasterID);
                        await _connection.ExecuteAsync("sp_Validation_FreeConceptMRMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRMasterID }, transaction, 30, CommandType.StoredProcedure);
                    }
                    await _service.SaveAsync(SaveChildMRs, transaction);
                    foreach (FreeConceptMRChild item in SaveChildMRs)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, userId, item.FCMRChildID);
                        await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }
                #endregion Free Concept

                transaction.Commit();

                return _yarnBookingNo;
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        public List<YarnBookingChildItemRevision> GetYarnRevisedChildItems(List<YarnBookingChildItem> yarnBookingChildItems)
        {
            List<YarnBookingChildItemRevision> yarnBookingChildItemsRevision = new List<YarnBookingChildItemRevision>();
            yarnBookingChildItems.ForEach(c =>
            {
                YarnBookingChildItemRevision obj = new YarnBookingChildItemRevision();
                obj.YBChildItemID = c.YBChildItemID;
                obj.YBChildID = c.YBChildID;
                obj.YBookingID = c.YBookingID;
                obj.YItemMasterID = c.YItemMasterID;
                obj.UnitID = c.UnitID;
                obj.Blending = c.Blending;
                obj.YarnCategory = c.YarnCategory;
                obj.Distribution = c.Distribution;
                obj.BookingQty = c.BookingQty;
                obj.Allowance = c.Allowance;
                obj.RequiredQty = c.RequiredQty;
                obj.ShadeCode = c.ShadeCode;
                obj.Remarks = c.Remarks;
                obj.Specification = c.Specification;
                obj.YD = c.YD;
                obj.YDItem = c.YDItem;
                obj.StitchLength = c.StitchLength;
                obj.PhysicalCount = c.PhysicalCount;
                obj.BatchNo = c.BatchNo;
                obj.SpinnerId = c.SpinnerId;
                obj.YarnLotNo = c.YarnLotNo;
                obj.YarnReqQty = c.YarnReqQty;
                obj.YarnLeftOverQty = c.YarnLeftOverQty;
                obj.NetYarnReqQty = c.NetYarnReqQty;
                obj.YarnBalanceQty = c.YarnBalanceQty;
                obj.YarnPly = c.YarnPly;
                obj.GreyAllowance = c.GreyAllowance;
                obj.YDAllowance = c.YDAllowance;
                obj.GreyYarnUtilizationQty = c.GreyYarnUtilizationQty;
                obj.DyedYarnUtilizationQty = c.DyedYarnUtilizationQty;
                obj.AllowanceFM = c.AllowanceFM;
                obj.RequiredQtyFM = c.RequiredQtyFM;
                obj.SourcingRate = c.SourcingRate;
                obj.SourcingLandedCost = c.SourcingLandedCost;
                obj.TotalSourcingRate = c.TotalSourcingRate;
                obj.DyeingCostFM = c.DyeingCostFM;
                obj.EntityState = c.EntityState;
                yarnBookingChildItemsRevision.Add(obj);
            });
            return yarnBookingChildItemsRevision;
        }
        public async Task<string> SaveAsyncBulkWithFreeConceptWithYarnRevision(int userId, FBookingAcknowledge entity,
        List<FBookingAcknowledge> entities,
        bool isAddition, int isBDS,
        List<FreeConceptMaster> entityFreeConcepts = null,
        List<FreeConceptMRMaster> entityFreeMRs = null,
        List<FreeConceptMaster> entityFreeConceptsForRevise = null,
        bool isRevised = false,
        List<YarnBookingMaster> entitiesYB = null,
        bool isYarnRevised = false,
        List<YarnBookingMaster_New_RevisionReason> RevisionReasonList = null)
        {
            SqlTransaction transaction = null;
            try
            {
                //if (entity.IsReviseBBKI)
                //{
                //    await _service.ExecuteAsync("spBackupFBookingAcknowledge", new { UserId = entity.UserId, BookingId = entity.BookingID, IsReviseBBKI = true, IsReviseLabdip = false }, 30, CommandType.StoredProcedure);
                //}

                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();
                if (entity.IsReviseBBKI)
                {
                    await _connection.ExecuteAsync("spBackupFBookingAcknowledge_Full", new { BookingNo = entity.BookingNo }, transaction, 30, CommandType.StoredProcedure);
                }
                List<YarnBookingMaster> yarnBookings = new List<YarnBookingMaster>();
                if (entity.YarnBookings.Count() > 0)
                {
                    yarnBookings = await this.GetYarnBookingForUpdate(entity.YarnBookings, entity, isAddition);
                }
                else if (!entity.HasYarnBooking)
                {
                    yarnBookings = await this.GetYarnBooking(entity, isAddition);
                }
                if (yarnBookings[0].PMCFinalApproveCount > 0)
                {
                    await _connection.ExecuteAsync("spYarnBooking_BK", new { YBookingNo = yarnBookings[0].YBookingNo, IsFinalApprove = false, IsFinalReject = false, IsFabricRevision = true }, transaction, 30, CommandType.StoredProcedure);
                }

                #region Finishing Process Operation
                entity = await this.GetFinishingProcess(entity);
                #endregion

                List<FBookingAcknowledgeChildDetails> fBookingAcknowledgeChildDetails = new List<FBookingAcknowledgeChildDetails>();
                List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                List<YarnBookingChildItemRevision> yarnBookingChildItemsRevision = new List<YarnBookingChildItemRevision>();
                yarnBookings.ForEach(yb =>
                {
                    yarnBookingChilds.AddRange(yb.Childs);
                    yarnBookingChildItemsRevision = GetYarnRevisedChildItems(yb.ChildItems);
                });

                if (!isAddition)
                {
                    await _service.SaveSingleAsync(entity, transaction);
                    //await _service.ValidationSingleAsync(entity, transaction, "sp_Validation_FBookingAcknowledge_1", entity.EntityState, userId, entity.FBAckID);
                    await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = entity.EntityState, UserId = userId, PrimaryKeyId = entity.FBAckID }, transaction, 30, CommandType.StoredProcedure);

                    await _service.SaveAsync(entity.FBookingChild, transaction);
                    foreach (FBookingAcknowledgeChild item in entity.FBookingChild)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledgeChild_1", item.EntityState, userId, item.BookingChildID, item.ConsumptionID, item.BookingID, item.ItemMasterID, item.AcknowledgeID);
                        await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledgeChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.BookingChildID, SecondParamValue = item.ConsumptionID, ThirdParamValue = item.BookingID, ForthParamValue = item.ItemMasterID, FifthParamValue = item.AcknowledgeID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                #region Yarn Booking Revision Reason
                if (isYarnRevised)
                {
                    await _connection.ExecuteAsync("spDeleteRevisionReason", new { YBookingNo = yarnBookings[0].YBookingNo }, transaction, 30, CommandType.StoredProcedure);

                    if (RevisionReasonList.Count > 0)
                    {
                        int maxChildId = 0;

                        maxChildId = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster_New_RevisionReason, RevisionReasonList.Count);
                        foreach (YarnBookingMaster_New_RevisionReason item in RevisionReasonList)
                        {
                            item.YBRReasonID = maxChildId++;
                        }
                        await _service.SaveAsync(RevisionReasonList, transaction);
                    }
                }
                #endregion

                #region Yarn Booking Save Operation
                if (isYarnRevised)
                {
                    yarnBookings.ForEach(c =>
                    {
                        c.IsRevised = true;
                        c.RevisedBy = userId;
                        c.RevisionDate = DateTime.Now;
                        /*//Off By Saif on 07/03/2024 as PreProcessRevNo will be updated from Yarn Booking Acknowledge
                        int preRevisionNo = entities.Count() > 0 ? entities.First().PreRevisionNo : 0;
                        c.PreProcessRevNo = entity.PreRevisionNo > 0 ? entity.PreRevisionNo : preRevisionNo;
                        */
                    });
                }
                await _service.SaveAsync(yarnBookings, transaction);
                foreach (YarnBookingMaster item in yarnBookings)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChilds, transaction);
                foreach (YarnBookingChild item in yarnBookingChilds)
                {
                    if (item.EntityState != EntityState.Deleted)
                    {
                        decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                        if (totalDis != 100)
                        {
                            throw new Exception("Total Distribution Qty is not 100%. => SaveAsyncBulkWithFreeConcept => BDSAcknowledgeService");
                        }
                    }

                    if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                    {
                        throw new Exception("Qty In KG missing => SaveAsyncBulkWithFreeConcept => BDSAcknowledgeService");
                    }
                    int countChildItem = yarnBookingChildItemsRevision.Count(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted);
                    if (countChildItem == 0 && item.EntityState != EntityState.Deleted)
                    {
                        throw new Exception("Yarn Item missing => SaveAsyncBulkWithFreeConcept => BDSAcknowledgeService");
                    }
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChild_1", item.EntityState, userId, item.YBChildID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(yarnBookingChildItemsRevision, transaction);
                //foreach (YarnBookingChildItemRevision item in yarnBookingChildItemsRevision)
                //{
                //    await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChildItem_1", item.EntityState, userId, item.YBChildItemID);
                //}
                #endregion

                if (entitiesYB.IsNotNull())
                {
                    if (isYarnRevised)
                    {
                        entitiesYB.ForEach(c =>
                        {
                            c.IsRevised = true;
                            c.RevisedBy = userId;
                            c.RevisionDate = DateTime.Now;
                            /* //Off By Saif on 07/03/2024 as PreProcessRevNo will be updated from Yarn Booking Acknowledge
                            int preRevisionNo = entities.Count() > 0 ? entities.First().PreRevisionNo : 0;
                            c.PreProcessRevNo = entity.PreRevisionNo > 0 ? entity.PreRevisionNo : preRevisionNo;
                            */
                        });
                    }
                    await _service.SaveAsync(entitiesYB, transaction);
                    foreach (YarnBookingMaster item in entitiesYB)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                        await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                if (!isAddition)
                {

                    #region Finishing Process

                    List<FBookingAckChildFinishingProcess> FPChilds = new List<FBookingAckChildFinishingProcess>();
                    List<FBookingAckChildFinishingProcessItem> FPChildItems = new List<FBookingAckChildFinishingProcessItem>();
                    entity.FBookingChild.ForEach(c =>
                    {
                        c.PreFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                        c.PostFinishingProcessChilds.ForEach(fpc =>
                        {
                            FPChilds.Add(fpc);
                            FPChildItems.AddRange(fpc.FinishingProcessChildItems);
                        });
                    });
                    await _service.SaveAsync(FPChilds, transaction);
                    await _service.SaveAsync(FPChildItems, transaction);

                    #endregion

                    if (entities.Count() > 0) //Use only for knitting head check or reject
                    {
                        await _service.SaveAsync(entities, transaction);
                        foreach (FBookingAcknowledge item in entities)
                        {
                            //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledge_1", item.EntityState, userId, item.FBAckID);
                            await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledge_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FBAckID }, transaction, 30, CommandType.StoredProcedure);
                        }
                    }
                }
                #region Free Concept
                int maxConceptMRId = 0;
                int maxConceptMRChildId = 0;
                int maxFBAckChildDetailId = 0;
                int maxConceptId = 0;
                int maxConceptChildId = 0;

                List<FreeConceptChildColor> childColors = new List<FreeConceptChildColor>();
                List<FreeConceptMRChild> childMRs = new List<FreeConceptMRChild>();

                if (entity.EntityState == EntityState.Modified)
                {
                    List<FreeConceptMaster> newFreeConceptMasterList = new List<FreeConceptMaster>();
                    List<FreeConceptChildColor> newFreeConceptChildColorList = new List<FreeConceptChildColor>();
                    List<FreeConceptMRMaster> newFreeConceptMRList = new List<FreeConceptMRMaster>();
                    List<FreeConceptMRChild> newFreeConceptMRChildList = new List<FreeConceptMRChild>();

                    int maxChildId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD, entity.FBookingChild.Count(x => x.EntityState == EntityState.Added));

                    if (entity.PageName == "BulkBookingKnittingInfo")
                    {

                        var tempObjList = new List<dynamic>();
                        var maxChildCount = 0;

                        entity.FBookingChild.ForEach(item =>
                        {
                            maxChildCount += item.ChildItems.Count();

                            var tObj = tempObjList.Find(x => x.BookingID == item.BookingID &&
                                                           x.ItemMasterID == item.ItemMasterID &&
                                                           x.SubGroupID == item.SubGroupID);
                            if (tObj == null)
                            {
                                dynamic tempObj = new System.Dynamic.ExpandoObject();
                                tempObj.BookingID = item.BookingID;
                                tempObj.ItemMasterID = item.ItemMasterID;
                                tempObj.SubGroupID = item.SubGroupID;
                                tempObjList.Add(tempObj);
                            }
                        });

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, tempObjList.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, tempObjList.Count);

                        maxConceptMRId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_MASTER, tempObjList.Count);
                        maxConceptMRChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_CHILD, maxChildCount);
                    }
                    else
                    {

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entity.FBookingChild.Count(x => x.EntityState == EntityState.Added));
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entity.FBookingChild.Count(x => x.EntityState == EntityState.Added));
                        if (maxConceptId == 0 & entityFreeConcepts.Count() == 0)
                        {
                            maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entity.FBookingChild.Count(x => x.EntityState == EntityState.Modified));
                            maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entity.FBookingChild.Count(x => x.EntityState == EntityState.Modified));

                        }

                    }
                    int i = 0;
                    entity.FBookingChild.ForEach(item =>
                    {
                        int bookingChildId = 0;
                        if (item.EntityState == EntityState.Added) bookingChildId = maxChildId++;

                        if (item.EntityState == EntityState.Added) item.BookingChildID = bookingChildId;

                        #region FreeConcept & FreeConceptMR
                        if (item.EntityState != EntityState.Deleted)
                        {
                            int conceptID = 0;
                            string conceptNo = "";

                            if (entity.PageName == "BulkBookingKnittingInfo") //isBDS == 2
                            {
                                #region FreeConceptMaster & FreeConceptMRMaster

                                //NEXT
                                bool isUpdate = false;
                                List<FreeConceptMaster> freeConcepts = entityFreeConceptsForRevise;// await this.GetFreeConcepts(entity.BookingNo);

                                FreeConceptMaster concept = new FreeConceptMaster();
                                FreeConceptMRMaster conceptMR = new FreeConceptMRMaster();

                                conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);

                                FreeConceptMaster fcm = freeConcepts.Find(x => x.ConceptNo == conceptNo);
                                if (fcm.IsNotNull())
                                {
                                    isUpdate = true;
                                    conceptID = fcm.ConceptID;
                                }
                                else
                                {
                                    conceptID = maxConceptId++;
                                }
                                var freeConcept = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                                if (isUpdate)
                                {
                                    freeConcept.EntityState = EntityState.Modified;
                                }
                                //entityFreeConcepts.Add(freeConcept);
                                //newFreeConceptMasterList.Add(freeConcept);

                                if (!string.IsNullOrEmpty(freeConcept.Color))
                                {
                                    isUpdate = false;
                                    int conceptChildId = 0;
                                    if (fcm.IsNotNull() && fcm.ChildColors.Count() > 0)
                                    {
                                        var color = fcm.ChildColors.Find(x => x.ColorName == freeConcept.Color);
                                        if (color.IsNotNull())
                                        {
                                            isUpdate = true;
                                            conceptChildId = color.CCColorID;
                                        }
                                        else
                                        {
                                            conceptChildId = maxConceptChildId++;
                                        }
                                    }
                                    else
                                    {
                                        conceptChildId = maxConceptChildId++;
                                    }
                                    var colorChild = this.GetFreeConceptColorChild(item, freeConcept, conceptChildId);
                                    if (isUpdate)
                                    {
                                        colorChild.EntityState = EntityState.Modified;
                                    }

                                    childColors.Add(colorChild);
                                    newFreeConceptChildColorList.Add(colorChild);
                                }
                                if (item.ChildItems.Count() > 0)
                                {
                                    isUpdate = false;
                                    int fCMRMasterID = 0;

                                    FreeConceptMRMaster freeConceptMRObj = null;

                                    if (fcm.IsNotNull() && fcm.MRList.Count() > 0)
                                    {
                                        isUpdate = true;
                                        freeConceptMRObj = fcm.MRList.First();
                                        fCMRMasterID = freeConceptMRObj.FCMRMasterID;
                                    }
                                    else
                                    {
                                        fCMRMasterID = maxConceptMRId++;
                                    }

                                    var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                    if (isUpdate)
                                    {
                                        freeConceptMR.EntityState = EntityState.Modified;
                                    }
                                    entityFreeMRs.Add(freeConceptMR);
                                    newFreeConceptMRList.Add(freeConceptMR);

                                    item.ChildItems.ForEach(ybci =>
                                    {
                                        isUpdate = false;
                                        int mRChildId = 0;

                                        if (freeConceptMRObj.IsNotNull())
                                        {
                                            var mrChildObj = freeConceptMRObj.Childs.Find(c => c.ItemMasterID == ybci.YItemMasterID);
                                            if (mrChildObj.IsNotNull())
                                            {
                                                isUpdate = true;
                                                mRChildId = mrChildObj.FCMRChildID;
                                            }
                                            else
                                            {
                                                mRChildId = maxConceptMRChildId++;
                                            }
                                        }
                                        else
                                        {
                                            mRChildId = maxConceptMRChildId++;
                                        }
                                        var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                        if (isUpdate)
                                        {
                                            if (ybci.EntityState == EntityState.Deleted)
                                            {
                                                mrChild.EntityState = EntityState.Deleted;
                                            }
                                            else
                                            {
                                                mrChild.EntityState = EntityState.Modified;
                                            }
                                        }
                                        childMRs.Add(mrChild);
                                        newFreeConceptMRChildList.Add(mrChild);
                                    });
                                }
                                else
                                {
                                    freeConcept.EntityState = EntityState.Deleted;

                                    int fCMRMasterID = 0;

                                    FreeConceptMRMaster freeConceptMRObj = null;

                                    if (fcm.IsNotNull() && fcm.MRList.Count() > 0)
                                    {
                                        freeConceptMRObj = fcm.MRList.First();
                                        fCMRMasterID = freeConceptMRObj.FCMRMasterID;
                                    }


                                    var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                    freeConceptMR.EntityState = EntityState.Deleted;

                                    entityFreeMRs.Add(freeConceptMR);
                                    newFreeConceptMRList.Add(freeConceptMR);
                                    if (freeConceptMRObj.IsNotNull())
                                    {
                                        freeConceptMRObj.Childs.ForEach(ybci =>
                                        {
                                            ybci.EntityState = EntityState.Deleted;
                                            childMRs.Add(ybci);
                                            newFreeConceptMRChildList.Add(ybci);
                                        });
                                    }
                                }
                                entityFreeConcepts.Add(freeConcept);
                                newFreeConceptMasterList.Add(freeConcept);

                                i++;

                                #endregion FreeConceptMaster & FreeConceptMRMaster
                            }
                            else
                            {
                                int ab = item.BookingChildID;
                                var obj = entityFreeConcepts.Find(x => x.BookingChildID == item.BookingChildID);
                                i = entityFreeConcepts.Count();
                                if (obj != null)
                                {
                                    conceptID = obj.ConceptID;
                                    conceptNo = obj.ConceptNo;
                                    var childs = obj.ChildColors;

                                    obj = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);

                                    childs.ForEach(colorChild =>
                                    {
                                        colorChild = this.GetFreeConceptColorChild(item, obj, colorChild.CCColorID);
                                        colorChild.EntityState = EntityState.Modified;
                                        newFreeConceptChildColorList.Add(colorChild);
                                    });

                                    obj.EntityState = EntityState.Modified;
                                    newFreeConceptMasterList.Add(obj);
                                }
                                else
                                {
                                    if (i > 0) i++;
                                    conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);
                                    conceptID = maxConceptId++;
                                    obj = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                                    obj.EntityState = EntityState.Added;
                                    newFreeConceptMasterList.Add(obj);

                                    if (!string.IsNullOrEmpty(item.Color))
                                    {
                                        int conceptChildId = maxConceptChildId++;
                                        var colorChild = this.GetFreeConceptColorChild(item, obj, conceptChildId);
                                        colorChild.EntityState = EntityState.Added;
                                        newFreeConceptChildColorList.Add(colorChild);
                                    }
                                }
                            }
                        }
                        #endregion FreeConcept & FreeConceptMR
                    });

                    #region FreeConceptMR
                    entityFreeConcepts = newFreeConceptMasterList;

                    List<FreeConceptMaster> lFrreCM = new List<FreeConceptMaster>();
                    entityFreeConcepts.ForEach(item =>
                    {
                        var objFrreCM = entity.FBookingChild.Find(x => x.BookingChildID == item.BookingChildID);
                        if (objFrreCM == null)
                        {
                            item.IsActive = true;
                            item.EntityState = EntityState.Modified;
                            lFrreCM.Add(item);
                        }
                    });

                    childColors = newFreeConceptChildColorList;
                    entityFreeMRs = newFreeConceptMRList;
                    childMRs = newFreeConceptMRChildList;
                    #endregion

                }
                else
                {
                    if (isBDS == 1 || isBDS == 3)
                    {
                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, entity.FBookingChild.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, entity.FBookingChild.Count);
                    }
                    entityFreeConcepts = new List<FreeConceptMaster>();
                    childColors = new List<FreeConceptChildColor>();

                    entityFreeMRs = new List<FreeConceptMRMaster>();
                    childMRs = new List<FreeConceptMRChild>();
                    int i = 0;

                    entity.FBookingChild.Where(x => x.EntityState != EntityState.Deleted).ToList().ForEach(item =>
                    {
                        if (entity.EntityState == EntityState.Added && (isBDS == 1 || isBDS == 3))
                        {
                            #region FreeConceptMaster & FreeConceptMRMaster

                            FreeConceptMaster concept = new FreeConceptMaster();
                            FreeConceptMRMaster conceptMR = new FreeConceptMRMaster();

                            int conceptID = maxConceptId++;
                            string conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);
                            var freeConcept = this.GetFreeConceptMaster(item, entity, isBDS, conceptID, conceptNo);
                            entityFreeConcepts.Add(freeConcept);

                            if (!string.IsNullOrEmpty(freeConcept.Color))
                            {
                                int conceptChildId = maxConceptChildId++;
                                var colorChild = this.GetFreeConceptColorChild(item, freeConcept, conceptChildId);
                                childColors.Add(colorChild);
                            }

                            if (isBDS == 2 && item.ChildItems.Count() > 0)
                            {
                                int fCMRMasterID = maxConceptMRId++;
                                var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                entityFreeMRs.Add(freeConceptMR);

                                item.ChildItems.ForEach(ybci =>
                                {
                                    int mRChildId = maxConceptMRChildId++;
                                    var fBAChildDetail = this.GetFBookingAcknowledgeChildDetail(maxFBAckChildDetailId++, item, entity, ybci);
                                    //entityChildDetails.Add(fBAChildDetail);
                                    var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                    childMRs.Add(mrChild);
                                });
                            }
                            i++;

                            #endregion FreeConceptMaster & FreeConceptMRMaster
                        }
                    });

                    if (isBDS == 2 && entity.EntityState == EntityState.Added)
                    {
                        var tempObjList = new List<dynamic>();
                        var maxChildCount = 0;

                        entity.FBookingChild.ForEach(item =>
                        {
                            maxChildCount += item.ChildItems.Count();

                            var tObj = tempObjList.Find(x => x.BookingID == item.BookingID &&
                                                           x.ItemMasterID == item.ItemMasterID &&
                                                           x.SubGroupID == item.SubGroupID);
                            if (tObj == null)
                            {
                                dynamic tempObj = new System.Dynamic.ExpandoObject();
                                tempObj.BookingID = item.BookingID;
                                tempObj.ItemMasterID = item.ItemMasterID;
                                tempObj.SubGroupID = item.SubGroupID;
                                tempObjList.Add(tempObj);
                            }
                        });

                        maxConceptId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MASTER, tempObjList.Count);
                        maxConceptChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_CHILD_COLOR, tempObjList.Count);

                        if (isBDS == 2)
                        {
                            //entityChildDetails = new List<FBookingAcknowledgeChildDetails>();
                            maxConceptMRId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_MASTER, tempObjList.Count);
                            maxConceptMRChildId = await _service.GetMaxIdAsync(TableNames.RND_FREE_CONCEPT_MR_CHILD, maxChildCount);
                            maxFBAckChildDetailId = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD_DETAILS, maxChildCount);
                        }
                        i = 0;

                        tempObjList.ForEach(tempObj =>
                        {
                            var fbaChilds = entity.FBookingChild.Where(x => x.BookingID == tempObj.BookingID &&
                                                                    x.ItemMasterID == tempObj.ItemMasterID &&
                                                                    x.SubGroupID == tempObj.SubGroupID).ToList();

                            List<YarnBookingChildItem> ChildItems = new List<YarnBookingChildItem>();
                            fbaChilds.ForEach(x => ChildItems.AddRange(x.ChildItems));

                            #region FreeConceptMaster

                            int conceptID = maxConceptId++;
                            string conceptNo = (i > 0 ? entity.BookingNo + '_' + i : entity.BookingNo);

                            decimal height = 0,
                                    length = 0;

                            fbaChilds.ForEach(childObj =>
                            {
                                height += childObj.Height.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Height) : 0;
                                length += childObj.Length.IsNotNullOrEmpty() ? Convert.ToDecimal(childObj.Length) : 0;
                            });

                            FBookingAcknowledgeChild fbaChild = new FBookingAcknowledgeChild();
                            fbaChild = fbaChilds.FirstOrDefault();
                            fbaChild.BookingQty = fbaChilds.Sum(x => x.BookingQty);
                            fbaChild.Height = height.ToString();
                            fbaChild.Length = length.ToString();

                            var freeConcept = this.GetFreeConceptMaster(fbaChild, entity, isBDS, conceptID, conceptNo, true); //true means group by ItemMasterID and BookingID
                            entityFreeConcepts.Add(freeConcept);

                            #endregion FreeConceptMaster

                            #region FreeConceptColorChild

                            if (!string.IsNullOrEmpty(freeConcept.Color))
                            {
                                int conceptChildId = maxConceptChildId++;
                                var colorChild = this.GetFreeConceptColorChild(fbaChild, freeConcept, conceptChildId);
                                childColors.Add(colorChild);
                            }

                            #endregion FreeConceptColorChild

                            #region FreeConceptMR

                            if (isBDS == 2 && ChildItems.Count() > 0)
                            {
                                int fCMRMasterID = maxConceptMRId++;
                                var freeConceptMR = this.GetFreeConceptMRMaster(entity, fCMRMasterID, conceptID, isBDS, isRevised);
                                entityFreeMRs.Add(freeConceptMR);

                                ChildItems.ForEach(ybci =>
                                {
                                    int mRChildId = maxConceptMRChildId++;
                                    var fBAChildDetail = this.GetFBookingAcknowledgeChildDetail(maxFBAckChildDetailId++, fbaChild, entity, ybci);
                                    ybci.ItemMasterID = tempObj.ItemMasterID;
                                    ybci = this.CheckAndSetSegmentValueDesc(ybci, tempObj);
                                    var mrChild = this.GetFreeConceptMRChild(mRChildId, freeConceptMR, ybci);
                                    childMRs.Add(mrChild);
                                });
                            }
                            #endregion

                            i++;
                        });
                    }
                }
                List<FreeConceptMaster> SaveEntityFreeConcepts = new List<FreeConceptMaster>();
                List<FreeConceptMaster> DeleteEntityFreeConcepts = new List<FreeConceptMaster>();
                SaveEntityFreeConcepts = entityFreeConcepts.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityFreeConcepts = entityFreeConcepts.Where(x => x.EntityState == EntityState.Deleted).ToList();
                List<FreeConceptChildColor> SaveChildColors = new List<FreeConceptChildColor>();
                List<FreeConceptChildColor> DeleteChildColors = new List<FreeConceptChildColor>();
                SaveChildColors = childColors.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteChildColors = childColors.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptMRMaster> SaveEntityFreeMRs = new List<FreeConceptMRMaster>();
                List<FreeConceptMRMaster> DeleteEntityFreeMRs = new List<FreeConceptMRMaster>();
                SaveEntityFreeMRs = entityFreeMRs.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteEntityFreeMRs = entityFreeMRs.Where(x => x.EntityState == EntityState.Deleted).ToList();

                List<FreeConceptMRChild> SaveChildMRs = new List<FreeConceptMRChild>();
                List<FreeConceptMRChild> DeleteChildMRs = new List<FreeConceptMRChild>();
                SaveChildMRs = childMRs.Where(x => x.EntityState != EntityState.Deleted).ToList();
                DeleteChildMRs = childMRs.Where(x => x.EntityState == EntityState.Deleted).ToList();

                await _service.SaveAsync(DeleteEntityFreeConcepts, transaction);
                await _service.SaveAsync(DeleteChildColors, transaction);
                if (isBDS == 2)
                {
                    await _service.SaveAsync(DeleteChildMRs, transaction);
                    await _service.SaveAsync(DeleteEntityFreeMRs, transaction);
                }
                await _service.SaveAsync(SaveEntityFreeConcepts, transaction);
                foreach (FreeConceptMaster item in SaveEntityFreeConcepts)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMaster_1", item.EntityState, userId, item.ConceptID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.ConceptID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(SaveChildColors, transaction);
                foreach (FreeConceptChildColor item in SaveChildColors)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptChildColor_1", item.EntityState, userId, item.CCColorID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptChildColor_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.CCColorID }, transaction, 30, CommandType.StoredProcedure);
                }
                if (isBDS == 2)
                {
                    await _service.SaveAsync(SaveEntityFreeMRs, transaction);
                    foreach (FreeConceptMRMaster item in SaveEntityFreeMRs)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRMaster_1", item.EntityState, userId, item.FCMRMasterID);
                        await _connection.ExecuteAsync("sp_Validation_FreeConceptMRMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRMasterID }, transaction, 30, CommandType.StoredProcedure);
                    }
                    await _service.SaveAsync(SaveChildMRs, transaction);
                    foreach (FreeConceptMRChild item in SaveChildMRs)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, userId, item.FCMRChildID);
                        await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }
                #endregion Free Concept

                transaction.Commit();

                return _yarnBookingNo;
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        public async Task UpdateBulkStatus(List<FBookingAcknowledge> entities, List<YarnBookingChildItem> yarnBookingChildItems, List<YarnBookingMaster> yarnBookings, List<YarnBookingChild> yarnBookingChilds, List<FreeConceptMRChild> mrChilds, bool isYarnRevised, bool pmcApprove = false, bool IsRejectByPMC = false, int UserId = 0)//int UserId alamin
        {
            SqlTransaction transaction = null;
            try
            {
                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();
                await _service.SaveAsync(entities, transaction);

                //if (isYarnRevised & !IsRejectByPMC)
                if (pmcApprove == true || IsRejectByPMC == true)
                {
                    await _connection.ExecuteAsync("spYarnBooking_BK", new { YBookingNo = yarnBookings[0].YBookingNo, IsFinalApprove = pmcApprove, IsFinalReject = IsRejectByPMC, IsFabricRevision = false }, transaction, 30, CommandType.StoredProcedure);
                    if (pmcApprove == true && isYarnRevised)
                    {
                        yarnBookings.ForEach(x =>
                        {
                            x.RevisionNo = x.RevisionNo + 1;//RevisionNo Update 1
                            x.RevisedDate = DateTime.Now;
                            x.DateRevised = DateTime.Now;
                        });
                    }
                }

                if (yarnBookingChilds.Count() > 0)
                {
                    List<YarnBookingChild> ybChilds = await this.GetYBChilds(yarnBookingChilds);//alamin UserId
                    yarnBookingChilds = new List<YarnBookingChild>();
                    yarnBookingChildItems = new List<YarnBookingChildItem>();
                    //List<BulkBookingGreyYarnUtilization> gGreyYarnUtilizationList = new List<BulkBookingGreyYarnUtilization>();
                    ybChilds.ForEach(c =>
                    {
                        yarnBookingChilds.Add(c);
                        yarnBookingChildItems.AddRange(c.ChildItems);
                    });
                    await _service.SaveAsync(yarnBookingChilds, transaction);
                    foreach (YarnBookingChild item in yarnBookingChilds)
                    {
                        if (item.EntityState != EntityState.Deleted)
                        {
                            decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                            if (totalDis != 100)
                            {
                                throw new Exception("Total Distribution Qty is not 100%. => UpdateBulkStatus => BDSAcknowledgeService");
                            }
                        }
                        if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                        {
                            throw new Exception("Qty In KG missing => UpdateBulkStatus => BDSAcknowledgeService");
                        }
                        int countChildItem = yarnBookingChildItems.Count(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted);
                        if (countChildItem == 0 && item.EntityState != EntityState.Deleted)
                        {
                            throw new Exception("Yarn Item missing => UpdateBulkStatus => BDSAcknowledgeService");
                        }
                    }
                    await _service.SaveAsync(yarnBookingChildItems, transaction);
                }
                else if (yarnBookingChildItems.Count() > 0)
                {
                    await _service.SaveAsync(yarnBookingChildItems, transaction);
                }
                await _service.SaveAsync(yarnBookings, transaction);
                foreach (YarnBookingMaster item in yarnBookings)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                    await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = UserId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Update_KnittingPlanMaster_RevisionNo", item.EntityState, UserId, item.YBookingID);
                    await _connection.ExecuteAsync("sp_Update_KnittingPlanMaster_RevisionNo", new { EntityState = item.EntityState, UserId = UserId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                }


                List<YarnPRMaster> yarnPRs = await this.GetPRs(entities);
                if (yarnPRs.Count() > 0)
                {
                    List<YarnPRChild> yarnPRChilds = new List<YarnPRChild>();
                    yarnPRs.ForEach(c =>
                    {
                        yarnPRChilds.AddRange(c.Childs);
                    });

                    await _service.SaveAsync(yarnPRs, transaction);
                    await _service.SaveAsync(yarnPRChilds, transaction);
                }
                await _service.SaveAsync(mrChilds, transaction);
                foreach (FreeConceptMRChild item in mrChilds)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, UserId, item.FCMRChildID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = UserId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                }

                transaction.Commit();
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        public async Task UpdateBulkStatus2(int userId, List<FBookingAcknowledge> entities,
            List<YarnBookingChildItem> yarnBookingChildItems,
            List<YarnBookingMaster> yarnBookings,
            List<YarnBookingChild> yarnBookingChilds,
            List<FreeConceptMRChild> mrChilds)
        {
            SqlTransaction transaction = null;
            try
            {
                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();
                await _service.SaveAsync(entities, transaction);

                List<FBookingAcknowledgeChild> FBAckChildList = new List<FBookingAcknowledgeChild>();
                List<FBookingAcknowledgeChildDetails> FBAckChildDetailsList = new List<FBookingAcknowledgeChildDetails>();
                foreach (FBookingAcknowledge obj in entities)
                {
                    foreach (FBookingAcknowledgeChild objc in obj.FBookingChild)
                    {
                        FBAckChildList.Add(objc);
                        foreach (FBookingAcknowledgeChildDetails objcd in objc.ChildDetails)
                        {
                            FBAckChildDetailsList.Add(objcd);
                        }
                    }
                }
                await _service.SaveAsync(FBAckChildList, transaction);
                foreach (FBookingAcknowledgeChild item in FBAckChildList)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FBookingAcknowledgeChild_1", item.EntityState, userId, item.BookingChildID, item.ConsumptionID, item.BookingID, item.ItemMasterID, item.AcknowledgeID);
                    await _connection.ExecuteAsync("sp_Validation_FBookingAcknowledgeChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.BookingChildID, SecondParamValue = item.ConsumptionID, ThirdParamValue = item.BookingID, ForthParamValue = item.ItemMasterID, FifthParamValue = item.AcknowledgeID }, transaction, 30, CommandType.StoredProcedure);
                }
                await _service.SaveAsync(FBAckChildDetailsList, transaction);

                if (yarnBookingChilds.Count() > 0)
                {
                    List<YarnBookingChild> ybChilds = await this.GetYBChilds(yarnBookingChilds);//alamin UserId
                    yarnBookingChilds = new List<YarnBookingChild>();
                    yarnBookingChildItems = new List<YarnBookingChildItem>();
                    List<BulkBookingFinishFabricUtilization> fFUtilizationList = new List<BulkBookingFinishFabricUtilization>();
                    List<FBookingAcknowledgeChildGFUtilization> gFUtilizationList = new List<FBookingAcknowledgeChildGFUtilization>();
                    List<BulkBookingGreyYarnUtilization> greyYarnUtilizationList = new List<BulkBookingGreyYarnUtilization>();
                    List<BulkBookingDyedYarnUtilization> dyedYarnUtilizationList = new List<BulkBookingDyedYarnUtilization>();
                    ybChilds.ForEach(c =>
                    {
                        yarnBookingChilds.Add(c);
                        yarnBookingChildItems.AddRange(c.ChildItems);

                        fFUtilizationList.AddRange(c.FinishFabricUtilizationPopUpList);
                        gFUtilizationList.AddRange(c.GreyFabricUtilizationPopUpList);
                    });
                    if (yarnBookingChildItems.Count > 0)
                    {
                        yarnBookingChildItems.ForEach(gy =>
                        {
                            if (gy.GreyYarnUtilizationPopUpList.Count > 0)
                                greyYarnUtilizationList.AddRange(CommonFunction.DeepClone(gy.GreyYarnUtilizationPopUpList));

                            if (gy.DyedYarnUtilizationPopUpList.Count > 0)
                                dyedYarnUtilizationList.AddRange(CommonFunction.DeepClone(gy.DyedYarnUtilizationPopUpList));

                        });
                    }
                    await _service.SaveAsync(yarnBookingChilds, transaction);
                    foreach (YarnBookingChild item in yarnBookingChilds)
                    {
                        if (item.EntityState != EntityState.Deleted)
                        {
                            decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                            if (totalDis != 100)
                            {
                                throw new Exception("Total Distribution Qty is not 100%. => UpdateBulkStatus2 => BDSAcknowledgeService");
                            }
                        }

                        if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                        {
                            throw new Exception("Qty In KG missing => UpdateBulkStatus2 => BDSAcknowledgeService");
                        }

                        int countChildItem = yarnBookingChildItems.Count(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted);
                        if (countChildItem == 0 && item.EntityState != EntityState.Deleted)
                        {
                            throw new Exception("Yarn Item missing => UpdateBulkStatus2 => BDSAcknowledgeService");
                        }
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChild_1", item.EntityState, userId, item.YBChildID);
                        await _connection.ExecuteAsync("sp_Validation_YarnBookingChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildID }, transaction, 30, CommandType.StoredProcedure);
                    }
                    await _service.SaveAsync(yarnBookingChildItems, transaction);
                    foreach (YarnBookingChildItem item in yarnBookingChildItems)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChildItem_1", item.EntityState, userId, item.YBChildItemID);
                        await _connection.ExecuteAsync("sp_Validation_YarnBookingChildItem_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildItemID }, transaction, 30, CommandType.StoredProcedure);
                    }
                    await _service.SaveAsync(fFUtilizationList, transaction);
                    await _service.SaveAsync(gFUtilizationList, transaction);
                    await _service.SaveAsync(greyYarnUtilizationList, transaction);
                    await _service.SaveAsync(dyedYarnUtilizationList, transaction);
                }
                else if (yarnBookingChildItems.Count() > 0)
                {
                    await _service.SaveAsync(yarnBookingChildItems, transaction);
                    foreach (YarnBookingChildItem item in yarnBookingChildItems)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingChildItem_1", item.EntityState, userId, item.YBChildItemID);
                        await _connection.ExecuteAsync("sp_Validation_YarnBookingChildItem_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBChildItemID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }
                if (yarnBookings.Count() > 0)
                {
                    await _service.SaveAsync(yarnBookings, transaction);
                    foreach (YarnBookingMaster item in yarnBookings)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                        await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                List<YarnPRMaster> yarnPRs = await this.GetPRs(entities);
                if (yarnPRs.Count() > 0)
                {
                    List<YarnPRChild> yarnPRChilds = new List<YarnPRChild>();
                    yarnPRs.ForEach(c =>
                    {
                        yarnPRChilds.AddRange(c.Childs);
                    });

                    await _service.SaveAsync(yarnPRs, transaction);
                    await _service.SaveAsync(yarnPRChilds, transaction);
                }
                await _service.SaveAsync(mrChilds, transaction);
                foreach (FreeConceptMRChild item in mrChilds)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, userId, item.FCMRChildID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                }
                transaction.Commit();
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        public async Task UpdateBulkStatusYarnRevision(int userId, List<FBookingAcknowledge> entities,
            List<YarnBookingChildItemRevision> yarnBookingChildItemsRevision,
            List<YarnBookingMaster> yarnBookings,
            List<YarnBookingChild> yarnBookingChilds,
            List<FreeConceptMRChild> mrChilds,
            bool pmcApprove = false, bool IsRejectByPMC = false)
        {
            SqlTransaction transaction = null;
            try
            {
                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();
                await _service.SaveAsync(entities, transaction);

                List<FBookingAcknowledgeChild> FBAckChildList = new List<FBookingAcknowledgeChild>();
                List<FBookingAcknowledgeChildDetails> FBAckChildDetailsList = new List<FBookingAcknowledgeChildDetails>();
                foreach (FBookingAcknowledge obj in entities)
                {
                    foreach (FBookingAcknowledgeChild objc in obj.FBookingChild)
                    {
                        FBAckChildList.Add(objc);
                        foreach (FBookingAcknowledgeChildDetails objcd in objc.ChildDetails)
                        {
                            FBAckChildDetailsList.Add(objcd);
                        }
                    }
                }
                await _service.SaveAsync(FBAckChildList, transaction);
                await _service.SaveAsync(FBAckChildDetailsList, transaction);

                if (yarnBookingChilds.Count() > 0)
                {
                    List<YarnBookingChild> ybChilds = await this.GetYBChilds(yarnBookingChilds);
                    yarnBookingChilds = new List<YarnBookingChild>();
                    yarnBookingChildItemsRevision = new List<YarnBookingChildItemRevision>();
                    List<BulkBookingFinishFabricUtilization> fFUtilizationList = new List<BulkBookingFinishFabricUtilization>();
                    List<FBookingAcknowledgeChildGFUtilization> gFUtilizationList = new List<FBookingAcknowledgeChildGFUtilization>();
                    List<BulkBookingGreyYarnUtilization> greyYarnUtilizationList = new List<BulkBookingGreyYarnUtilization>();
                    List<BulkBookingDyedYarnUtilization> dyedYarnUtilizationList = new List<BulkBookingDyedYarnUtilization>();
                    List<YarnBookingChildItem> tempChildItems = new List<YarnBookingChildItem>();
                    ybChilds.ForEach(c =>
                    {
                        yarnBookingChilds.Add(c);
                        yarnBookingChildItemsRevision.AddRange(c.ChildItemsRevision);
                        fFUtilizationList.AddRange(c.FinishFabricUtilizationPopUpList);
                        gFUtilizationList.AddRange(c.GreyFabricUtilizationPopUpList);
                        tempChildItems.AddRange(c.ChildItems);
                    });
                    if (tempChildItems.Count > 0)
                    {
                        tempChildItems.ForEach(gy =>
                        {
                            if (gy.GreyYarnUtilizationPopUpList.Count > 0)
                                greyYarnUtilizationList.AddRange(CommonFunction.DeepClone(gy.GreyYarnUtilizationPopUpList));
                            if (gy.DyedYarnUtilizationPopUpList.Count > 0)
                                dyedYarnUtilizationList.AddRange(CommonFunction.DeepClone(gy.DyedYarnUtilizationPopUpList));

                        });
                    }
                    foreach (YarnBookingChild item in yarnBookingChilds)
                    {
                        if (item.EntityState != EntityState.Deleted)
                        {
                            decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                            if (totalDis != 100)
                            {
                                throw new Exception("Total Distribution Qty is not 100%. => UpdateBulkStatusYarnRevision => BDSAcknowledgeService");
                            }
                        }
                        if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                        {
                            throw new Exception("Qty In KG missing => UpdateBulkStatusYarnRevision => BDSAcknowledgeService");
                        }
                    }
                    await _service.SaveAsync(yarnBookingChilds, transaction);
                    await _service.SaveAsync(yarnBookingChildItemsRevision, transaction);
                    await _service.SaveAsync(fFUtilizationList, transaction);
                    await _service.SaveAsync(gFUtilizationList, transaction);
                    await _service.SaveAsync(greyYarnUtilizationList, transaction);
                    await _service.SaveAsync(dyedYarnUtilizationList, transaction);
                }
                else if (yarnBookingChildItemsRevision.Count() > 0)
                {
                    await _service.SaveAsync(yarnBookingChildItemsRevision, transaction);
                }
                if (pmcApprove)
                {
                    //await _service.ExecuteAsync("spBackupYarnBookingChildItem_Full_New", new { YBookingNo = yarnBookings[0].YBookingNo, IsRejectByPMC= IsRejectByPMC }, 30, CommandType.StoredProcedure);
                    await _connection.ExecuteAsync("spBackupYarnBookingChildItem", new { YBookingNo = yarnBookings[0].YBookingNo, IsRejectByPMC = IsRejectByPMC, YarnBookingRevisionTypeID = yarnBookings[0].YarnBookingRevisionTypeID }, transaction, 30, CommandType.StoredProcedure);
                }
                if (yarnBookings.Count() > 0)
                {
                    if (pmcApprove)
                    {
                        yarnBookings.ForEach(x =>
                        {
                            x.RevisionNo = x.RevisionNo + 1;
                            x.IsRevised = false;
                        });
                    }
                    await _service.SaveAsync(yarnBookings, transaction);
                    foreach (YarnBookingMaster item in yarnBookings)
                    {
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_YarnBookingMaster_1", item.EntityState, userId, item.YBookingID);
                        await _connection.ExecuteAsync("sp_Validation_YarnBookingMaster_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                        //await _service.ValidationSingleAsync(item, transaction, "sp_Update_KnittingPlanMaster_RevisionNo", item.EntityState, userId, item.YBookingID);
                        await _connection.ExecuteAsync("sp_Update_KnittingPlanMaster_RevisionNo", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.YBookingID }, transaction, 30, CommandType.StoredProcedure);
                    }
                }

                List<YarnPRMaster> yarnPRs = await this.GetPRs(entities);
                if (yarnPRs.Count() > 0)
                {
                    List<YarnPRChild> yarnPRChilds = new List<YarnPRChild>();
                    yarnPRs.ForEach(c =>
                    {
                        yarnPRChilds.AddRange(c.Childs);
                    });

                    await _service.SaveAsync(yarnPRs, transaction);
                    await _service.SaveAsync(yarnPRChilds, transaction);
                }
                await _service.SaveAsync(mrChilds, transaction);
                foreach (FreeConceptMRChild item in mrChilds)
                {
                    //await _service.ValidationSingleAsync(item, transaction, "sp_Validation_FreeConceptMRChild_1", item.EntityState, userId, item.FCMRChildID);
                    await _connection.ExecuteAsync("sp_Validation_FreeConceptMRChild_1", new { EntityState = item.EntityState, UserId = userId, PrimaryKeyId = item.FCMRChildID }, transaction, 30, CommandType.StoredProcedure);
                }



                transaction.Commit();

            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {

                _connection.Close();
            }
        }
        public async Task SaveRevision(List<FBookingAcknowledge> entities,
         List<YarnBookingChildItemRevision> yarnBookingChildItemsRevision,
         List<YarnBookingMaster> yarnBookings,
         List<YarnBookingChild> yarnBookingChilds,
         List<FreeConceptMRChild> mrChilds,
         List<YarnBookingMaster_New_RevisionReason> RevisionReasonList = null)
        {
            SqlTransaction transaction = null;
            try
            {
                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();
                await _service.SaveAsync(entities, transaction);

                List<FBookingAcknowledgeChild> FBAckChildList = new List<FBookingAcknowledgeChild>();
                List<FBookingAcknowledgeChildDetails> FBAckChildDetailsList = new List<FBookingAcknowledgeChildDetails>();
                foreach (FBookingAcknowledge obj in entities)
                {
                    foreach (FBookingAcknowledgeChild objc in obj.FBookingChild)
                    {
                        FBAckChildList.Add(objc);
                        foreach (FBookingAcknowledgeChildDetails objcd in objc.ChildDetails)
                        {
                            FBAckChildDetailsList.Add(objcd);
                        }
                    }
                }
                await _service.SaveAsync(FBAckChildList, transaction);
                await _service.SaveAsync(FBAckChildDetailsList, transaction);

                if (yarnBookingChilds.Count() > 0)
                {
                    List<YarnBookingChild> ybChilds = await this.GetYBChilds(yarnBookingChilds);
                    yarnBookingChilds = new List<YarnBookingChild>();
                    //yarnBookingChildItemsRevision = new List<YarnBookingChildItemRevision>();
                    List<BulkBookingFinishFabricUtilization> fFUtilizationList = new List<BulkBookingFinishFabricUtilization>();
                    List<FBookingAcknowledgeChildGFUtilization> gFUtilizationList = new List<FBookingAcknowledgeChildGFUtilization>();

                    List<YarnBookingChildItem> TempChildItems = new List<YarnBookingChildItem>();
                    ybChilds.ForEach(c =>
                    {
                        yarnBookingChilds.Add(c);
                        //yarnBookingChildItemsRevision.AddRange(c.ChildItemsRevision);
                        fFUtilizationList.AddRange(c.FinishFabricUtilizationPopUpList);
                        gFUtilizationList.AddRange(c.GreyFabricUtilizationPopUpList);
                        TempChildItems.AddRange(c.ChildItems);
                    });

                    //var addedChilds = yarnBookingChildItemsRevision.FindAll(x => x.EntityState == EntityState.Added);
                    //int maxChildItemId = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, addedChilds.Count);

                    //foreach (var item in addedChilds)
                    //{
                    //    item.YBChildItemID = maxChildItemId++;
                    //}
                    //yarnBookingChildItemsRevision.ForEach(c =>
                    //{
                    //    c.EntityState = EntityState.Added;
                    //});

                    List<BulkBookingGreyYarnUtilization> greyYarnUtilizationList = new List<BulkBookingGreyYarnUtilization>();
                    List<BulkBookingDyedYarnUtilization> dyedYarnUtilizationList = new List<BulkBookingDyedYarnUtilization>();
                    if (TempChildItems.Count > 0)
                    {
                        TempChildItems.ForEach(gy =>
                        {
                            if (gy.GreyYarnUtilizationPopUpList.Count > 0)
                                greyYarnUtilizationList.AddRange(CommonFunction.DeepClone(gy.GreyYarnUtilizationPopUpList));

                            if (gy.DyedYarnUtilizationPopUpList.Count > 0)
                                dyedYarnUtilizationList.AddRange(CommonFunction.DeepClone(gy.DyedYarnUtilizationPopUpList));

                        });
                    }
                    foreach (YarnBookingChild item in yarnBookingChilds)
                    {
                        if (item.EntityState != EntityState.Deleted)
                        {
                            decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                            if (totalDis != 100)
                            {
                                throw new Exception("Total Distribution Qty is not 100%. => SaveRevision => BDSAcknowledgeService");
                            }
                        }
                        if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                        {
                            throw new Exception("Qty In KG missing => SaveRevision => BDSAcknowledgeService");
                        }
                    }
                    await _service.SaveAsync(yarnBookingChilds, transaction);
                    //await _service.SaveAsync(yarnBookingChildItemsRevision, transaction);
                    await _service.SaveAsync(fFUtilizationList, transaction);
                    await _service.SaveAsync(gFUtilizationList, transaction);
                    await _service.SaveAsync(greyYarnUtilizationList, transaction);
                    await _service.SaveAsync(dyedYarnUtilizationList, transaction);
                }
                //else if (yarnBookingChildItemsRevision.Count() > 0)
                if (yarnBookingChildItemsRevision.Count() > 0)
                {

                    var addedChilds = yarnBookingChildItemsRevision.FindAll(x => x.EntityState == EntityState.Added);
                    int maxChildItemId = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, addedChilds.Count);

                    foreach (var item in addedChilds)
                    {
                        item.YBChildItemID = maxChildItemId++;
                    }
                    yarnBookingChildItemsRevision.ForEach(c =>
                    {
                        c.EntityState = EntityState.Added;
                    });

                    await _service.SaveAsync(yarnBookingChildItemsRevision, transaction);
                }
                if (yarnBookings.Count() > 0)
                {
                    await _service.SaveAsync(yarnBookings, transaction);
                }

                List<YarnPRMaster> yarnPRs = await this.GetPRs(entities);
                if (yarnPRs.Count() > 0)
                {
                    List<YarnPRChild> yarnPRChilds = new List<YarnPRChild>();
                    yarnPRs.ForEach(c =>
                    {
                        yarnPRChilds.AddRange(c.Childs);
                    });

                    await _service.SaveAsync(yarnPRs, transaction);
                    await _service.SaveAsync(yarnPRChilds, transaction);
                }
                await _service.SaveAsync(mrChilds, transaction);

                #region Yarn Booking Revision Reason

                await _connection.ExecuteAsync("spDeleteRevisionReason", new { YBookingNo = yarnBookings[0].YBookingNo }, transaction, 30, CommandType.StoredProcedure);

                if (RevisionReasonList.Count > 0)
                {
                    int maxChildId = 0;

                    maxChildId = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster_New_RevisionReason, RevisionReasonList.Count);
                    foreach (YarnBookingMaster_New_RevisionReason item in RevisionReasonList)
                    {
                        item.YBRReasonID = maxChildId++;
                    }
                    await _service.SaveAsync(RevisionReasonList, transaction);
                }

                #endregion

                transaction.Commit();
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }
        private async Task<List<YarnPRMaster>> GetPRs(List<FBookingAcknowledge> entities)
        {
            List<YarnPRMaster> yarnPRs = new List<YarnPRMaster>();

            entities.ForEach(entity =>
            {
                if (entity.PRMaster.IsNotNull())
                {
                    yarnPRs.Add(entity.PRMaster);
                }
            });

            if (yarnPRs.Count() > 0)
            {
                int countMaster = 0,
                    countChild = 0;

                yarnPRs.ForEach(c =>
                {
                    if (c.EntityState == EntityState.Added)
                    {
                        countMaster++;
                    }
                    c.Childs.ForEach(ci =>
                    {
                        if (ci.EntityState == EntityState.Added)
                        {
                            countChild++;
                        }
                    });
                });

                int maxMaster = await _service.GetMaxIdAsync(TableNames.YARN_PR_MASTER, countMaster);
                int maxChild = await _service.GetMaxIdAsync(TableNames.YARN_PR_CHILD, countChild);

                yarnPRs.ForEach(c =>
                {
                    if (c.EntityState == EntityState.Added)
                    {
                        c.YarnPRMasterID = maxMaster++;
                    }
                    c.Childs.ForEach(ci =>
                    {
                        if (ci.EntityState == EntityState.Added)
                        {
                            ci.YarnPRChildID = maxChild++;
                            ci.YarnPRMasterID = c.YarnPRMasterID;
                        }
                    });
                });
            }
            return yarnPRs;
        }
        private async Task<List<YarnBookingChild>> GetYBChilds(List<YarnBookingChild> yarnBookingChilds)
        {
            int countChild = 0,
                countChildItem = 0,
                countFFUtilization = 0,
                countGFUtilization = 0,
                countGreyYarnUtilization = 0,
                countDyedYarnUtilization = 0;

            yarnBookingChilds.ForEach(c =>
            {
                if (c.EntityState == EntityState.Added)
                {
                    countChild++;
                }
                c.ChildItems.ForEach(ci =>
                {
                    if (ci.EntityState == EntityState.Added)
                    {
                        countChildItem++;
                    }
                    countGreyYarnUtilization += ci.GreyYarnUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
                    countDyedYarnUtilization += ci.DyedYarnUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
                });

                countFFUtilization += c.FinishFabricUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
                countGFUtilization += c.GreyFabricUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
            });
            int maxChild = await _service.GetMaxIdAsync(TableNames.YarnBookingChild, countChild);
            int maxChildItem = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, countChildItem);
            int maxFFUtilization = await _service.GetMaxIdAsync(TableNames.BulkBookingFinishFabricUtilization, countFFUtilization);
            int maxGFUtilization = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildGFUtilization, countGFUtilization);
            int maxGreyYarnUtilization = await _service.GetMaxIdAsync(TableNames.BulkBookingGreyYarnUtilization, countGreyYarnUtilization);
            int maxDyedYarnUtilization = await _service.GetMaxIdAsync(TableNames.BulkBookingDyedYarnUtilization, countDyedYarnUtilization);

            yarnBookingChilds.ForEach(c =>
            {
                if (c.EntityState == EntityState.Added)
                {
                    c.YBChildID = maxChild++;
                }
                c.ChildItems.ForEach(ci =>
                {
                    if (ci.EntityState == EntityState.Added)
                    {
                        ci.YBChildItemID = maxChildItem++;
                        ci.YBChildID = c.YBChildID;
                        ci.YBookingID = c.YBookingID;
                    }

                    ci.GreyYarnUtilizationPopUpList.ForEach(gy =>
                    {
                        if (gy.EntityState == EntityState.Added)
                        {
                            gy.BBGreyYarnUtilizationID = maxGreyYarnUtilization++;
                            gy.YBChildItemID = ci.YBChildItemID;
                            gy.YBChildID = c.YBChildID;
                            gy.YBookingID = c.YBookingID;
                        }
                    });
                    ci.DyedYarnUtilizationPopUpList.ForEach(gy =>
                    {
                        if (gy.EntityState == EntityState.Added)
                        {
                            gy.BBDyedYarnUtilizationID = maxDyedYarnUtilization++;
                            gy.YBChildItemID = ci.YBChildItemID;
                            gy.YBChildID = c.YBChildID;
                            gy.YBookingID = c.YBookingID;
                        }
                    });
                });

                c.FinishFabricUtilizationPopUpList.ForEach(ci =>
                {
                    if (ci.EntityState == EntityState.Added)
                    {
                        ci.BBFFUtilizationID = maxFFUtilization++;
                        ci.YBChildID = (c.EntityState == EntityState.Added) ? c.YBChildID : ci.YBChildID;
                        //ci.AddedBy = 
                        //ci.DateAdded =
                    }
                    else if (ci.EntityState == EntityState.Modified)
                    {
                        //ci.UpdatedBy =
                        //ci.DateUpdated =
                    }
                });

                c.GreyFabricUtilizationPopUpList.ForEach(ci =>
                {
                    if (ci.EntityState == EntityState.Added)
                    {
                        ci.GFUtilizationID = maxGFUtilization++;
                        ci.YBChildID = (c.EntityState == EntityState.Added) ? c.YBChildID : ci.YBChildID;
                    }
                });
            });
            return yarnBookingChilds;
        }

        private async Task<List<YarnBookingChild>> GetYBChilds_ForUtilizationPOPUP(List<YarnBookingChild> yarnBookingChilds)
        {
            int countFFUtilization = 0,
                countGFUtilization = 0,
                countGreyYarnUtilization = 0,
                countDyedYarnUtilization = 0;

            yarnBookingChilds.ForEach(c =>
            {
                c.ChildItems.ForEach(ci =>
                {

                    countGreyYarnUtilization += ci.GreyYarnUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
                    countDyedYarnUtilization += ci.DyedYarnUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
                });

                countFFUtilization += c.FinishFabricUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
                countGFUtilization += c.GreyFabricUtilizationPopUpList.Where(x => x.EntityState == EntityState.Added).Count();
            });

            int maxFFUtilization = await _service.GetMaxIdAsync(TableNames.BulkBookingFinishFabricUtilization, countFFUtilization);
            int maxGFUtilization = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildGFUtilization, countGFUtilization);
            int maxGreyYarnUtilization = await _service.GetMaxIdAsync(TableNames.BulkBookingGreyYarnUtilization, countGreyYarnUtilization);
            int maxDyedYarnUtilization = await _service.GetMaxIdAsync(TableNames.BulkBookingDyedYarnUtilization, countDyedYarnUtilization);

            yarnBookingChilds.ForEach(c =>
            {

                c.ChildItems.ForEach(ci =>
                {
                    ci.GreyYarnUtilizationPopUpList.ForEach(gy =>
                    {
                        if (gy.EntityState == EntityState.Added)
                        {
                            gy.BBGreyYarnUtilizationID = maxGreyYarnUtilization++;
                            gy.YBChildItemID = ci.YBChildItemID;
                            gy.YBChildID = c.YBChildID;
                            gy.YBookingID = c.YBookingID;
                        }
                    });
                    ci.DyedYarnUtilizationPopUpList.ForEach(gy =>
                    {
                        if (gy.EntityState == EntityState.Added)
                        {
                            gy.BBDyedYarnUtilizationID = maxDyedYarnUtilization++;
                            gy.YBChildItemID = ci.YBChildItemID;
                            gy.YBChildID = c.YBChildID;
                            gy.YBookingID = c.YBookingID;
                        }
                    });
                });

                c.FinishFabricUtilizationPopUpList.ForEach(ci =>
                {
                    if (ci.EntityState == EntityState.Added)
                    {
                        ci.BBFFUtilizationID = maxFFUtilization++;
                        ci.YBChildID = (c.EntityState == EntityState.Added) ? c.YBChildID : ci.YBChildID;
                        //ci.AddedBy =
                        //ci.DateAdded =
                    }
                    else if (ci.EntityState == EntityState.Modified)
                    {
                        //ci.UpdatedBy =
                        //ci.DateUpdated =
                    }
                });

                c.GreyFabricUtilizationPopUpList.ForEach(ci =>
                {
                    if (ci.EntityState == EntityState.Added)
                    {
                        ci.GFUtilizationID = maxGFUtilization++;
                        ci.YBChildID = (c.EntityState == EntityState.Added) ? c.YBChildID : ci.YBChildID;
                    }
                });
            });
            return yarnBookingChilds;
        }
        public async Task<SampleBookingMaster> GetAllAsync(int id)
        {
            var sql = $@"
            ;Select * From {DbNames.EPYSL}..SampleBookingMaster Where BookingID = {id}";

            try
            {
                await _gmtservice.Connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(sql);
                SampleBookingMaster data = await records.ReadFirstOrDefaultAsync<SampleBookingMaster>();
                Guard.Against.NullObject(data);
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                _gmtservice.Connection.Close();
            }
        }
        public async Task<SampleBookingMaster> UpdateSampleBookingAsync(SampleBookingMaster entity)
        {
            SqlTransaction transaction = null;
            try
            {
                await _gmtservice.Connection.OpenAsync();
                transaction = _gmtservice.Connection.BeginTransaction();

                List<SampleBookingConsumptionChild> conChilds = new List<SampleBookingConsumptionChild>();
                entity.Childs.ForEach(c =>
                {
                    conChilds.AddRange(c.Childs);
                });

                await _gmtservice.SaveSingleAsync(entity, transaction);
                await _gmtservice.SaveAsync(entity.Childs, transaction);
                await _gmtservice.SaveAsync(conChilds, transaction);

                transaction.Commit();

                return entity;
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _gmtservice.Connection.Close();
            }
        }
        public async Task<FBookingAcknowledge> UpdateFBookingAck(FBookingAcknowledge entity)
        {
            SqlTransaction transaction = null;
            try
            {
                await _service.Connection.OpenAsync();
                transaction = _service.Connection.BeginTransaction();

                int count = 0;
                count = await _service.GetMaxIdAsync(TableNames.FBBOOKING_ACKNOWLEDGE_CHILD, entity.FBookingChild.Count(x => x.EntityState == EntityState.Added));

                entity.FBookingChild.Where(x => x.EntityState == EntityState.Added).ToList().ForEach(x =>
                {
                    x.BookingChildID = count++;
                    x.AcknowledgeID = entity.FBAckID;
                    x.BookingID = entity.BookingID;
                });

                await _service.SaveSingleAsync(entity, transaction);
                await _service.SaveAsync(entity.FBookingChild, transaction);

                #region Sample Booking Consumption Update

                if (entity.FBookingChild.Count() > 0)
                {
                    var query = "";
                    entity.FBookingChild.ForEach(x =>
                    {
                        query = $@"Update {DbNames.EPYSL}..SampleBookingConsumption Set ConsumptionQty = {x.BookingQty} Where ConsumptionID = {x.ConsumptionID} AND BookingID = {entity.BookingID};";
                    });
                    await _gmtservice.ExecuteAsync(query, AppConstants.GMT_CONNECTION);
                }

                #endregion Sample Booking Master

                transaction.Commit();

                return entity;
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _service.Connection.Close();
            }
        }
        public async Task<FreeConceptMaster> GetAllAsyncR(int id)
        {
            var sql = $@"
            ;select item.BookingID from FreeConceptMaster FC
			INNER JOIN FBookingAcknowledge FA ON FA.BookingID = item.BookingID
        where item.BookingID= {id}";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(sql);
                FreeConceptMaster data = await records.ReadFirstOrDefaultAsync<FreeConceptMaster>();
                Guard.Against.NullObject(data);
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledgeChildColor>> GetAllAsyncColorIDs(string colorIDs)
        {
            var sql = $@"
            ;select a.ColorCode,b.SegmentValue ColorName from {DbNames.EPYSL}..FabricColorBookSetup a
            inner join {DbNames.EPYSL}..ItemSegmentValue b on b.SegmentValueID=a.ColorID
            where SegmentValue  IN(Select * From [dbo].[fnReturnStringArray] ('{colorIDs}', ','))";

            try
            {
                await _gmtservice.Connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(sql);
                List<FBookingAcknowledgeChildColor> obj = records.Read<FBookingAcknowledgeChildColor>().ToList();
                return obj;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                _gmtservice.Connection.Close();
            }
        }
        public async Task<List<FBookingAcknowledgeChild>> GetRefSourceItem(PaginationInfo paginationInfo, int bookingID, int consumptionID)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By Construction ASC" : paginationInfo.OrderBy;

            var query = $@"
                WITH
                F AS 
                (
                    SELECT RS.BRefDetailsID, RS.RefSourceID, RS.RefSourceNo, BM.BookingNo,
                    RS.ConsumptionID, RS.ItemMasterID, RS.SubGroupID,
                    Construction = ISV1.SegmentValue, 
		            Composition = ISV2.SegmentValue,
		            Color = CASE WHEN RS.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
		            GSM = CASE WHEN RS.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END,
                    RefSourceName = ETV.ValueName
                    FROM {DbNames.EPYSL}..BookingChildReferenceSource RS
                    LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = RS.RefSourceID
                    LEFT JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID = RS.BookingID 
                    INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = RS.ItemMasterID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                    LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
                    WHERE RS.BookingID = {bookingID} AND RS.ConsumptionID = {consumptionID} 
                )

                Select *, COUNT(*) Over() TotalRows From F
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<FBookingAcknowledgeChild>(query);
        }

        public async Task<SampleBookingMaster> GetSampleBooking(int id)
        {
            var sql = $@"
            ;Select * From {DbNames.EPYSL}..SampleBookingMaster Where BookingID = {id}

            ;SELECT * FROM {DbNames.EPYSL}..SampleBookingConsumption WHERE BookingID = {id}

            ;SELECT CC.* FROM {DbNames.EPYSL}..SampleBookingConsumptionChild CC WHERE CC.BookingID = {id}";

            try
            {
                await _gmtservice.Connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(sql);
                SampleBookingMaster data = await records.ReadFirstOrDefaultAsync<SampleBookingMaster>();
                Guard.Against.NullObject(data);
                data.Childs = records.Read<SampleBookingConsumption>().ToList();
                List<SampleBookingConsumptionChild> conChilds = records.Read<SampleBookingConsumptionChild>().ToList();
                data.Childs.ForEach(c =>
                {
                    SampleBookingConsumptionChild conChild = conChilds.Find(x => x.ConsumptionID == c.ConsumptionID);
                    if (conChild.IsNotNull())
                    {
                        c.Childs.Add(conChild);
                    }
                });
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                _gmtservice.Connection.Close();
            }
        }
        public async Task UpdateEntityAsync(SampleBookingMaster entity)
        {
            SqlTransaction transaction = null;
            try
            {
                await _gmtservice.Connection.OpenAsync();
                transaction = _gmtservice.Connection.BeginTransaction();

                await _gmtservice.SaveSingleAsync(entity, transaction);

                transaction.Commit();
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _gmtservice.Connection.Close();
            }
        }
        public async Task UpdateEntityAsyncR(FreeConceptMaster entity)
        {
            SqlTransaction transaction = null;
            try
            {
                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();

                await _service.SaveSingleAsync(entity, transaction);

                transaction.Commit();
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }

        public async Task<BDSDependentTNACalander> GetAllAsyncBDSTNAEvent_HK()
        {
            var sql = $@"
            ;Select * From BDSTNAEvent_HK";

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(sql);
                BDSDependentTNACalander data = new BDSDependentTNACalander();
                data.BDSTNAEvent_HKNames = records.Read<BDSTNAEvent_HK>().ToList();
                return data;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }

        public async Task<List<BDSDependentTNACalander>> GetPagedAsyncTNA(PaginationInfo paginationInfo)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BDSEventID ASC" : paginationInfo.OrderBy;

            var sql = $@"--Master Information
                        Select * From (SELECT BT.BDSEventID, FA.BookingNo, BH.EventDescription,CTO.ShortName BuyerName,
                        CCT.TeamName BuyerTeamName,BT.BookingID, FA.DateAdded AcknowledgeDate,
                        BT.BookingChildID,BT.EventID,BT.TNADays,BT.BookingDate,BT.EventDate,BT.CompleteDate,
                        BT.RevisionPending,BT.RevisionCompleteDate,BT.SeqNo,BT.SystemEvent,BT.HasDependent,
                        BT.IsHoliDay,BT.IsPass,IM.ItemName,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,
                        SBC.Segment3Desc Color,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,T.TechnicalName,
                        KMS.SubClassName MachineType,BC.LengthYds,BC.LengthInch,SBC.Segment6Desc DyeingType,SBC.Remarks Instruction,Count(*) Over() TotalRows
                        from BDSDependentTNACalander BT
                        INNER JOIN BDSTNAEvent_HK BH ON BH.EventID=BT.EventID
                        INNER JOIN FBookingAcknowledge FA ON FA.BookingID=BT.BookingID
                        INNER JOIN FBookingAcknowledgeChild BC ON BC.BookingChildID=BT.BookingChildID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = BC.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingConsumption SBC ON SBC.BookingID = SBM.BookingID AND SBC.ConsumptionID = BC.ConsumptionID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BC.ItemMasterID
                        INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BC.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BC.A1ValueID
                        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BC.YarnBrandID
                        LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BC.TechnicalNameID
                        LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BC.MachineTypeId
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FA.BuyerTeamID
                    ) A ";

            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BDSDependentTNACalander>(sql);
        }

        public async Task<List<BDSDependentTNACalander>> GetPagedAsyncEventlist(PaginationInfo paginationInfo)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By EventID ASC" : paginationInfo.OrderBy;

            var sql = $@"--Master Information
                        SELECT EventID, EventDescription  from BDSTNAEvent_HK ";

            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BDSDependentTNACalander>(sql);
        }

        public async Task<List<BDSDependentTNACalander>> GetBoookingList(PaginationInfo paginationInfo)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BookingID ASC" : paginationInfo.OrderBy;

            var sql =
                $@"--BookingList
                    ;Select * From (SELECT FA.BookingID,FA.BookingNo
                    From FBookingAcknowledge FA
                    Group By FA.BookingID,FA.BookingNo
                ) A ";

            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BDSDependentTNACalander>(sql);
        }

        public async Task<List<BDSDependentTNACalander>> GetbookingWiseList(PaginationInfo paginationInfo, DateTime FromDate, DateTime ToDate)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BDSEventID ASC" : paginationInfo.OrderBy;

            var sql = $@"
            ;Select * From (SELECT BT.BDSEventID, FA.BookingNo, BH.EventDescription,CTO.ShortName BuyerName,
                        CCT.TeamName BuyerTeamName,BT.BookingID, FA.DateAdded AcknowledgeDate,
                        BT.BookingChildID,BT.EventID,BT.TNADays,BT.BookingDate,BT.EventDate,BT.CompleteDate,
                        BT.RevisionPending,BT.RevisionCompleteDate,BT.SeqNo,BT.SystemEvent,BT.HasDependent,
                        BT.IsHoliDay,BT.IsPass,IM.ItemName,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,
                        SBC.Segment3Desc Color,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,T.TechnicalName,
                        KMS.SubClassName MachineType,BC.LengthYds,BC.LengthInch,SBC.Segment6Desc DyeingType,SBC.Remarks Instruction,Count(*) Over() TotalRows
                        from BDSDependentTNACalander BT
                        INNER JOIN BDSTNAEvent_HK BH ON BH.EventID=BT.EventID
                        INNER JOIN FBookingAcknowledge FA ON FA.BookingID=BT.BookingID
                        INNER JOIN FBookingAcknowledgeChild BC ON BC.BookingChildID=BT.BookingChildID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = BC.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingConsumption SBC ON SBC.BookingID = SBM.BookingID AND SBC.ConsumptionID = BC.ConsumptionID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BC.ItemMasterID
                        INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BC.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BC.A1ValueID
                        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BC.YarnBrandID
                        LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BC.TechnicalNameID
                        LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BC.MachineTypeId
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FA.BuyerTeamID
                        WHERE BT.EventDate between '{FromDate.ToShortDateString()}' AND '{ToDate.ToShortDateString()}'
            ) A ";
            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BDSDependentTNACalander>(sql);
            //try
            //{
            //    await _connection.OpenAsync();
            //    var records = await _connection.QueryMultipleAsync(sql);
            //    BDSDependentTNACalander data = await records.ReadFirstOrDefaultAsync<BDSDependentTNACalander>();
            //    Guard.Against.NullObject(data);
            //    return data;
            //}
            //catch (Exception ex)
            //{
            //    throw ex;
            //}
            //finally
            //{
            //    _connection.Close();
            //}
        }

        public async Task<List<BDSDependentTNACalander>> GetbookingWiseTNAList(PaginationInfo paginationInfo, String ListData)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BDSEventID ASC" : paginationInfo.OrderBy;

            var sql = $@"
            ;Select * From (SELECT BT.BDSEventID, FA.BookingNo, BH.EventDescription,CTO.ShortName BuyerName,
                        CCT.TeamName BuyerTeamName,BT.BookingID, FA.DateAdded AcknowledgeDate,
                        BT.BookingChildID,BT.EventID,BT.TNADays,BT.BookingDate,BT.EventDate,BT.CompleteDate,
                        BT.RevisionPending,BT.RevisionCompleteDate,BT.SeqNo,BT.SystemEvent,BT.HasDependent,
                        BT.IsHoliDay,BT.IsPass,IM.ItemName,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,
                        SBC.Segment3Desc Color,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,T.TechnicalName,
                        KMS.SubClassName MachineType,BC.LengthYds,BC.LengthInch,SBC.Segment6Desc DyeingType,SBC.Remarks Instruction,Count(*) Over() TotalRows
                        from BDSDependentTNACalander BT
                        INNER JOIN BDSTNAEvent_HK BH ON BH.EventID=BT.EventID
                        INNER JOIN FBookingAcknowledge FA ON FA.BookingID=BT.BookingID
                        INNER JOIN FBookingAcknowledgeChild BC ON BC.BookingChildID=BT.BookingChildID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = BC.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingConsumption SBC ON SBC.BookingID = SBM.BookingID AND SBC.ConsumptionID = BC.ConsumptionID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BC.ItemMasterID
                        INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BC.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BC.A1ValueID
                        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BC.YarnBrandID
                        LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BC.TechnicalNameID
                        LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BC.MachineTypeId
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FA.BuyerTeamID
                        WHERE BT.BookingID IN ({ListData})
                ) A ";
            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BDSDependentTNACalander>(sql);
        }

        public async Task<List<BDSDependentTNACalander>> GetEventWiseTNA(PaginationInfo paginationInfo, String EventListData)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By BDSEventID ASC" : paginationInfo.OrderBy;

            var sql = $@"
            ;Select * From (SELECT BT.BDSEventID, FA.BookingNo, BH.EventDescription,CTO.ShortName BuyerName,
                        CCT.TeamName BuyerTeamName,BT.BookingID, FA.DateAdded AcknowledgeDate,
                        BT.BookingChildID,BT.EventID,BT.TNADays,BT.BookingDate,BT.EventDate,BT.CompleteDate,
                        BT.RevisionPending,BT.RevisionCompleteDate,BT.SeqNo,BT.SystemEvent,BT.HasDependent,
                        BT.IsHoliDay,BT.IsPass,IM.ItemName,SBC.Segment1Desc Construction,SBC.Segment2Desc Composition,
                        SBC.Segment3Desc Color,SBC.Segment4Desc GSM,SBC.Segment5Desc FabricWidth,T.TechnicalName,
                        KMS.SubClassName MachineType,BC.LengthYds,BC.LengthInch,SBC.Segment6Desc DyeingType,SBC.Remarks Instruction,Count(*) Over() TotalRows
                        from BDSDependentTNACalander BT
                        INNER JOIN BDSTNAEvent_HK BH ON BH.EventID=BT.EventID
                        INNER JOIN FBookingAcknowledge FA ON FA.BookingID=BT.BookingID
                        INNER JOIN FBookingAcknowledgeChild BC ON BC.BookingChildID=BT.BookingChildID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingMaster SBM ON SBM.BookingID = BC.BookingID
                        INNER JOIN {DbNames.EPYSL}..SampleBookingConsumption SBC ON SBC.BookingID = SBM.BookingID AND SBC.ConsumptionID = BC.ConsumptionID
                        INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = BC.ItemMasterID
                        INNER JOIN {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = BC.SubGroupID
                        LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = BC.A1ValueID
                        LEFT JOIN {DbNames.EPYSL}..EntityTypeValue ETV ON ETV.ValueID = BC.YarnBrandID
                        LEFT JOIN FabricTechnicalName T ON T.TechnicalNameId = BC.TechnicalNameID
                        LEFT JOIN KnittingMachineSubClass KMS ON KMS.SubClassID = BC.MachineTypeId
                        LEFT JOIN {DbNames.EPYSL}..Contacts CTO ON CTO.ContactID = FA.BuyerID
                        LEFT JOIN {DbNames.EPYSL}..ContactCategoryTeam CCT ON CCT.CategoryTeamID = FA.BuyerTeamID
                        WHERE BT.EventID IN ({EventListData})
                ) A ";
            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BDSDependentTNACalander>(sql);
        }

        public async Task<List<BDSDependentTNACalander>> GetEventWiseList(PaginationInfo paginationInfo, int eventID)
        {
            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By DepenEventID ASC" : paginationInfo.OrderBy;

            var sql = $@"Select * From (
                SELECT BDE.DepenEventID,BDH.EventDescription
                FROM BDSDependentTNAEvent_HK BDE
                INNER JOIN BDSTNAEvent_HK BDH ON BDH.EventID=BDE.DepenEventID
                WHERE BDE.EventID='{eventID}'
            ) A ";
            sql += $@"
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BDSDependentTNACalander>(sql);
        }

        private FreeConceptMaster GetFreeConceptMaster(FBookingAcknowledgeChild item, FBookingAcknowledge entity, int isBDS, int conceptId, string conceptNo, bool isGroupBy = false)
        {
            if (item.Length.IsNullOrEmpty() || !CommonFunction.IsNumberValue(item.Length)) item.Length = 0.ToString();
            if (item.Height.IsNullOrEmpty() || !CommonFunction.IsNumberValue(item.Height)) item.Height = 0.ToString();

            if (isBDS == EnumBDSType.Bulk)
            {
                if (item.TotalQty == 0) item.TotalQty = item.SubGroupID == 1 ? item.BookingQty : item.BookingQtyKG;
            }

            var freeConcept = new FreeConceptMaster()
            {
                ConceptID = conceptId,
                ConceptNo = conceptNo,
                ConceptDate = DateTime.Now,
                TrialNo = 0,
                TrialDate = null,
                ConceptFor = 1093,
                KnittingTypeID = item.KnittingTypeId,
                ConstructionId = item.ConstructionId,
                CompositionId = item.CompositionId,
                GSMId = item.GSMId,
                Qty = item.BookingQty,
                //AddedBy = entity.AddedBy,
                AddedBy = item.AddedBy,
                UpdatedBy = entity.AddedBy,
                DateAdded = item.DateAdded,
                DateUpdated = DateTime.Now,
                TechnicalNameId = entity.PageName == "FabricBookingAcknowledge" ? 0 : item.TechnicalNameId,
                SubGroupID = item.SubGroupID,
                MCSubClassID = entity.PageName == "FabricBookingAcknowledge" ? 0 : item.MachineTypeId,
                CompanyID = item.TextileCompanyID,
                IsBDS = isBDS,
                ItemMasterID = item.ItemMasterID, //Use for Join For Bulk
                BookingID = item.BookingID, //Use for Join For Bulk
                BookingChildID = isGroupBy ? 0 : item.BookingChildID, //No Need For Bulk
                ConsumptionID = isGroupBy ? 0 : item.ConsumptionID, //No Need For Bulk
                ExportOrderID = item.ExportOrderID,
                BuyerID = entity.BuyerID,
                BuyerTeamID = entity.BuyerTeamID,
                MachineGauge = item.MachineGauge,
                MachineDia = item.MachineDia,
                BrandID = item.BrandID,
                PreProcessRevNo = entity.RevisionNo,
                RevisionNo = entity.RevisionNo,
                GroupConceptNo = entity.BookingNo,

                ConceptTypeID = 1,
                FUPartID = item.FUPartID,
                ColorID = item.ColorID,
                Color = item.Color,

                ProduceKnittingQty = item.GreyProdQty,

                Length = item.SubGroupID == 1 ? 0 : Convert.ToDecimal(item.Length),
                Width = item.SubGroupID == 1 ? 0 : Convert.ToDecimal(item.Height),

                QtyInKG = item.SubGroupID == 1 || isBDS == EnumBDSType.Bulk ? item.BookingQtyKG : (Convert.ToDecimal(item.Length) *
                           Convert.ToDecimal(item.Height) *
                           Convert.ToDecimal(0.045) *
                           item.BookingQty) / 420,

                ExcessPercentage = item.ExcessPercentage,
                ExcessQty = item.ExcessQty,
                ExcessQtyInKG = item.ExcessQtyInKG,
                TotalQty = item.TotalQty,

                TotalQtyInKG = item.SubGroupID == 1 || isBDS == EnumBDSType.Bulk ? item.BookingQtyKG : (Convert.ToDecimal(item.Length) *
                           Convert.ToDecimal(item.Height) *
                           Convert.ToDecimal(0.045) *
                           item.BookingQty) / 420
            };
            return freeConcept;
        }

        private FreeConceptChildColor GetFreeConceptColorChild(FBookingAcknowledgeChild item, FreeConceptMaster freeConcept, int conceptChildId)
        {
            var colorChild = new FreeConceptChildColor()
            {
                CCColorID = conceptChildId,
                ColorId = item.ColorID,
                ColorName = item.Color,
                ConceptID = freeConcept.ConceptID,
                ColorCode = item.ColorCode
            };
            return colorChild;
        }

        private FreeConceptMRMaster GetFreeConceptMRMaster(FBookingAcknowledge entity, int fCMRMasterID, int conceptID, int isBDS, bool isRevised)
        {
            var freeConceptMR = new FreeConceptMRMaster()
            {
                FCMRMasterID = fCMRMasterID,
                ReqDate = DateTime.Now,
                ConceptID = conceptID,
                TrialNo = 0,
                //PreProcessRevNo = entity.PreRevisionNo,
                //RevisionNo = entity.RevisionNo,
                //RevisionBy = entity.AddedBy,
                //RevisionDate = DateTime.Now,
                IsBDS = isBDS,
                FabricID = 0
            };
            if (!isRevised)
            {
                freeConceptMR.PreProcessRevNo = entity.PreRevisionNo;
                freeConceptMR.RevisionNo = entity.RevisionNo;

                freeConceptMR.RevisionBy = entity.AddedBy;
                freeConceptMR.RevisionDate = DateTime.Now;
            }
            return freeConceptMR;
        }

        private FreeConceptMRChild GetFreeConceptMRChild(int fCMRChildID, FreeConceptMRMaster freeConceptMR, YarnBookingChildItem ybci)
        {
            var mrChild = new FreeConceptMRChild()
            {
                FCMRChildID = fCMRChildID,
                FCMRMasterID = freeConceptMR.FCMRMasterID,
                ItemMasterID = ybci.YItemMasterID,
                YD = ybci.YD,
                YDItem = ybci.YDItem,
                ReqQty = ybci.RequiredQty,
                UnitID = ybci.UnitID,
                Remarks = ybci.Remarks,
                ReqCone = 0,
                ShadeCode = ybci.ShadeCode,
                Distribution = ybci.Distribution,
                BookingQty = ybci.BookingQty,
                Allowance = ybci.Allowance,
                YBChildItemID = ybci.YBChildItemID,
                YarnCategory = CommonFunction.GetYarnShortForm(ybci.Segment1ValueDesc, ybci.Segment2ValueDesc, ybci.Segment3ValueDesc, ybci.Segment4ValueDesc, ybci.Segment5ValueDesc, ybci.Segment6ValueDesc, ybci.ShadeCode)
            };
            return mrChild;
        }

        private FBookingAcknowledgeChildDetails GetFBookingAcknowledgeChildDetail(int bookingCDetailsID, FBookingAcknowledgeChild item, FBookingAcknowledge entity, YarnBookingChildItem ybci)
        {
            var fBAChildDetail = new FBookingAcknowledgeChildDetails()
            {
                BookingCDetailsID = bookingCDetailsID,
                BookingChildID = item.BookingChildID,
                BookingID = entity.BookingID,
                ConsumptionID = item.ConsumptionID,
                ItemGroupID = item.ItemGroupID,
                SubGroupID = ybci.SubGroupId,
                ItemMasterID = ybci.YItemMasterID,
                OrderBankPOID = item.OrderBankPOID,
                ColorID = item.ColorID,
                SizeID = item.SizeID,
                TechPackID = item.TechPackID,
                ConsumptionQty = item.ConsumptionQty,
                BookingQty = ybci.BookingQty,
                BookingUnitID = item.BookingUnitID,
                RequisitionQty = ybci.RequiredQty,
                AddedBy = entity.AddedBy,
                DateAdded = DateTime.Now,
                ExecutionCompanyID = item.ExecutionCompanyID,
                DeliveryStart = null,
                DeliveryEnd = null,
                SecondarySizeID = item.SizeID,
                TechnicalNameId = item.TechnicalNameId,
                StitchLength = ybci.StitchLength
            };
            return fBAChildDetail;
        }
        private async Task<List<YarnBookingMaster>> GetYarnBooking(FBookingAcknowledge fBookingAck, bool isAddition)
        {
            var subGroupIDs = string.Join(",", fBookingAck.FBookingChild.Select(x => x.SubGroupID).Distinct());
            var subGroupIDsSplit = subGroupIDs.Split(',');

            int countYBC = 0,
                countYBCI = 0,
                countFUtilization = 0,
                countGFUtilization = 0,
                countReplacement = 0,
                countBBGreyYarnUtilization = 0,
                countBBDyedYarnUtilization = 0,
                countReqQTYReplacement = 0;

            fBookingAck.FBookingChild.ForEach(m =>
            {
                countYBC += 1;
                countYBCI += m.ChildItems.Count();
                countFUtilization += m.FinishFabricUtilizationPopUpList.Where(f => f.EntityState == EntityState.Added).Count();
                countGFUtilization += m.GreyFabricUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                countReplacement += m.AdditionalReplacementPOPUPList.Where(g => g.EntityState == EntityState.Added).Count();

                m.ChildItems.ForEach(n =>
                {
                    countBBGreyYarnUtilization += n.GreyYarnUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                    countBBDyedYarnUtilization += n.DyedYarnUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                    countReqQTYReplacement += n.AdditionalNetReqPOPUPList.Where(g => g.EntityState == EntityState.Added).Count();
                });
            });
            int maxYBM = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster, subGroupIDsSplit.Count());
            int maxYBC = await _service.GetMaxIdAsync(TableNames.YarnBookingChild, countYBC);
            int maxYBCI = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, countYBCI);

            int maxBBFFUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingFinishFabricUtilization, countFUtilization);
            int maxGFUtilizationID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildGFUtilization, countGFUtilization);
            int maxReplacementID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildReplacement, countReplacement);
            int maxBBGreyYarnUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingGreyYarnUtilization, countBBGreyYarnUtilization);
            int maxBBDyedYarnUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingDyedYarnUtilization, countBBDyedYarnUtilization);
            int maxReqQTYReplacementID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildItemNetReqQTY, countReqQTYReplacement);

            List<YarnBookingMaster> YarnBookings = new List<YarnBookingMaster>();

            foreach (string sGid in subGroupIDsSplit)
            {
                int subGroupID = Convert.ToInt32(sGid);
                FBookingAcknowledgeChild childObj = fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).First();
                YarnBookingMaster yarnBooking = new YarnBookingMaster();
                yarnBooking.YBookingID = maxYBM++;

                if (!isAddition)
                {
                    yarnBooking.YBookingNo = fBookingAck.BookingNo + "-YB";
                }
                else
                {
                    if (fBookingAck.ParentYBookingNo.IsNotNullOrEmpty())
                    {
                        string parentYBookingNo = fBookingAck.ParentYBookingNo;
                        int maxCount = await this.GetMaxAdditionNoYB(parentYBookingNo);
                        yarnBooking.YBookingNo = parentYBookingNo + "-Add-" + maxCount;
                        yarnBooking.IsAddition = true;
                        yarnBooking.AdditionNo = maxCount;
                    }
                }

                _yarnBookingNo = yarnBooking.YBookingNo;

                yarnBooking.PreProcessRevNo = fBookingAck.RevisionNo;
                yarnBooking.RevisionNo = 0;
                yarnBooking.YBookingDate = DateTime.Now;
                yarnBooking.BuyerID = fBookingAck.BuyerID;
                yarnBooking.BuyerTeamID = fBookingAck.BuyerTeamID;
                yarnBooking.CompanyID = fBookingAck.CompanyID;
                yarnBooking.ExportOrderID = fBookingAck.ExportOrderID;
                yarnBooking.BookingID = childObj.BookingID;
                yarnBooking.Acknowledge = false;
                yarnBooking.AcknowledgeDate = null;
                yarnBooking.Remarks = childObj.Remarks;
                yarnBooking.AddedBy = fBookingAck.AddedBy;
                yarnBooking.DateAdded = DateTime.Now;
                yarnBooking.WithoutOB = fBookingAck.WithoutOB;
                yarnBooking.SubGroupID = childObj.SubGroupID;
                yarnBooking.IsSample = fBookingAck.IsSample;
                yarnBooking.UnAcknowledge = fBookingAck.IsUnAcknowledge;
                yarnBooking.UnAcknowledgeDate = fBookingAck.UnAcknowledgeDate;
                yarnBooking.UnAcknowledgeBy = fBookingAck.UnAcknowledgeBy ?? default(int);

                fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).ToList().ForEach(child =>
                {
                    if (!child.Length.IsNotNullOrEmpty()) child.Length = 0.ToString();
                    if (!child.Height.IsNotNullOrEmpty()) child.Height = 0.ToString();

                    YarnBookingChild yarnBookingChild = new YarnBookingChild();
                    YarnBookingChildItem yarnBookingChildItem = new YarnBookingChildItem();

                    foreach (var childItem in child.ChildItems) //child.ChildItems
                    {
                        int indexF = yarnBooking.Childs.FindIndex(x => x.BookingChildID == child.BookingChildID);
                        if (indexF < 0)
                        {
                            childItem.SubGroupId = subGroupID;

                            #region YarnBookingChild
                            yarnBookingChild = new YarnBookingChild();
                            yarnBookingChild.YBChildID = maxYBC++;
                            yarnBookingChild.YBookingID = yarnBooking.YBookingID;
                            yarnBookingChild.BookingChildID = child.BookingChildID;
                            yarnBookingChild.ConsumptionID = child.ConsumptionID;
                            yarnBookingChild.ItemMasterID = childItem.ItemMasterID;
                            yarnBookingChild.YarnTypeID = 0;
                            yarnBookingChild.YarnBrandID = child.YarnBrandID;
                            yarnBookingChild.FUPartID = child.FUPartID;
                            yarnBookingChild.BookingUnitID = child.BookingUnitID;
                            if (isAddition)
                            {
                                yarnBookingChild.BookingQty = child.BookingQty;
                            }
                            else
                            {
                                yarnBookingChild.BookingQty = child.BookingQty;
                            }
                            if (child.IsForFabric)
                            {
                                yarnBookingChild.IsForFabric = true;
                                yarnBookingChild.BookingQty = child.BookingQty;
                            }
                            yarnBookingChild.FTechnicalName = "";
                            yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                            yarnBookingChild.LastDCDate = child.LastDCDate;
                            yarnBookingChild.ClosingRemarks = child.ClosingRemarks;

                            yarnBookingChild.GreyReqQty = child.GreyReqQty;
                            yarnBookingChild.GreyLeftOverQty = child.GreyLeftOverQty;
                            yarnBookingChild.GreyProdQty = child.GreyProdQty;
                            yarnBookingChild.FinishFabricUtilizationQty = child.FinishFabricUtilizationQty;
                            yarnBookingChild.ReqFinishFabricQty = child.ReqFinishFabricQty;
                            //yarnBookingChild.GreyProdQtyPCS = child.GreyProdQtyPCS;

                            /*yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                 Convert.ToDecimal(child.Height) *
                                 Convert.ToDecimal(0.045) *
                                 child.BookingQty) / 420;*/
                            yarnBookingChild.QtyInKG = child.BookingQtyKG;
                            yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                            yarnBookingChild.ExcessQty = child.ExcessQty;
                            yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                            yarnBookingChild.TotalQty = child.TotalQty;
                            yarnBookingChild.TotalQtyInKG = child.BookingQtyKG;
                            /*yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                            Convert.ToDecimal(child.Height) *
                                            Convert.ToDecimal(0.045) *
                                            child.TotalQty) / 420;*/

                            yarnBookingChild.YarnAllowance = child.YarnAllowance;
                            yarnBookingChild.FinishFabricUtilizationQty = child.FinishFabricUtilizationQty;
                            yarnBookingChild.ReqFinishFabricQty = child.ReqFinishFabricQty;
                            child.FinishFabricUtilizationPopUpList.ForEach(gr =>
                            {
                                gr.YBChildID = yarnBookingChild.YBChildID;
                                switch (gr.EntityState)
                                {
                                    case EntityState.Added:
                                        gr.BBFFUtilizationID = maxBBFFUtilizationID++;
                                        break;

                                    case EntityState.Modified:

                                        break;

                                    case EntityState.Unchanged:
                                    case EntityState.Deleted:
                                        break;

                                    default:
                                        break;
                                }

                            });
                            child.GreyFabricUtilizationPopUpList.ForEach(gr =>
                            {
                                gr.YBChildID = yarnBookingChild.YBChildID;
                                switch (gr.EntityState)
                                {
                                    case EntityState.Added:
                                        gr.GFUtilizationID = maxGFUtilizationID++;
                                        break;

                                    case EntityState.Modified:

                                        break;

                                    case EntityState.Unchanged:
                                    case EntityState.Deleted:
                                        break;

                                    default:
                                        break;
                                }

                            });
                            child.AdditionalReplacementPOPUPList.ForEach(gr =>
                            {
                                gr.YBChildID = yarnBookingChild.YBChildID;
                                switch (gr.EntityState)
                                {
                                    case EntityState.Added:
                                        gr.ReplacementID = maxReplacementID++;
                                        break;

                                    case EntityState.Modified:

                                        break;

                                    case EntityState.Unchanged:
                                    case EntityState.Deleted:
                                        break;

                                    default:
                                        break;
                                }

                            });
                            yarnBookingChild.FinishFabricUtilizationPopUpList = child.FinishFabricUtilizationPopUpList;
                            yarnBookingChild.GreyFabricUtilizationPopUpList = child.GreyFabricUtilizationPopUpList;
                            yarnBookingChild.AdditionalReplacementPOPUPList = child.AdditionalReplacementPOPUPList;

                            yarnBooking.Childs.Add(yarnBookingChild);
                        }
                        #endregion

                        #region YarnBookingChildItem
                        yarnBookingChildItem = new YarnBookingChildItem();
                        yarnBookingChildItem.YBChildItemID = maxYBCI++;
                        yarnBookingChildItem.YBChildID = yarnBookingChild.YBChildID;
                        yarnBookingChildItem.YBookingID = yarnBooking.YBookingID;
                        yarnBookingChildItem.YItemMasterID = childItem.ItemMasterID;
                        yarnBookingChildItem.UnitID = childItem.UnitID;
                        yarnBookingChildItem.Blending = childItem.Blending;
                        yarnBookingChildItem.YarnCategory = childItem.YarnCategory;
                        yarnBookingChildItem.Distribution = childItem.Distribution;
                        yarnBookingChildItem.BookingQty = childItem.BookingQty;
                        yarnBookingChildItem.Allowance = childItem.Allowance;
                        yarnBookingChildItem.RequiredQty = childItem.RequiredQty;
                        yarnBookingChildItem.ShadeCode = childItem.ShadeCode;
                        yarnBookingChildItem.Remarks = childItem.Remarks;
                        yarnBookingChildItem.Specification = childItem.Specification;
                        yarnBookingChildItem.YD = childItem.YD;
                        yarnBookingChildItem.YDItem = childItem.YDItem;
                        yarnBookingChildItem.StitchLength = childItem.StitchLength;
                        yarnBookingChildItem.PhysicalCount = childItem.PhysicalCount;
                        yarnBookingChildItem.BatchNo = childItem.BatchNo;
                        yarnBookingChildItem.SpinnerId = childItem.SpinnerId;
                        yarnBookingChildItem.YarnLotNo = childItem.YarnLotNo;
                        yarnBookingChildItem.YarnReqQty = childItem.YarnReqQty;
                        yarnBookingChildItem.YarnLeftOverQty = childItem.YarnLeftOverQty;
                        yarnBookingChildItem.YarnBalanceQty = childItem.YarnBalanceQty;
                        yarnBookingChildItem.YarnPly = childItem.YarnPly;
                        yarnBookingChildItem.GreyAllowance = childItem.GreyAllowance;
                        yarnBookingChildItem.YDAllowance = childItem.YDAllowance;
                        yarnBookingChildItem.NetYarnReqQty = childItem.NetYarnReqQty;
                        yarnBookingChildItem.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                        yarnBookingChildItem.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                        childItem.GreyYarnUtilizationPopUpList.ForEach(gr =>
                        {
                            gr.YBookingID = yarnBooking.YBookingID;
                            gr.YBChildID = yarnBookingChild.YBChildID;
                            gr.YBChildItemID = yarnBookingChildItem.YBChildItemID;

                            switch (gr.EntityState)
                            {
                                case EntityState.Added:
                                    gr.BBGreyYarnUtilizationID = maxBBGreyYarnUtilizationID++;
                                    break;

                                case EntityState.Modified:

                                    break;

                                case EntityState.Unchanged:
                                case EntityState.Deleted:
                                    break;

                                default:
                                    break;
                            }

                        });
                        childItem.DyedYarnUtilizationPopUpList.ForEach(gr =>
                        {
                            gr.YBookingID = yarnBooking.YBookingID;
                            gr.YBChildID = yarnBookingChild.YBChildID;
                            gr.YBChildItemID = yarnBookingChildItem.YBChildItemID;

                            switch (gr.EntityState)
                            {
                                case EntityState.Added:
                                    gr.BBDyedYarnUtilizationID = maxBBDyedYarnUtilizationID++;
                                    break;

                                case EntityState.Modified:

                                    break;

                                case EntityState.Unchanged:
                                case EntityState.Deleted:
                                    break;

                                default:
                                    break;
                            }
                        });
                        childItem.AdditionalNetReqPOPUPList.ForEach(gr =>
                        {
                            gr.YBChildItemID = yarnBookingChildItem.YBChildItemID;

                            switch (gr.EntityState)
                            {
                                case EntityState.Added:
                                    gr.ReplacementID = maxReqQTYReplacementID++;
                                    break;

                                case EntityState.Modified:

                                    break;

                                case EntityState.Unchanged:
                                case EntityState.Deleted:
                                    break;

                                default:
                                    break;
                            }
                        });
                        yarnBookingChildItem.GreyYarnUtilizationPopUpList = childItem.GreyYarnUtilizationPopUpList;
                        yarnBookingChildItem.DyedYarnUtilizationPopUpList = childItem.DyedYarnUtilizationPopUpList;
                        yarnBookingChildItem.AdditionalNetReqPOPUPList = childItem.AdditionalNetReqPOPUPList;

                        yarnBooking.ChildItems.Add(yarnBookingChildItem);
                        #endregion
                    }
                });
                YarnBookings.Add(yarnBooking);
            }

            return YarnBookings;
        }
        private async Task<List<YarnBookingMaster>> GetYarnBookingWithRevision(FBookingAcknowledge fBookingAck, bool isAddition)
        {
            var subGroupIDs = string.Join(",", fBookingAck.FBookingChild.Select(x => x.SubGroupID).Distinct());
            var subGroupIDsSplit = subGroupIDs.Split(',');

            int countYBC = 0,
                countYBCI = 0;

            fBookingAck.FBookingChild.ForEach(m =>
            {
                countYBC += 1;
                countYBCI += m.ChildItemsRevision.Count();
            });

            int maxYBM = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster, subGroupIDsSplit.Count());
            int maxYBC = await _service.GetMaxIdAsync(TableNames.YarnBookingChild, countYBC);
            int maxYBCI = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, countYBCI);

            List<YarnBookingMaster> YarnBookings = new List<YarnBookingMaster>();

            foreach (string sGid in subGroupIDsSplit)
            {
                int subGroupID = Convert.ToInt32(sGid);
                FBookingAcknowledgeChild childObj = fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).First();
                YarnBookingMaster yarnBooking = new YarnBookingMaster();
                yarnBooking.YBookingID = maxYBM++;

                if (!isAddition)
                {
                    yarnBooking.YBookingNo = fBookingAck.BookingNo + "-YB";
                }
                else
                {
                    if (fBookingAck.ParentYBookingNo.IsNotNullOrEmpty())
                    {
                        string parentYBookingNo = fBookingAck.ParentYBookingNo;
                        int maxCount = await this.GetMaxAdditionNoYB(parentYBookingNo);
                        yarnBooking.YBookingNo = parentYBookingNo + "-Add-" + maxCount;
                        yarnBooking.IsAddition = true;
                        yarnBooking.AdditionNo = maxCount;
                    }
                }

                _yarnBookingNo = yarnBooking.YBookingNo;

                yarnBooking.PreProcessRevNo = fBookingAck.RevisionNo;
                yarnBooking.RevisionNo = 0;
                yarnBooking.YBookingDate = DateTime.Now;
                yarnBooking.BuyerID = fBookingAck.BuyerID;
                yarnBooking.BuyerTeamID = fBookingAck.BuyerTeamID;
                yarnBooking.CompanyID = fBookingAck.CompanyID;
                yarnBooking.ExportOrderID = fBookingAck.ExportOrderID;
                yarnBooking.BookingID = childObj.BookingID;
                yarnBooking.Acknowledge = false;
                yarnBooking.AcknowledgeDate = null;
                yarnBooking.Remarks = childObj.Remarks;
                yarnBooking.AddedBy = fBookingAck.AddedBy;
                yarnBooking.DateAdded = DateTime.Now;
                yarnBooking.WithoutOB = fBookingAck.WithoutOB;
                yarnBooking.SubGroupID = childObj.SubGroupID;
                yarnBooking.IsSample = fBookingAck.IsSample;
                yarnBooking.UnAcknowledge = fBookingAck.IsUnAcknowledge;
                yarnBooking.UnAcknowledgeDate = fBookingAck.UnAcknowledgeDate;
                yarnBooking.UnAcknowledgeBy = fBookingAck.UnAcknowledgeBy ?? default(int);

                fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).ToList().ForEach(child =>
                {
                    if (!child.Length.IsNotNullOrEmpty()) child.Length = 0.ToString();
                    if (!child.Height.IsNotNullOrEmpty()) child.Height = 0.ToString();

                    YarnBookingChild yarnBookingChild = new YarnBookingChild();
                    YarnBookingChildItemRevision yarnBookingChildItemRevision = new YarnBookingChildItemRevision();

                    foreach (var childItem in child.ChildItemsRevision) //child.ChildItems
                    {
                        int indexF = yarnBooking.Childs.FindIndex(x => x.BookingChildID == child.BookingChildID);
                        if (indexF < 0)
                        {
                            childItem.SubGroupId = subGroupID;

                            #region YarnBookingChild
                            yarnBookingChild = new YarnBookingChild();
                            yarnBookingChild.YBChildID = maxYBC++;
                            yarnBookingChild.YBookingID = yarnBooking.YBookingID;
                            yarnBookingChild.BookingChildID = child.BookingChildID;
                            yarnBookingChild.ConsumptionID = child.ConsumptionID;
                            yarnBookingChild.ItemMasterID = childItem.ItemMasterID;
                            yarnBookingChild.YarnTypeID = 0;
                            yarnBookingChild.YarnBrandID = child.YarnBrandID;
                            yarnBookingChild.FUPartID = child.FUPartID;
                            yarnBookingChild.BookingUnitID = child.BookingUnitID;
                            yarnBookingChild.BookingQty = childItem.BookingQty;
                            if (child.IsForFabric)
                            {
                                yarnBookingChild.IsForFabric = true;
                                yarnBookingChild.BookingQty = child.BookingQty;
                            }
                            yarnBookingChild.FTechnicalName = "";
                            yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                            yarnBookingChild.LastDCDate = child.LastDCDate;
                            yarnBookingChild.ClosingRemarks = child.ClosingRemarks;

                            yarnBookingChild.GreyReqQty = child.GreyReqQty;
                            yarnBookingChild.GreyLeftOverQty = child.GreyLeftOverQty;
                            yarnBookingChild.GreyProdQty = child.GreyProdQty;
                            yarnBookingChild.QtyInKG = child.BookingQtyKG;
                            /*yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                 Convert.ToDecimal(child.Height) *
                                 Convert.ToDecimal(0.045) *
                                 child.BookingQty) / 420;*/

                            yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                            yarnBookingChild.ExcessQty = child.ExcessQty;
                            yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                            yarnBookingChild.TotalQty = child.TotalQty;
                            yarnBookingChild.TotalQtyInKG = child.BookingQtyKG;
                            /*yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                            Convert.ToDecimal(child.Height) *
                                            Convert.ToDecimal(0.045) *
                                            child.TotalQty) / 420;*/

                            yarnBookingChild.YarnAllowance = child.YarnAllowance;
                            yarnBookingChild.FinishFabricUtilizationQty = child.FinishFabricUtilizationQty;
                            yarnBookingChild.ReqFinishFabricQty = child.ReqFinishFabricQty;

                            yarnBooking.Childs.Add(yarnBookingChild);
                        }
                        #endregion

                        #region YarnBookingChildItem
                        yarnBookingChildItemRevision = new YarnBookingChildItemRevision();
                        yarnBookingChildItemRevision.YBChildItemID = maxYBCI++;
                        yarnBookingChildItemRevision.YBChildID = yarnBookingChild.YBChildID;
                        yarnBookingChildItemRevision.YBookingID = yarnBooking.YBookingID;
                        yarnBookingChildItemRevision.YItemMasterID = childItem.ItemMasterID;
                        yarnBookingChildItemRevision.UnitID = childItem.UnitID;
                        yarnBookingChildItemRevision.Blending = childItem.Blending;
                        yarnBookingChildItemRevision.YarnCategory = childItem.YarnCategory;
                        yarnBookingChildItemRevision.Distribution = childItem.Distribution;
                        yarnBookingChildItemRevision.BookingQty = childItem.BookingQty;
                        yarnBookingChildItemRevision.Allowance = childItem.Allowance;
                        yarnBookingChildItemRevision.RequiredQty = childItem.RequiredQty;
                        yarnBookingChildItemRevision.ShadeCode = childItem.ShadeCode;
                        yarnBookingChildItemRevision.Remarks = childItem.Remarks;
                        yarnBookingChildItemRevision.Specification = childItem.Specification;
                        yarnBookingChildItemRevision.YD = childItem.YD;
                        yarnBookingChildItemRevision.YDItem = childItem.YDItem;
                        yarnBookingChildItemRevision.StitchLength = childItem.StitchLength;
                        yarnBookingChildItemRevision.PhysicalCount = childItem.PhysicalCount;
                        yarnBookingChildItemRevision.BatchNo = childItem.BatchNo;
                        yarnBookingChildItemRevision.SpinnerId = childItem.SpinnerId;
                        yarnBookingChildItemRevision.YarnLotNo = childItem.YarnLotNo;
                        yarnBookingChildItemRevision.YarnReqQty = childItem.YarnReqQty;
                        yarnBookingChildItemRevision.YarnLeftOverQty = childItem.YarnLeftOverQty;
                        yarnBookingChildItemRevision.YarnBalanceQty = childItem.YarnBalanceQty;
                        yarnBookingChildItemRevision.YarnPly = childItem.YarnPly;
                        yarnBookingChildItemRevision.GreyAllowance = childItem.GreyAllowance;
                        yarnBookingChildItemRevision.YDAllowance = childItem.YDAllowance;
                        yarnBookingChildItemRevision.NetYarnReqQty = childItem.NetYarnReqQty;
                        yarnBookingChildItemRevision.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                        yarnBookingChildItemRevision.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                        yarnBooking.ChildItemsRevision.Add(yarnBookingChildItemRevision);
                        #endregion
                    }
                });
                YarnBookings.Add(yarnBooking);
            }

            return YarnBookings;
        }
        private async Task<FBookingAcknowledge> GetFinishingProcess(FBookingAcknowledge entity)
        {
            List<FBookingAcknowledgeChild> BookingChilds = new List<FBookingAcknowledgeChild>();

            List<FBookingAckChildFinishingProcess> FPChilds = new List<FBookingAckChildFinishingProcess>();
            List<FBookingAckChildFinishingProcessItem> FPChildItems = new List<FBookingAckChildFinishingProcessItem>();

            entity.FBookingChild.ForEach(c =>
            {
                c.PreFinishingProcessChilds.ForEach(fpc =>
                {
                    fpc.BookingChildID = c.BookingChildID;
                    FPChilds.Add(fpc);

                    fpc.FinishingProcessChildItems.ForEach(fpci =>
                    {
                        fpci.FPChildID = fpc.FPChildID;
                        fpci.BookingChildID = c.BookingChildID;

                        FPChildItems.Add(fpci);
                    });
                });
                c.PostFinishingProcessChilds.ForEach(fpc =>
                {
                    fpc.BookingChildID = c.BookingChildID;
                    FPChilds.Add(fpc);

                    fpc.FinishingProcessChildItems.ForEach(fpci =>
                    {
                        fpci.FPChildID = fpc.FPChildID;
                        fpci.BookingChildID = c.BookingChildID;

                        FPChildItems.Add(fpci);
                    });
                });
            });

            int maxFPC = await _service.GetMaxIdAsync(TableNames.FBookingAckChildFinishingProcess, FPChilds.Where(x => x.EntityState == EntityState.Added).Count());
            int maxFPCI = await _service.GetMaxIdAsync(TableNames.FBookingAckChildFinishingProcessItem, FPChildItems.Where(x => x.EntityState == EntityState.Added).Count());


            entity.FBookingChild.ForEach(c =>
            {
                c.PreFinishingProcessChilds.ForEach(fpc =>
                {
                    if (fpc.EntityState == EntityState.Added)
                    {
                        fpc.FPChildID = maxFPC++;
                    }
                    fpc.FinishingProcessChildItems.ForEach(fpci =>
                    {
                        if (fpci.EntityState == EntityState.Added)
                        {
                            fpci.FPChildItemID = maxFPCI++;
                        }
                        fpci.FPChildID = fpc.FPChildID;
                    });
                });

                c.PostFinishingProcessChilds.ForEach(fpc =>
                {
                    if (fpc.EntityState == EntityState.Added)
                    {
                        fpc.FPChildID = maxFPC++;
                    }
                    fpc.FinishingProcessChildItems.ForEach(fpci =>
                    {
                        if (fpci.EntityState == EntityState.Added)
                        {
                            fpci.FPChildItemID = maxFPCI++;
                        }
                        fpci.FPChildID = fpc.FPChildID;
                    });
                });
            });

            return entity;
        }
        private async Task<List<YarnBookingMaster>> GetYarnBookingForUpdate(List<YarnBookingMaster> yarnBookings, FBookingAcknowledge fBookingAck, bool isAddition, bool isUpdateAddition = false)
        {
            var subGroupIDs = string.Join(",", fBookingAck.FBookingChild.Select(x => x.SubGroupID).Distinct());
            var subGroupIDsSplit = subGroupIDs.Split(',');
            int countYBC = 0,
                countYBCI = 0,
                countFUtilization = 0,
                countGFUtilization = 0,
                countReplacement = 0,
                countBBGreyYarnUtilization = 0,
                countBBDyedYarnUtilization = 0,
                countReqQTYReplacement = 0;

            yarnBookings.ForEach(x =>
            {
                if (x.EntityState != EntityState.Added && x.EntityState != EntityState.Deleted)
                {
                    x.EntityState = EntityState.Unchanged;
                }
                x.Childs.ForEach(c =>
                {
                    if (c.EntityState != EntityState.Added && c.EntityState != EntityState.Deleted)
                    {
                        c.EntityState = EntityState.Unchanged;
                    }
                    c.ChildItems.ForEach(ci =>
                    {
                        if (ci.EntityState != EntityState.Added && ci.EntityState != EntityState.Deleted)
                        {
                            ci.EntityState = EntityState.Unchanged;
                        }
                    });
                });

                x.Childs.ForEach(m =>
                {
                    //countYBC += 1;
                    //countYBCI += m.ChildItems.Count();
                    countFUtilization += m.FinishFabricUtilizationPopUpList.Where(f => f.EntityState == EntityState.Added).Count();
                    countGFUtilization += m.GreyFabricUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                    countReplacement += m.AdditionalReplacementPOPUPList.Where(g => g.EntityState == EntityState.Added).Count();

                    m.ChildItems.ForEach(n =>
                    {
                        countBBGreyYarnUtilization += n.GreyYarnUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                        countBBDyedYarnUtilization += n.DyedYarnUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                        countReqQTYReplacement += n.AdditionalNetReqPOPUPList.Where(g => g.EntityState == EntityState.Added).Count();
                    });
                });
            });
            int maxYBM = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster, subGroupIDsSplit.Count());
            //int maxYBC = await _service.GetMaxIdAsync(TableNames.YarnBookingChild, countYBC);
            //int maxYBCI = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, countYBCI);

            int maxBBFFUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingFinishFabricUtilization, countFUtilization);
            int maxGFUtilizationID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildGFUtilization, countGFUtilization);
            int maxReplacementID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildReplacement, countReplacement);
            int maxBBGreyYarnUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingGreyYarnUtilization, countBBGreyYarnUtilization);
            int maxBBDyedYarnUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingDyedYarnUtilization, countBBDyedYarnUtilization);
            int maxReqQTYReplacementID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildItemNetReqQTY, countReqQTYReplacement);

            List<YarnBookingMaster> ybsFinal = new List<YarnBookingMaster>();

            foreach (string sGid in subGroupIDsSplit)
            {
                int subGroupID = Convert.ToInt32(sGid);
                YarnBookingMaster yb = new YarnBookingMaster();

                var ybMaster = yarnBookings.Find(x => x.SubGroupID == subGroupID);
                if (ybMaster == null)
                {
                    FBookingAcknowledgeChild childObj1 = fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).First();

                    yb = new YarnBookingMaster();
                    yb.YBookingID = 0;

                    yb.YBookingNo = fBookingAck.BookingNo + "-YB";

                    yb.PreProcessRevNo = fBookingAck.RevisionNo;
                    yb.RevisionNo = 0;
                    yb.YBookingDate = DateTime.Now;
                    yb.BuyerID = fBookingAck.BuyerID;
                    yb.BuyerTeamID = fBookingAck.BuyerTeamID;
                    yb.CompanyID = fBookingAck.CompanyID;
                    yb.ExportOrderID = fBookingAck.ExportOrderID;
                    yb.BookingID = childObj1.BookingID;
                    yb.Acknowledge = false;
                    yb.AcknowledgeDate = null;
                    yb.Remarks = childObj1.Remarks;
                    yb.AddedBy = fBookingAck.AddedBy;
                    yb.DateAdded = DateTime.Now;
                    yb.WithoutOB = fBookingAck.WithoutOB;
                    yb.SubGroupID = subGroupID;
                    yb.IsSample = fBookingAck.IsSample;
                    yb.UnAcknowledge = fBookingAck.IsUnAcknowledge;
                    yb.UnAcknowledgeDate = fBookingAck.UnAcknowledgeDate;
                    yb.UnAcknowledgeBy = fBookingAck.UnAcknowledgeBy ?? default(int);

                    fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).ToList().ForEach(child =>
                    {
                        if (!child.Length.IsNotNullOrEmpty()) child.Length = 0.ToString();
                        if (!child.Height.IsNotNullOrEmpty()) child.Height = 0.ToString();

                        YarnBookingChild yarnBookingChild = new YarnBookingChild();
                        YarnBookingChildItem yarnBookingChildItem = new YarnBookingChildItem();

                        if (child.ChildDetails.Count() > 0)
                        {
                            child.ChildDetails.ForEach(childItem =>
                            {
                                childItem.SubGroupID = subGroupID;

                                #region YarnBookingChild
                                yarnBookingChild = new YarnBookingChild();
                                yarnBookingChild.YBChildID = 0;
                                yarnBookingChild.YBookingID = yb.YBookingID;
                                yarnBookingChild.BookingChildID = child.BookingChildID;
                                yarnBookingChild.ConsumptionID = child.ConsumptionID;
                                yarnBookingChild.ItemMasterID = child.ItemMasterID;
                                yarnBookingChild.YarnTypeID = 0;
                                yarnBookingChild.YarnBrandID = child.YarnBrandID;
                                yarnBookingChild.FUPartID = child.FUPartID;
                                yarnBookingChild.BookingUnitID = child.BookingUnitID;
                                yarnBookingChild.BookingQty = child.BookingQty;
                                yarnBookingChild.FTechnicalName = "";
                                yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                                yarnBookingChild.LastDCDate = child.LastDCDate;
                                yarnBookingChild.ClosingRemarks = child.ClosingRemarks;
                                yarnBookingChild.QtyInKG = child.BookingQtyKG;
                                /*yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                     Convert.ToDecimal(child.Height) *
                                     Convert.ToDecimal(0.045) *
                                     child.BookingQty) / 420;*/

                                yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                                yarnBookingChild.ExcessQty = child.ExcessQty;
                                yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                                yarnBookingChild.TotalQty = child.TotalQty;
                                yarnBookingChild.TotalQtyInKG = child.BookingQtyKG;
                                /*yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                                Convert.ToDecimal(child.Height) *
                                                Convert.ToDecimal(0.045) *
                                                child.TotalQty) / 420;*/


                                #endregion

                                #region YarnBookingChildItem
                                yarnBookingChildItem = new YarnBookingChildItem();
                                yarnBookingChildItem.YBChildItemID = 0;
                                yarnBookingChildItem.YBChildID = yarnBookingChild.YBChildID;
                                yarnBookingChildItem.YBookingID = yb.YBookingID;
                                yarnBookingChildItem.YItemMasterID = child.ItemMasterID;
                                yarnBookingChildItem.UnitID = child.BookingUnitID;
                                yarnBookingChildItem.Blending = child.Blending;
                                yarnBookingChildItem.YarnCategory = child.YarnCategory;
                                yarnBookingChildItem.Distribution = child.Distribution;
                                yarnBookingChildItem.BookingQty = childItem.BookingQty;
                                yarnBookingChildItem.Allowance = child.Allowance;
                                yarnBookingChildItem.RequiredQty = child.RequiredQty;
                                yarnBookingChildItem.ShadeCode = child.ShadeCode;
                                yarnBookingChildItem.Remarks = child.Remarks;
                                yarnBookingChildItem.Specification = child.Specification;
                                yarnBookingChildItem.YD = child.YD;
                                yarnBookingChildItem.YDItem = child.YDItem;
                                yarnBookingChild.ChildItems.Add(yarnBookingChildItem);


                                #endregion

                                yb.Childs.Add(yarnBookingChild);
                            });
                        }
                        else if (child.ChildItems.Count() > 0)
                        {
                            child.ChildItems.ForEach(childItem =>
                            {
                                #region YarnBookingChild
                                yarnBookingChild = new YarnBookingChild();
                                yarnBookingChild.YBChildID = 0;
                                yarnBookingChild.YBookingID = yb.YBookingID;
                                yarnBookingChild.BookingChildID = childItem.BookingChildID;
                                yarnBookingChild.ConsumptionID = childItem.ConsumptionID;
                                yarnBookingChild.ItemMasterID = childItem.ItemMasterID;
                                yarnBookingChild.YarnTypeID = 0;
                                yarnBookingChild.YarnBrandID = child.YarnBrandID;
                                yarnBookingChild.FUPartID = child.FUPartID;
                                yarnBookingChild.BookingUnitID = child.BookingUnitID;
                                yarnBookingChild.BookingQty = child.BookingQty;
                                yarnBookingChild.FTechnicalName = "";
                                yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                                yarnBookingChild.LastDCDate = child.LastDCDate;
                                yarnBookingChild.ClosingRemarks = child.ClosingRemarks;
                                yarnBookingChild.QtyInKG = child.BookingQtyKG;
                                /*yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                     Convert.ToDecimal(child.Height) *
                                     Convert.ToDecimal(0.045) *
                                    childItem.BookingQty) / 420;*/

                                yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                                yarnBookingChild.ExcessQty = child.ExcessQty;
                                yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                                yarnBookingChild.TotalQty = child.TotalQty;
                                yarnBookingChild.TotalQtyInKG = child.BookingQtyKG;
                                /*yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                                Convert.ToDecimal(child.Height) *
                                                Convert.ToDecimal(0.045) *
                                               child.TotalQty) / 420;*/
                                #endregion

                                #region YarnBookingChildItem
                                yarnBookingChildItem = new YarnBookingChildItem();
                                yarnBookingChildItem.YBChildItemID = 0;
                                yarnBookingChildItem.YBChildID = yarnBookingChild.YBChildID;
                                yarnBookingChildItem.YBookingID = yb.YBookingID;
                                yarnBookingChildItem.YItemMasterID = childItem.YItemMasterID;
                                yarnBookingChildItem.YarnCategory = childItem.YarnCategory;
                                yarnBookingChildItem.UnitID = child.BookingUnitID;
                                yarnBookingChildItem.Blending = childItem.Blending;
                                yarnBookingChildItem.YarnCategory = childItem.YarnCategory;
                                yarnBookingChildItem.Distribution = childItem.Distribution;
                                yarnBookingChildItem.BookingQty = childItem.BookingQty;
                                yarnBookingChildItem.Allowance = childItem.Allowance;
                                yarnBookingChildItem.RequiredQty = childItem.RequiredQty;
                                yarnBookingChildItem.ShadeCode = childItem.ShadeCode;
                                yarnBookingChildItem.Remarks = childItem.Remarks;
                                yarnBookingChildItem.Specification = childItem.Specification;
                                yarnBookingChildItem.YD = childItem.YD;
                                yarnBookingChildItem.YDItem = childItem.YDItem;

                                yarnBookingChildItem.StitchLength = childItem.StitchLength;
                                yarnBookingChildItem.PhysicalCount = childItem.PhysicalCount;
                                yarnBookingChildItem.BatchNo = childItem.BatchNo;
                                yarnBookingChildItem.SpinnerId = childItem.SpinnerId;
                                yarnBookingChildItem.YarnLotNo = childItem.YarnLotNo;
                                yarnBookingChildItem.YarnReqQty = childItem.YarnReqQty;
                                yarnBookingChildItem.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                yarnBookingChildItem.YarnBalanceQty = childItem.YarnBalanceQty;
                                yarnBookingChildItem.YarnPly = childItem.YarnPly;
                                yarnBookingChildItem.GreyAllowance = childItem.GreyAllowance;
                                yarnBookingChildItem.YDAllowance = childItem.YDAllowance;
                                yarnBookingChildItem.NetYarnReqQty = childItem.NetYarnReqQty;
                                yarnBookingChildItem.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                yarnBookingChildItem.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                                yarnBookingChild.ChildItems.Add(yarnBookingChildItem);
                                #endregion

                                yb.Childs.Add(yarnBookingChild);
                            });
                        }
                    });
                }
                else
                {
                    yb = CommonFunction.DeepClone(ybMaster);
                    yb.EntityState = EntityState.Modified;
                    yb.UpdatedBy = fBookingAck.UpdatedBy;
                    yb.DateUpdated = DateTime.Now;

                    if (isUpdateAddition && !yb.IsApprove && !yb.IsReject)
                    {
                        yb.IsQtyFinalizationPMCApprove = false;
                        yb.QtyFinalizationPMCApproveBy = 0;
                        yb.QtyFinalizationPMCApproveDate = null;

                        yb.IsQtyFinalizationPMCReject = false;
                        yb.QtyFinalizationPMCRejectBy = 0;
                        yb.QtyFinalizationPMCRejectDate = null;
                        yb.QtyFinalizationPMCRejectReason = "";

                        yb.IsProdHeadApprove = false;
                        yb.ProdHeadApproveBy = 0;
                        yb.ProdHeadApproveDate = null;

                        yb.IsProdHeadReject = false;
                        yb.ProdHeadRejectBy = 0;
                        yb.ProdHeadRejectDate = null;
                        yb.ProdHeadRejectReason = "";

                        yb.IsTextileHeadApprove = false;
                        yb.TextileHeadApproveBy = 0;
                        yb.TextileHeadApproveDate = null;

                        yb.IsTextileHeadReject = false;
                        yb.TextileHeadRejectBy = 0;
                        yb.TextileHeadRejectDate = null;
                        yb.TextileHeadRejectReason = "";

                        yb.IsKnittingUtilizationApprove = false;
                        yb.KnittingUtilizationApproveBy = 0;
                        yb.KnittingUtilizationApproveDate = null;

                        yb.IsKnittingUtilizationReject = false;
                        yb.KnittingUtilizationRejectBy = 0;
                        yb.KnittingUtilizationRejectDate = null;
                        yb.KnittingUtilizationRejectReason = "";

                        yb.IsKnittingHeadApprove = false;
                        yb.KnittingHeadApproveBy = 0;
                        yb.KnittingHeadApproveDate = null;

                        yb.IsKnittingHeadReject = false;
                        yb.KnittingHeadRejectBy = 0;
                        yb.KnittingHeadRejectDate = null;
                        yb.KnittingHeadRejectReason = "";

                        yb.IsOperationHeadApprove = false;
                        yb.OperationHeadApproveBy = 0;
                        yb.OperationHeadApproveDate = null;

                        yb.IsOperationHeadReject = false;
                        yb.OperationHeadRejectBy = 0;
                        yb.OperationHeadRejectDate = null;
                        yb.OperationHeadRejectReason = "";
                    }

                    List<YarnBookingChild> newYBChilds = new List<YarnBookingChild>();

                    fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).ToList().ForEach(child =>
                    {
                        if (!child.Length.IsNotNullOrEmpty()) child.Length = 0.ToString();
                        if (!child.Height.IsNotNullOrEmpty()) child.Height = 0.ToString();

                        YarnBookingChild yarnBookingChild = new YarnBookingChild();
                        YarnBookingChildItem yarnBookingChildItem = new YarnBookingChildItem();

                        List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                        yarnBookingChilds = yb.Childs.Where(c => c.BookingChildID == child.BookingChildID).ToList();

                        List<YarnBookingChildItem> yarnBookingChildItems = new List<YarnBookingChildItem>();
                        yarnBookingChilds.ForEach(x =>
                        {
                            yarnBookingChildItems.AddRange(x.ChildItems);
                        });
                        if (isAddition == false)
                        {
                            bool isYBChildNew = false;
                            yarnBookingChild = CommonFunction.DeepClone(yb.Childs.Find(c => c.YBookingID == yb.YBookingID && c.ConsumptionID == child.ConsumptionID && c.BookingChildID == child.BookingChildID));
                            if (yarnBookingChild == null || yarnBookingChild.IsNewObj)
                            {
                                isYBChildNew = true;
                                yarnBookingChild = new YarnBookingChild();
                                yarnBookingChild.YBChildID = 0;
                            }
                            else
                            {
                                isYBChildNew = false;
                                yarnBookingChild.EntityState = EntityState.Modified;
                            }
                            yarnBookingChild.YBookingID = yb.YBookingID;
                            yarnBookingChild.BookingChildID = child.BookingChildID;
                            yarnBookingChild.ConsumptionID = child.ConsumptionID;
                            yarnBookingChild.ItemMasterID = child.ItemMasterID;
                            yarnBookingChild.YarnTypeID = 0;
                            yarnBookingChild.YarnBrandID = child.YarnBrandID;
                            yarnBookingChild.FUPartID = child.FUPartID;
                            yarnBookingChild.BookingUnitID = child.BookingUnitID;
                            yarnBookingChild.BookingQty = child.BookingQty;
                            yarnBookingChild.FTechnicalName = "";
                            yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                            yarnBookingChild.LastDCDate = child.LastDCDate;
                            yarnBookingChild.ClosingRemarks = child.ClosingRemarks;

                            yarnBookingChild.GreyReqQty = child.GreyReqQty;
                            yarnBookingChild.GreyLeftOverQty = child.GreyLeftOverQty;
                            yarnBookingChild.GreyProdQty = child.GreyProdQty;
                            yarnBookingChild.FinishFabricUtilizationQty = child.FinishFabricUtilizationQty;
                            yarnBookingChild.ReqFinishFabricQty = child.ReqFinishFabricQty;
                            yarnBookingChild.QtyInKG = child.BookingQtyKG;
                            /*yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                 Convert.ToDecimal(child.Height) *
                                 Convert.ToDecimal(0.045) *
                                 child.BookingQty) / 420;*/

                            yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                            yarnBookingChild.ExcessQty = child.ExcessQty;
                            yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                            yarnBookingChild.TotalQty = child.TotalQty;
                            yarnBookingChild.TotalQtyInKG = child.BookingQtyKG;
                            /*yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                            Convert.ToDecimal(child.Height) *
                                            Convert.ToDecimal(0.045) *
                                            child.TotalQty) / 420;*/

                            List<YarnBookingChildItem> newYBCIs = new List<YarnBookingChildItem>();

                            child.ChildItems.Where(x => x.EntityState != EntityState.Deleted).ToList().ForEach(childItem =>
                            {
                                if (isYBChildNew)
                                {
                                    yarnBookingChildItem = new YarnBookingChildItem();
                                    yarnBookingChildItem.YBChildItemID = 0;
                                    yarnBookingChildItem.YBChildID = yarnBookingChild.YBChildID;
                                    yarnBookingChildItem.YBookingID = yb.YBookingID;
                                    yarnBookingChildItem.YItemMasterID = childItem.ItemMasterID;
                                    yarnBookingChildItem.BookingID = childItem.BookingID;
                                    yarnBookingChildItem.UnitID = childItem.UnitID;
                                    yarnBookingChildItem.Blending = childItem.Blending;
                                    yarnBookingChildItem.YarnCategory = childItem.YarnCategory;
                                    yarnBookingChildItem.Distribution = childItem.Distribution;
                                    yarnBookingChildItem.BookingQty = childItem.BookingQty;
                                    yarnBookingChildItem.Allowance = childItem.Allowance;
                                    yarnBookingChildItem.RequiredQty = childItem.RequiredQty;
                                    yarnBookingChildItem.ShadeCode = childItem.ShadeCode;
                                    yarnBookingChildItem.Remarks = childItem.Remarks;
                                    yarnBookingChildItem.Specification = childItem.Specification;
                                    yarnBookingChildItem.YD = childItem.YD;
                                    yarnBookingChildItem.YDItem = childItem.YDItem;
                                    yarnBookingChildItem.StitchLength = childItem.StitchLength;
                                    yarnBookingChildItem.PhysicalCount = childItem.PhysicalCount;
                                    yarnBookingChildItem.BatchNo = childItem.BatchNo;
                                    yarnBookingChildItem.SpinnerId = childItem.SpinnerId;
                                    yarnBookingChildItem.YarnLotNo = childItem.YarnLotNo;
                                    yarnBookingChildItem.YarnReqQty = childItem.YarnReqQty;
                                    yarnBookingChildItem.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                    yarnBookingChildItem.YarnBalanceQty = childItem.YarnBalanceQty;

                                    yarnBookingChildItem.YarnPly = childItem.YarnPly;
                                    yarnBookingChildItem.GreyAllowance = childItem.GreyAllowance;
                                    yarnBookingChildItem.YDAllowance = childItem.YDAllowance;
                                    yarnBookingChildItem.NetYarnReqQty = childItem.NetYarnReqQty;
                                    yarnBookingChildItem.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                    yarnBookingChildItem.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                                    yarnBookingChild.ChildItems.Add(CommonFunction.DeepClone(yarnBookingChildItem));
                                }
                                else
                                {
                                    var childItem1 = CommonFunction.DeepClone(yarnBookingChildItems.Find(x => x.YBChildItemID == childItem.YBChildItemID));
                                    if (childItem1 == null || childItem1.YBChildItemID < 2000 || yarnBookingChild.IsNewObj)
                                    {
                                        childItem1 = new YarnBookingChildItem();
                                        childItem1.EntityState = EntityState.Added;
                                    }
                                    else
                                    {
                                        childItem1.EntityState = EntityState.Modified;
                                    }
                                    childItem1.YItemMasterID = childItem.ItemMasterID;
                                    childItem1.UnitID = childItem.UnitID;
                                    childItem1.Blending = childItem.Blending;
                                    childItem1.YarnCategory = childItem.YarnCategory;
                                    childItem1.Distribution = childItem.Distribution;
                                    childItem1.BookingQty = childItem.BookingQty;
                                    childItem1.Allowance = childItem.Allowance;
                                    childItem1.RequiredQty = childItem.RequiredQty;
                                    childItem1.ShadeCode = childItem.ShadeCode;
                                    childItem1.Remarks = childItem.Remarks;
                                    childItem1.Specification = childItem.Specification;
                                    childItem1.YD = childItem.YD;
                                    childItem1.YDItem = childItem.YDItem;
                                    childItem1.StitchLength = childItem.StitchLength;
                                    childItem1.PhysicalCount = childItem.PhysicalCount;
                                    childItem1.BatchNo = childItem.BatchNo;
                                    childItem1.SpinnerId = childItem.SpinnerId;
                                    childItem1.YarnLotNo = childItem.YarnLotNo;
                                    childItem1.SubGroupId = subGroupID;

                                    childItem1.YarnReqQty = childItem.YarnReqQty;
                                    childItem1.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                    childItem1.YarnBalanceQty = childItem.YarnBalanceQty;
                                    childItem1.YarnPly = childItem.YarnPly;
                                    childItem1.GreyAllowance = childItem.GreyAllowance;
                                    childItem1.YDAllowance = childItem.YDAllowance;
                                    childItem1.NetYarnReqQty = childItem.NetYarnReqQty;
                                    childItem1.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                    childItem1.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                                    newYBCIs.Add(CommonFunction.DeepClone(childItem1));
                                }
                            });

                            if (!isYBChildNew)
                            {
                                newYBCIs.AddRange(child.ChildItems.Where(x => x.EntityState == EntityState.Deleted));
                                yarnBookingChild.ChildItems = CommonFunction.DeepClone(newYBCIs);
                            }
                            newYBChilds.Add(CommonFunction.DeepClone(yarnBookingChild));
                        }
                        else
                        {
                            bool isYBChildNew = false;
                            yarnBookingChild = CommonFunction.DeepClone(yb.Childs.Find(c => c.YBookingID == yb.YBookingID && c.ConsumptionID == child.ConsumptionID && c.BookingChildID == child.BookingChildID));
                            if (yarnBookingChild != null)
                            {

                                isYBChildNew = false;
                                yarnBookingChild.EntityState = EntityState.Modified;

                                yarnBookingChild.YBookingID = yb.YBookingID;
                                yarnBookingChild.BookingChildID = child.BookingChildID;
                                yarnBookingChild.ConsumptionID = child.ConsumptionID;
                                yarnBookingChild.ItemMasterID = child.ItemMasterID;
                                yarnBookingChild.YarnTypeID = 0;
                                yarnBookingChild.YarnBrandID = child.YarnBrandID;
                                yarnBookingChild.FUPartID = child.FUPartID;
                                yarnBookingChild.BookingUnitID = child.BookingUnitID;
                                yarnBookingChild.BookingQty = child.BookingQty;
                                yarnBookingChild.FTechnicalName = "";
                                yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                                yarnBookingChild.LastDCDate = child.LastDCDate;
                                yarnBookingChild.ClosingRemarks = child.ClosingRemarks;
                                yarnBookingChild.ExistingYarnAllowance = child.ExistingYarnAllowance;
                                yarnBookingChild.YarnAllowance = child.YarnAllowance;
                                yarnBookingChild.TotalYarnAllowance = child.TotalYarnAllowance;
                                yarnBookingChild.GreyReqQty = child.GreyReqQty;
                                yarnBookingChild.GreyLeftOverQty = child.GreyLeftOverQty;
                                yarnBookingChild.GreyProdQty = child.GreyProdQty;
                                yarnBookingChild.FinishFabricUtilizationQty = child.FinishFabricUtilizationQty;
                                yarnBookingChild.ReqFinishFabricQty = child.ReqFinishFabricQty;
                                yarnBookingChild.QtyInKG = child.BookingQtyKG;
                                /*yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                     Convert.ToDecimal(child.Height) *
                                     Convert.ToDecimal(0.045) *
                                     child.BookingQty) / 420;*/

                                yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                                yarnBookingChild.ExcessQty = child.ExcessQty;
                                yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                                yarnBookingChild.TotalQty = child.TotalQty;
                                yarnBookingChild.TotalQtyInKG = child.BookingQtyKG;
                                /*yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                                Convert.ToDecimal(child.Height) *
                                                Convert.ToDecimal(0.045) *
                                                child.TotalQty) / 420;*/

                                child.FinishFabricUtilizationPopUpList.ForEach(gr =>
                                {
                                    gr.YBChildID = yarnBookingChild.YBChildID;
                                    switch (gr.EntityState)
                                    {
                                        case EntityState.Added:
                                            gr.BBFFUtilizationID = maxBBFFUtilizationID++;
                                            break;

                                        case EntityState.Modified:

                                            break;

                                        case EntityState.Unchanged:
                                        case EntityState.Deleted:
                                            break;

                                        default:
                                            break;
                                    }

                                });
                                child.GreyFabricUtilizationPopUpList.ForEach(gr =>
                                {
                                    gr.YBChildID = yarnBookingChild.YBChildID;
                                    switch (gr.EntityState)
                                    {
                                        case EntityState.Added:
                                            gr.GFUtilizationID = maxGFUtilizationID++;
                                            break;

                                        case EntityState.Modified:

                                            break;

                                        case EntityState.Unchanged:
                                        case EntityState.Deleted:
                                            break;

                                        default:
                                            break;
                                    }

                                });
                                child.AdditionalReplacementPOPUPList.ForEach(gr =>
                                {
                                    gr.YBChildID = yarnBookingChild.YBChildID;
                                    switch (gr.EntityState)
                                    {
                                        case EntityState.Added:
                                            gr.ReplacementID = maxReplacementID++;
                                            break;

                                        case EntityState.Modified:

                                            break;

                                        case EntityState.Unchanged:
                                        case EntityState.Deleted:
                                            break;

                                        default:
                                            break;
                                    }

                                });
                                yarnBookingChild.FinishFabricUtilizationPopUpList = child.FinishFabricUtilizationPopUpList;
                                yarnBookingChild.GreyFabricUtilizationPopUpList = child.GreyFabricUtilizationPopUpList;
                                yarnBookingChild.AdditionalReplacementPOPUPList = child.AdditionalReplacementPOPUPList;

                                List<YarnBookingChildItem> newYBCIs = new List<YarnBookingChildItem>();

                                child.ChildItems.Where(x => x.EntityState != EntityState.Deleted).ToList().ForEach(childItem =>
                                {
                                    if (isYBChildNew)
                                    {
                                        yarnBookingChildItem = new YarnBookingChildItem();
                                        yarnBookingChildItem.YBChildItemID = 0;
                                        yarnBookingChildItem.YBChildID = yarnBookingChild.YBChildID;
                                        yarnBookingChildItem.YBookingID = yb.YBookingID;
                                        yarnBookingChildItem.YItemMasterID = childItem.ItemMasterID;
                                        yarnBookingChildItem.BookingID = childItem.BookingID;
                                        yarnBookingChildItem.UnitID = childItem.UnitID;
                                        yarnBookingChildItem.Blending = childItem.Blending;
                                        yarnBookingChildItem.YarnCategory = childItem.YarnCategory;
                                        yarnBookingChildItem.Distribution = childItem.Distribution;
                                        yarnBookingChildItem.BookingQty = childItem.BookingQty;
                                        yarnBookingChildItem.Allowance = childItem.Allowance;
                                        yarnBookingChildItem.RequiredQty = childItem.RequiredQty;
                                        yarnBookingChildItem.ShadeCode = childItem.ShadeCode;
                                        yarnBookingChildItem.Remarks = childItem.Remarks;
                                        yarnBookingChildItem.Specification = childItem.Specification;
                                        yarnBookingChildItem.YD = childItem.YD;
                                        yarnBookingChildItem.YDItem = childItem.YDItem;
                                        yarnBookingChildItem.StitchLength = childItem.StitchLength;
                                        yarnBookingChildItem.PhysicalCount = childItem.PhysicalCount;
                                        yarnBookingChildItem.BatchNo = childItem.BatchNo;
                                        yarnBookingChildItem.SpinnerId = childItem.SpinnerId;
                                        yarnBookingChildItem.YarnLotNo = childItem.YarnLotNo;
                                        yarnBookingChildItem.YarnReqQty = childItem.YarnReqQty;
                                        yarnBookingChildItem.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                        yarnBookingChildItem.YarnBalanceQty = childItem.YarnBalanceQty;

                                        yarnBookingChildItem.YarnPly = childItem.YarnPly;
                                        yarnBookingChildItem.GreyAllowance = childItem.GreyAllowance;
                                        yarnBookingChildItem.YDAllowance = childItem.YDAllowance;
                                        yarnBookingChildItem.NetYarnReqQty = childItem.NetYarnReqQty;
                                        yarnBookingChildItem.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                        yarnBookingChildItem.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                                        childItem.GreyYarnUtilizationPopUpList.ForEach(gr =>
                                        {
                                            gr.YBookingID = yb.YBookingID;
                                            gr.YBChildID = yarnBookingChild.YBChildID;
                                            gr.YBChildItemID = yarnBookingChildItem.YBChildItemID;

                                            switch (gr.EntityState)
                                            {
                                                case EntityState.Added:
                                                    gr.BBGreyYarnUtilizationID = maxBBGreyYarnUtilizationID++;
                                                    break;

                                                case EntityState.Modified:

                                                    break;

                                                case EntityState.Unchanged:
                                                case EntityState.Deleted:
                                                    break;

                                                default:
                                                    break;
                                            }

                                        });
                                        childItem.DyedYarnUtilizationPopUpList.ForEach(gr =>
                                        {
                                            gr.YBookingID = yb.YBookingID;
                                            gr.YBChildID = yarnBookingChild.YBChildID;
                                            gr.YBChildItemID = yarnBookingChildItem.YBChildItemID;

                                            switch (gr.EntityState)
                                            {
                                                case EntityState.Added:
                                                    gr.BBDyedYarnUtilizationID = maxBBDyedYarnUtilizationID++;
                                                    break;

                                                case EntityState.Modified:

                                                    break;

                                                case EntityState.Unchanged:
                                                case EntityState.Deleted:
                                                    break;

                                                default:
                                                    break;
                                            }
                                        });
                                        childItem.AdditionalNetReqPOPUPList.ForEach(gr =>
                                        {
                                            gr.YBChildItemID = yarnBookingChildItem.YBChildItemID;

                                            switch (gr.EntityState)
                                            {
                                                case EntityState.Added:
                                                    gr.ReplacementID = maxReqQTYReplacementID++;
                                                    break;

                                                case EntityState.Modified:

                                                    break;

                                                case EntityState.Unchanged:
                                                case EntityState.Deleted:
                                                    break;

                                                default:
                                                    break;
                                            }
                                        });
                                        yarnBookingChildItem.GreyYarnUtilizationPopUpList = childItem.GreyYarnUtilizationPopUpList;
                                        yarnBookingChildItem.DyedYarnUtilizationPopUpList = childItem.DyedYarnUtilizationPopUpList;
                                        yarnBookingChildItem.AdditionalNetReqPOPUPList = childItem.AdditionalNetReqPOPUPList;

                                        yarnBookingChild.ChildItems.Add(CommonFunction.DeepClone(yarnBookingChildItem));
                                    }
                                    else
                                    {
                                        var childItem1 = CommonFunction.DeepClone(yarnBookingChildItems.Find(x => x.YBChildItemID == childItem.YBChildItemID));
                                        if (childItem1 == null || childItem1.YBChildItemID < 2000 || yarnBookingChild.IsNewObj)
                                        {
                                            childItem1 = new YarnBookingChildItem();
                                            childItem1.EntityState = EntityState.Added;
                                        }
                                        else
                                        {
                                            childItem1.EntityState = EntityState.Modified;
                                        }
                                        childItem1.YItemMasterID = childItem.ItemMasterID;
                                        childItem1.UnitID = childItem.UnitID;
                                        childItem1.Blending = childItem.Blending;
                                        childItem1.YarnCategory = childItem.YarnCategory;
                                        childItem1.Distribution = childItem.Distribution;
                                        childItem1.BookingQty = childItem.BookingQty;
                                        childItem1.Allowance = childItem.Allowance;
                                        childItem1.RequiredQty = childItem.RequiredQty;
                                        childItem1.ShadeCode = childItem.ShadeCode;
                                        childItem1.Remarks = childItem.Remarks;
                                        childItem1.Specification = childItem.Specification;
                                        childItem1.YD = childItem.YD;
                                        childItem1.YDItem = childItem.YDItem;
                                        childItem1.StitchLength = childItem.StitchLength;
                                        childItem1.PhysicalCount = childItem.PhysicalCount;
                                        childItem1.BatchNo = childItem.BatchNo;
                                        childItem1.SpinnerId = childItem.SpinnerId;
                                        childItem1.YarnLotNo = childItem.YarnLotNo;
                                        childItem1.SubGroupId = subGroupID;

                                        childItem1.YarnReqQty = childItem.YarnReqQty;
                                        childItem1.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                        childItem1.YarnBalanceQty = childItem.YarnBalanceQty;
                                        childItem1.YarnPly = childItem.YarnPly;
                                        childItem1.GreyAllowance = childItem.GreyAllowance;
                                        childItem1.YDAllowance = childItem.YDAllowance;
                                        childItem1.NetYarnReqQty = childItem.NetYarnReqQty;
                                        childItem1.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                        childItem1.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;
                                        childItem.GreyYarnUtilizationPopUpList.ForEach(gr =>
                                        {
                                            gr.YBookingID = yb.YBookingID;
                                            gr.YBChildID = yarnBookingChild.YBChildID;
                                            gr.YBChildItemID = childItem1.YBChildItemID;

                                            switch (gr.EntityState)
                                            {
                                                case EntityState.Added:
                                                    gr.BBGreyYarnUtilizationID = maxBBGreyYarnUtilizationID++;
                                                    break;

                                                case EntityState.Modified:

                                                    break;

                                                case EntityState.Unchanged:
                                                case EntityState.Deleted:
                                                    break;

                                                default:
                                                    break;
                                            }

                                        });
                                        childItem.DyedYarnUtilizationPopUpList.ForEach(gr =>
                                        {
                                            gr.YBookingID = yb.YBookingID;
                                            gr.YBChildID = yarnBookingChild.YBChildID;
                                            gr.YBChildItemID = childItem1.YBChildItemID;

                                            switch (gr.EntityState)
                                            {
                                                case EntityState.Added:
                                                    gr.BBDyedYarnUtilizationID = maxBBDyedYarnUtilizationID++;
                                                    break;

                                                case EntityState.Modified:

                                                    break;

                                                case EntityState.Unchanged:
                                                case EntityState.Deleted:
                                                    break;

                                                default:
                                                    break;
                                            }
                                        });
                                        childItem.AdditionalNetReqPOPUPList.ForEach(gr =>
                                        {
                                            gr.YBChildItemID = childItem1.YBChildItemID;

                                            switch (gr.EntityState)
                                            {
                                                case EntityState.Added:
                                                    gr.ReplacementID = maxReqQTYReplacementID++;
                                                    break;

                                                case EntityState.Modified:

                                                    break;

                                                case EntityState.Unchanged:
                                                case EntityState.Deleted:
                                                    break;

                                                default:
                                                    break;
                                            }
                                        });
                                        childItem1.GreyYarnUtilizationPopUpList = childItem.GreyYarnUtilizationPopUpList;
                                        childItem1.DyedYarnUtilizationPopUpList = childItem.DyedYarnUtilizationPopUpList;
                                        childItem1.AdditionalNetReqPOPUPList = childItem.AdditionalNetReqPOPUPList;

                                        newYBCIs.Add(CommonFunction.DeepClone(childItem1));
                                    }
                                });

                                if (!isYBChildNew)
                                {
                                    newYBCIs.AddRange(child.ChildItems.Where(x => x.EntityState == EntityState.Deleted));
                                    yarnBookingChild.ChildItems = CommonFunction.DeepClone(newYBCIs);
                                }
                                newYBChilds.Add(CommonFunction.DeepClone(yarnBookingChild));

                            }
                        }
                    });
                    yb.Childs = CommonFunction.DeepClone(newYBChilds);
                }

                ybsFinal.Add(CommonFunction.DeepClone(yb));
            }

            int countYBM = 0;
            //countYBC = 0,
            //countYBCI = 0;

            ybsFinal.ForEach(yb =>
            {
                if (yb.EntityState == EntityState.Added)
                {
                    countYBM++;
                }
                yb.Childs.ForEach(ybc =>
                {
                    if (ybc.EntityState == EntityState.Added)
                    {
                        countYBC++;
                    }
                    ybc.ChildItems.ForEach(ybci =>
                    {
                        if (ybci.EntityState == EntityState.Added)
                        {
                            countYBCI++;
                        }
                    });
                });
            });

            maxYBM = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster, countYBM);
            int maxYBC = await _service.GetMaxIdAsync(TableNames.YarnBookingChild, countYBC);
            int maxYBCI = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, countYBCI);

            ybsFinal.ForEach(yb =>
            {
                if (yb.EntityState == EntityState.Added)
                {
                    yb.YBookingID = maxYBM++;
                }
                else if (yb.EntityState == EntityState.Unchanged)
                {
                    yb.EntityState = EntityState.Deleted;
                }
                yb.Childs.ForEach(ybc =>
                {
                    if (ybc.EntityState == EntityState.Added)
                    {
                        ybc.YBChildID = maxYBC++;
                        ybc.BookingID = yb.BookingID;
                    }
                    else if (ybc.EntityState == EntityState.Unchanged)
                    {
                        ybc.EntityState = EntityState.Deleted;
                    }
                    ybc.YBookingID = yb.YBookingID;
                    ybc.ChildItems.ForEach(ybci =>
                    {
                        if (ybci.EntityState == EntityState.Added)
                        {
                            ybci.YBChildItemID = maxYBCI++;
                        }
                        else if (ybc.EntityState == EntityState.Unchanged)
                        {
                            ybc.EntityState = EntityState.Deleted;
                        }
                        ybci.YBChildID = ybc.YBChildID;
                        ybci.YBookingID = yb.YBookingID;
                    });

                    yb.ChildItems.AddRange(ybc.ChildItems);
                });
            });

            return ybsFinal;
        }
        private async Task<List<YarnBookingMaster>> GetYarnBookingForUpdateWithRevision(List<YarnBookingMaster> yarnBookings, FBookingAcknowledge fBookingAck, bool isAddition)
        {
            var subGroupIDs = string.Join(",", fBookingAck.FBookingChild.Select(x => x.SubGroupID).Distinct());
            var subGroupIDsSplit = subGroupIDs.Split(',');

            yarnBookings.ForEach(x =>
            {
                if (x.EntityState != EntityState.Added && x.EntityState != EntityState.Deleted)
                {
                    x.EntityState = EntityState.Unchanged;
                }
                x.Childs.ForEach(c =>
                {
                    if (c.EntityState != EntityState.Added && c.EntityState != EntityState.Deleted)
                    {
                        c.EntityState = EntityState.Unchanged;
                    }
                    c.ChildItemsRevision.ForEach(ci =>
                    {
                        if (ci.EntityState != EntityState.Added && ci.EntityState != EntityState.Deleted)
                        {
                            ci.EntityState = EntityState.Unchanged;
                        }
                    });
                });
            });

            List<YarnBookingMaster> ybsFinal = new List<YarnBookingMaster>();

            foreach (string sGid in subGroupIDsSplit)
            {
                int subGroupID = Convert.ToInt32(sGid);
                YarnBookingMaster yb = new YarnBookingMaster();

                var ybMaster = yarnBookings.Find(x => x.SubGroupID == subGroupID);
                if (ybMaster == null)
                {
                    FBookingAcknowledgeChild childObj1 = fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).First();

                    yb = new YarnBookingMaster();
                    yb.YBookingID = 0;

                    yb.YBookingNo = fBookingAck.BookingNo + "-YB";

                    yb.PreProcessRevNo = fBookingAck.RevisionNo;
                    yb.RevisionNo = 0;
                    yb.YBookingDate = DateTime.Now;
                    yb.BuyerID = fBookingAck.BuyerID;
                    yb.BuyerTeamID = fBookingAck.BuyerTeamID;
                    yb.CompanyID = fBookingAck.CompanyID;
                    yb.ExportOrderID = fBookingAck.ExportOrderID;
                    yb.BookingID = childObj1.BookingID;
                    yb.Acknowledge = false;
                    yb.AcknowledgeDate = null;
                    yb.Remarks = childObj1.Remarks;
                    yb.AddedBy = fBookingAck.AddedBy;
                    yb.DateAdded = DateTime.Now;
                    yb.WithoutOB = fBookingAck.WithoutOB;
                    yb.SubGroupID = subGroupID;
                    yb.IsSample = fBookingAck.IsSample;
                    yb.UnAcknowledge = fBookingAck.IsUnAcknowledge;
                    yb.UnAcknowledgeDate = fBookingAck.UnAcknowledgeDate;
                    yb.UnAcknowledgeBy = fBookingAck.UnAcknowledgeBy ?? default(int);

                    fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).ToList().ForEach(child =>
                    {
                        if (!child.Length.IsNotNullOrEmpty()) child.Length = 0.ToString();
                        if (!child.Height.IsNotNullOrEmpty()) child.Height = 0.ToString();

                        YarnBookingChild yarnBookingChild = new YarnBookingChild();
                        YarnBookingChildItemRevision yarnBookingChildItemRevision = new YarnBookingChildItemRevision();

                        if (child.ChildDetails.Count() > 0)
                        {
                            child.ChildDetails.ForEach(childItem =>
                            {
                                childItem.SubGroupID = subGroupID;

                                #region YarnBookingChild
                                yarnBookingChild = new YarnBookingChild();
                                yarnBookingChild.YBChildID = 0;
                                yarnBookingChild.YBookingID = yb.YBookingID;
                                yarnBookingChild.BookingChildID = child.BookingChildID;
                                yarnBookingChild.ConsumptionID = child.ConsumptionID;
                                yarnBookingChild.ItemMasterID = child.ItemMasterID;
                                yarnBookingChild.YarnTypeID = 0;
                                yarnBookingChild.YarnBrandID = child.YarnBrandID;
                                yarnBookingChild.FUPartID = child.FUPartID;
                                yarnBookingChild.BookingUnitID = child.BookingUnitID;
                                yarnBookingChild.BookingQty = childItem.BookingQty;
                                yarnBookingChild.FTechnicalName = "";
                                yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                                yarnBookingChild.LastDCDate = child.LastDCDate;
                                yarnBookingChild.ClosingRemarks = child.ClosingRemarks;

                                yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                     Convert.ToDecimal(child.Height) *
                                     Convert.ToDecimal(0.045) *
                                     child.BookingQty) / 420;

                                yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                                yarnBookingChild.ExcessQty = child.ExcessQty;
                                yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                                yarnBookingChild.TotalQty = child.TotalQty;
                                yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                                Convert.ToDecimal(child.Height) *
                                                Convert.ToDecimal(0.045) *
                                                child.TotalQty) / 420;


                                #endregion

                                #region YarnBookingChildItem
                                yarnBookingChildItemRevision = new YarnBookingChildItemRevision();
                                yarnBookingChildItemRevision.YBChildItemID = 0;
                                yarnBookingChildItemRevision.YBChildID = yarnBookingChild.YBChildID;
                                yarnBookingChildItemRevision.YBookingID = yb.YBookingID;
                                yarnBookingChildItemRevision.YItemMasterID = child.ItemMasterID;
                                yarnBookingChildItemRevision.UnitID = child.BookingUnitID;
                                yarnBookingChildItemRevision.Blending = child.Blending;
                                yarnBookingChildItemRevision.YarnCategory = child.YarnCategory;
                                yarnBookingChildItemRevision.Distribution = child.Distribution;
                                yarnBookingChildItemRevision.BookingQty = child.BookingQty;
                                yarnBookingChildItemRevision.Allowance = child.Allowance;
                                yarnBookingChildItemRevision.RequiredQty = child.RequiredQty;
                                yarnBookingChildItemRevision.ShadeCode = child.ShadeCode;
                                yarnBookingChildItemRevision.Remarks = child.Remarks;
                                yarnBookingChildItemRevision.Specification = child.Specification;
                                yarnBookingChildItemRevision.YD = child.YD;
                                yarnBookingChildItemRevision.YDItem = child.YDItem;
                                yarnBookingChild.ChildItemsRevision.Add(yarnBookingChildItemRevision);


                                #endregion

                                yb.Childs.Add(yarnBookingChild);
                            });
                        }
                        else if (child.ChildItemsRevision.Count() > 0)
                        {
                            child.ChildItemsRevision.ForEach(childItem =>
                            {
                                #region YarnBookingChild
                                yarnBookingChild = new YarnBookingChild();
                                yarnBookingChild.YBChildID = 0;
                                yarnBookingChild.YBookingID = yb.YBookingID;
                                yarnBookingChild.BookingChildID = childItem.BookingChildID;
                                yarnBookingChild.ConsumptionID = childItem.ConsumptionID;
                                yarnBookingChild.ItemMasterID = childItem.ItemMasterID;
                                yarnBookingChild.YarnTypeID = 0;
                                yarnBookingChild.YarnBrandID = child.YarnBrandID;
                                yarnBookingChild.FUPartID = child.FUPartID;
                                yarnBookingChild.BookingUnitID = child.BookingUnitID;
                                yarnBookingChild.BookingQty = childItem.BookingQty;
                                yarnBookingChild.FTechnicalName = "";
                                yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                                yarnBookingChild.LastDCDate = child.LastDCDate;
                                yarnBookingChild.ClosingRemarks = child.ClosingRemarks;

                                yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                                     Convert.ToDecimal(child.Height) *
                                     Convert.ToDecimal(0.045) *
                                    childItem.BookingQty) / 420;

                                yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                                yarnBookingChild.ExcessQty = child.ExcessQty;
                                yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                                yarnBookingChild.TotalQty = child.TotalQty;
                                yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                                Convert.ToDecimal(child.Height) *
                                                Convert.ToDecimal(0.045) *
                                               child.TotalQty) / 420;
                                #endregion

                                #region YarnBookingChildItem
                                yarnBookingChildItemRevision = new YarnBookingChildItemRevision();
                                yarnBookingChildItemRevision.YBChildItemID = 0;
                                yarnBookingChildItemRevision.YBChildID = yarnBookingChild.YBChildID;
                                yarnBookingChildItemRevision.YBookingID = yb.YBookingID;
                                yarnBookingChildItemRevision.YItemMasterID = childItem.YItemMasterID;
                                yarnBookingChildItemRevision.UnitID = child.BookingUnitID;
                                yarnBookingChildItemRevision.Blending = childItem.Blending;
                                yarnBookingChildItemRevision.YarnCategory = childItem.YarnCategory;
                                yarnBookingChildItemRevision.Distribution = childItem.Distribution;
                                yarnBookingChildItemRevision.BookingQty = childItem.BookingQty;
                                yarnBookingChildItemRevision.Allowance = childItem.Allowance;
                                yarnBookingChildItemRevision.RequiredQty = childItem.RequiredQty;
                                yarnBookingChildItemRevision.ShadeCode = childItem.ShadeCode;
                                yarnBookingChildItemRevision.Remarks = childItem.Remarks;
                                yarnBookingChildItemRevision.Specification = childItem.Specification;
                                yarnBookingChildItemRevision.YD = childItem.YD;
                                yarnBookingChildItemRevision.YDItem = childItem.YDItem;

                                yarnBookingChildItemRevision.StitchLength = childItem.StitchLength;
                                yarnBookingChildItemRevision.PhysicalCount = childItem.PhysicalCount;
                                yarnBookingChildItemRevision.BatchNo = childItem.BatchNo;
                                yarnBookingChildItemRevision.SpinnerId = childItem.SpinnerId;
                                yarnBookingChildItemRevision.YarnLotNo = childItem.YarnLotNo;
                                yarnBookingChildItemRevision.YarnReqQty = childItem.YarnReqQty;
                                yarnBookingChildItemRevision.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                yarnBookingChildItemRevision.YarnBalanceQty = childItem.YarnBalanceQty;
                                yarnBookingChildItemRevision.YarnPly = childItem.YarnPly;
                                yarnBookingChildItemRevision.GreyAllowance = childItem.GreyAllowance;
                                yarnBookingChildItemRevision.YDAllowance = childItem.YDAllowance;
                                yarnBookingChildItemRevision.NetYarnReqQty = childItem.NetYarnReqQty;
                                yarnBookingChildItemRevision.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                yarnBookingChildItemRevision.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                                yarnBookingChild.ChildItemsRevision.Add(yarnBookingChildItemRevision);
                                #endregion

                                yb.Childs.Add(yarnBookingChild);
                            });
                        }
                    });
                }
                else
                {
                    yb = CommonFunction.DeepClone(ybMaster);
                    yb.EntityState = EntityState.Modified;
                    yb.UpdatedBy = fBookingAck.UpdatedBy;
                    yb.DateUpdated = DateTime.Now;

                    List<YarnBookingChild> newYBChilds = new List<YarnBookingChild>();

                    fBookingAck.FBookingChild.Where(x => x.SubGroupID == subGroupID).ToList().ForEach(child =>
                    {
                        if (!child.Length.IsNotNullOrEmpty()) child.Length = 0.ToString();
                        if (!child.Height.IsNotNullOrEmpty()) child.Height = 0.ToString();

                        YarnBookingChild yarnBookingChild = new YarnBookingChild();
                        YarnBookingChildItemRevision yarnBookingChildItemRevision = new YarnBookingChildItemRevision();

                        List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                        yarnBookingChilds = yb.Childs.Where(c => c.BookingChildID == child.BookingChildID).ToList();

                        List<YarnBookingChildItemRevision> yarnBookingChildItemsRevision = new List<YarnBookingChildItemRevision>();
                        yarnBookingChilds.ForEach(x =>
                        {
                            yarnBookingChildItemsRevision.AddRange(x.ChildItemsRevision);
                        });

                        bool isYBChildNew = false;
                        yarnBookingChild = CommonFunction.DeepClone(yb.Childs.Find(c => c.YBookingID == yb.YBookingID && c.ConsumptionID == child.ConsumptionID && c.BookingChildID == child.BookingChildID));
                        if (yarnBookingChild == null || yarnBookingChild.IsNewObj)
                        {
                            isYBChildNew = true;
                            yarnBookingChild = new YarnBookingChild();
                            yarnBookingChild.YBChildID = 0;
                        }
                        else
                        {
                            isYBChildNew = false;
                            yarnBookingChild.EntityState = EntityState.Modified;
                        }
                        yarnBookingChild.YBookingID = yb.YBookingID;
                        yarnBookingChild.BookingChildID = child.BookingChildID;
                        yarnBookingChild.ConsumptionID = child.ConsumptionID;
                        yarnBookingChild.ItemMasterID = child.ItemMasterID;
                        yarnBookingChild.YarnTypeID = 0;
                        yarnBookingChild.YarnBrandID = child.YarnBrandID;
                        yarnBookingChild.FUPartID = child.FUPartID;
                        yarnBookingChild.BookingUnitID = child.BookingUnitID;
                        yarnBookingChild.BookingQty = child.BookingQty;
                        yarnBookingChild.FTechnicalName = "";
                        yarnBookingChild.IsCompleteReceive = child.IsCompleteReceive;
                        yarnBookingChild.LastDCDate = child.LastDCDate;
                        yarnBookingChild.ClosingRemarks = child.ClosingRemarks;

                        yarnBookingChild.GreyReqQty = child.GreyReqQty;
                        yarnBookingChild.GreyLeftOverQty = child.GreyLeftOverQty;
                        yarnBookingChild.GreyProdQty = child.GreyProdQty;
                        yarnBookingChild.QtyInKG = child.BookingQtyKG;
                        /*yarnBookingChild.QtyInKG = (Convert.ToDecimal(child.Length) *
                             Convert.ToDecimal(child.Height) *
                             Convert.ToDecimal(0.045) *
                             child.BookingQty) / 420;*/

                        yarnBookingChild.ExcessPercentage = child.ExcessPercentage;
                        yarnBookingChild.ExcessQty = child.ExcessQty;
                        yarnBookingChild.ExcessQtyInKG = child.ExcessQtyInKG;
                        yarnBookingChild.TotalQty = child.TotalQty;
                        yarnBookingChild.TotalQtyInKG = child.BookingQtyKG;
                        /*yarnBookingChild.TotalQtyInKG = (Convert.ToDecimal(child.Length) *
                                        Convert.ToDecimal(child.Height) *
                                        Convert.ToDecimal(0.045) *
                                        child.TotalQty) / 420;*/

                        List<YarnBookingChildItemRevision> newYBCIsRevision = new List<YarnBookingChildItemRevision>();

                        child.ChildItemsRevision.Where(x => x.EntityState != EntityState.Deleted).ToList().ForEach(childItem =>
                        {
                            if (isYBChildNew)
                            {
                                yarnBookingChildItemRevision = new YarnBookingChildItemRevision();
                                yarnBookingChildItemRevision.YBChildItemID = 0;
                                yarnBookingChildItemRevision.YBChildID = yarnBookingChild.YBChildID;
                                yarnBookingChildItemRevision.YBookingID = yb.YBookingID;
                                yarnBookingChildItemRevision.YItemMasterID = childItem.YItemMasterID;
                                yarnBookingChildItemRevision.BookingID = childItem.BookingID;
                                yarnBookingChildItemRevision.UnitID = childItem.UnitID;
                                yarnBookingChildItemRevision.Blending = childItem.Blending;
                                yarnBookingChildItemRevision.YarnCategory = childItem.YarnCategory;
                                yarnBookingChildItemRevision.Distribution = childItem.Distribution;
                                yarnBookingChildItemRevision.BookingQty = childItem.BookingQty;
                                yarnBookingChildItemRevision.Allowance = childItem.Allowance;
                                yarnBookingChildItemRevision.RequiredQty = childItem.RequiredQty;
                                yarnBookingChildItemRevision.ShadeCode = childItem.ShadeCode;
                                yarnBookingChildItemRevision.Remarks = childItem.Remarks;
                                yarnBookingChildItemRevision.Specification = childItem.Specification;
                                yarnBookingChildItemRevision.YD = childItem.YD;
                                yarnBookingChildItemRevision.YDItem = childItem.YDItem;
                                yarnBookingChildItemRevision.StitchLength = childItem.StitchLength;
                                yarnBookingChildItemRevision.PhysicalCount = childItem.PhysicalCount;
                                yarnBookingChildItemRevision.BatchNo = childItem.BatchNo;
                                yarnBookingChildItemRevision.SpinnerId = childItem.SpinnerId;
                                yarnBookingChildItemRevision.YarnLotNo = childItem.YarnLotNo;
                                yarnBookingChildItemRevision.YarnReqQty = childItem.YarnReqQty;
                                yarnBookingChildItemRevision.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                yarnBookingChildItemRevision.YarnBalanceQty = childItem.YarnBalanceQty;

                                yarnBookingChildItemRevision.YarnPly = childItem.YarnPly;
                                yarnBookingChildItemRevision.GreyAllowance = childItem.GreyAllowance;
                                yarnBookingChildItemRevision.YDAllowance = childItem.YDAllowance;
                                yarnBookingChildItemRevision.NetYarnReqQty = childItem.NetYarnReqQty;
                                yarnBookingChildItemRevision.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                yarnBookingChildItemRevision.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                                yarnBookingChild.ChildItemsRevision.Add(CommonFunction.DeepClone(yarnBookingChildItemRevision));
                            }
                            else
                            {
                                var childItem1 = CommonFunction.DeepClone(yarnBookingChildItemsRevision.Find(x => x.YBChildItemID == childItem.YBChildItemID));
                                if (childItem1 == null || childItem1.YBChildItemID < 2000 || yarnBookingChild.IsNewObj)
                                {
                                    childItem1 = new YarnBookingChildItemRevision();
                                    childItem1.EntityState = EntityState.Added;
                                }
                                else
                                {
                                    childItem1.EntityState = EntityState.Modified;
                                }
                                childItem1.YItemMasterID = childItem.YItemMasterID;
                                childItem1.UnitID = childItem.UnitID;
                                childItem1.Blending = childItem.Blending;
                                childItem1.YarnCategory = childItem.YarnCategory;
                                childItem1.Distribution = childItem.Distribution;
                                childItem1.BookingQty = childItem.BookingQty;
                                childItem1.Allowance = childItem.Allowance;
                                childItem1.RequiredQty = childItem.RequiredQty;
                                childItem1.ShadeCode = childItem.ShadeCode;
                                childItem1.Remarks = childItem.Remarks;
                                childItem1.Specification = childItem.Specification;
                                childItem1.YD = childItem.YD;
                                childItem1.YDItem = childItem.YDItem;
                                childItem1.StitchLength = childItem.StitchLength;
                                childItem1.PhysicalCount = childItem.PhysicalCount;
                                childItem1.BatchNo = childItem.BatchNo;
                                childItem1.SpinnerId = childItem.SpinnerId;
                                childItem1.YarnLotNo = childItem.YarnLotNo;
                                childItem1.SubGroupId = subGroupID;

                                childItem1.YarnReqQty = childItem.YarnReqQty;
                                childItem1.YarnLeftOverQty = childItem.YarnLeftOverQty;
                                childItem1.YarnBalanceQty = childItem.YarnBalanceQty;
                                childItem1.YarnPly = childItem.YarnPly;
                                childItem1.GreyAllowance = childItem.GreyAllowance;
                                childItem1.YDAllowance = childItem.YDAllowance;
                                childItem1.NetYarnReqQty = childItem.NetYarnReqQty;
                                childItem1.GreyYarnUtilizationQty = childItem.GreyYarnUtilizationQty;
                                childItem1.DyedYarnUtilizationQty = childItem.DyedYarnUtilizationQty;

                                newYBCIsRevision.Add(CommonFunction.DeepClone(childItem1));
                            }
                        });

                        if (!isYBChildNew)
                        {
                            newYBCIsRevision.AddRange(child.ChildItemsRevision.Where(x => x.EntityState == EntityState.Deleted));
                            yarnBookingChild.ChildItemsRevision = CommonFunction.DeepClone(newYBCIsRevision);
                        }
                        newYBChilds.Add(CommonFunction.DeepClone(yarnBookingChild));
                    });
                    yb.Childs = CommonFunction.DeepClone(newYBChilds);
                }

                ybsFinal.Add(CommonFunction.DeepClone(yb));
            }

            int countYBM = 0,
               countYBC = 0,
               countYBCI = 0;

            ybsFinal.ForEach(yb =>
            {
                if (yb.EntityState == EntityState.Added)
                {
                    countYBM++;
                }
                yb.Childs.ForEach(ybc =>
                {
                    if (ybc.EntityState == EntityState.Added)
                    {
                        countYBC++;
                    }
                    ybc.ChildItemsRevision.ForEach(ybci =>
                    {
                        if (ybci.EntityState == EntityState.Added)
                        {
                            countYBCI++;
                        }
                    });
                });
            });

            int maxYBM = await _service.GetMaxIdAsync(TableNames.YarnBookingMaster, countYBM);
            int maxYBC = await _service.GetMaxIdAsync(TableNames.YarnBookingChild, countYBC);
            int maxYBCI = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, countYBCI);

            ybsFinal.ForEach(yb =>
            {
                if (yb.EntityState == EntityState.Added)
                {
                    yb.YBookingID = maxYBM++;
                }
                else if (yb.EntityState == EntityState.Unchanged)
                {
                    yb.EntityState = EntityState.Deleted;
                }
                yb.Childs.ForEach(ybc =>
                {
                    if (ybc.EntityState == EntityState.Added)
                    {
                        ybc.YBChildID = maxYBC++;
                        ybc.BookingID = yb.BookingID;
                    }
                    else if (ybc.EntityState == EntityState.Unchanged)
                    {
                        ybc.EntityState = EntityState.Deleted;
                    }
                    ybc.YBookingID = yb.YBookingID;
                    ybc.ChildItemsRevision.ForEach(ybci =>
                    {
                        if (ybci.EntityState == EntityState.Added)
                        {
                            ybci.YBChildItemID = maxYBCI++;
                        }
                        else if (ybc.EntityState == EntityState.Unchanged)
                        {
                            ybc.EntityState = EntityState.Deleted;
                        }
                        ybci.YBChildID = ybc.YBChildID;
                        ybci.YBookingID = yb.YBookingID;
                    });

                    yb.ChildItemsRevision.AddRange(ybc.ChildItemsRevision);
                });
            });

            return ybsFinal;
        }
        public async Task<String> GetSampleTypeByBookingID(int bookingID)
        {
            var query = $@"{CommonQueries.GetSampleTypeByBookingID(bookingID)}";
            String SampleType = String.Empty;
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                Select2OptionModel data = records.Read<Select2OptionModel>().FirstOrDefault();
                if (data.IsNotNull())
                {
                    SampleType = data.text;
                }

                return SampleType;

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }

        public async Task<List<FreeConceptMaster>> GetFreeConcepts(string bookingNo)
        {
            var query =
                    $@"SELECT FCM.* 
                    FROM FreeConceptMaster FCM
                    WHERE FCM.GroupConceptNo = '{bookingNo}';

                    SELECT FCC.* 
                    FROM FreeConceptChildColor FCC
                    INNER JOIN FreeConceptMaster FCM ON FCM.ConceptID = FCC.ConceptID
                    WHERE FCM.GroupConceptNo = '{bookingNo}';

                    SELECT MR.* 
                    FROM FreeConceptMRMaster MR
                    INNER JOIN FreeConceptMaster FCM ON FCM.ConceptID = MR.ConceptID
                    WHERE FCM.GroupConceptNo = '{bookingNo}';

                    SELECT MRC.* 
                    FROM FreeConceptMRChild MRC
                    INNER JOIN FreeConceptMRMaster MR ON MR.FCMRMasterID = MRC.FCMRMasterID
                    INNER JOIN FreeConceptMaster FCM ON FCM.ConceptID = MR.ConceptID
                    WHERE FCM.GroupConceptNo = '{bookingNo}'";
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<FreeConceptMaster> datas = records.Read<FreeConceptMaster>().ToList();
                var colors = records.Read<FreeConceptChildColor>().ToList();
                var freeConceptMRList = records.Read<FreeConceptMRMaster>().ToList();
                var freeConceptMRChildList = records.Read<FreeConceptMRChild>().ToList();

                datas.ForEach(c =>
                {
                    c.ChildColors = colors.Where(cc => cc.ConceptID == c.ConceptID).ToList();
                    c.MRList = freeConceptMRList.Where(cc => cc.ConceptID == c.ConceptID).ToList();
                    c.MRList.ForEach(mr =>
                    {
                        mr.Childs = freeConceptMRChildList.Where(cc => cc.FCMRMasterID == mr.FCMRMasterID).ToList();
                    });
                });

                return datas;
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }
        private async Task<int> GetMaxAdditionNoYB(string yarnBookingNo)
        {
            string connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["TexConnection"].ConnectionString;
            var queryString = $"SELECT MaxValue=COUNT(distinct(YBookingNo)) FROM YarnBookingMaster_New WHERE YBookingNo LIKE '{yarnBookingNo}%'";

            int maxNo = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(queryString, connection);
                connection.Open();
                SqlDataReader reader = command.ExecuteReader();
                try
                {
                    while (reader.Read())
                    {
                        maxNo = Convert.ToInt32(reader["MaxValue"]);
                    }
                }
                finally
                {
                    reader.Close();
                }
            }
            return maxNo;
        }

        public async Task ApproveOrRejectBulkAddition(YarnBookingMaster yarnBooking, List<YarnBookingMaster> yarnBookings)
        {
            SqlTransaction transaction = null;
            try
            {
                await _connection.OpenAsync();
                transaction = _connection.BeginTransaction();

                List<YarnBookingChild> yarnBookingChilds = new List<YarnBookingChild>();
                List<YarnBookingChildItem> yarnBookingChildItems = new List<YarnBookingChildItem>();
                List<BulkBookingGreyYarnUtilization> greyYarnUtPopUpList = new List<BulkBookingGreyYarnUtilization>();
                List<BulkBookingDyedYarnUtilization> dyedYarnUtPopUpList = new List<BulkBookingDyedYarnUtilization>();
                List<BulkBookingFinishFabricUtilization> finishFabricUtPopUpList = new List<BulkBookingFinishFabricUtilization>();
                List<FBookingAcknowledgeChildGFUtilization> greyFabricUtPopUpList = new List<FBookingAcknowledgeChildGFUtilization>();
                List<FBookingAcknowledgeChildReplacement> replacementPopUpList = new List<FBookingAcknowledgeChildReplacement>();
                List<FBookingAcknowledgeChildItemNetReqQTY> childItemNetReqQTYPopUpList = new List<FBookingAcknowledgeChildItemNetReqQTY>();

                int countYBCI = 0;


                int countFUtilization = 0;
                int countGFUtilization = 0;
                int countBBGreyYarnUtilization = 0;
                int countBBDyedYarnUtilization = 0;
                int countReplacement = 0;
                int countNetReqQTY = 0;

                //yarnBooking.Childs.Where(x => x.IsForFabric == false).ToList().ForEach(x =>
                yarnBooking.Childs.ForEach(x =>
                {
                    countYBCI += x.ChildItems.Where(y => y.EntityState == EntityState.Added).Count();
                    countFUtilization += x.FinishFabricUtilizationPopUpList.Where(f => f.EntityState == EntityState.Added).Count();
                    countGFUtilization += x.GreyFabricUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                    countReplacement += x.AdditionalReplacementPOPUPList.Where(g => g.EntityState == EntityState.Added).Count();
                    x.ChildItems.ForEach(n =>
                    {
                        countBBGreyYarnUtilization += n.GreyYarnUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                        countBBDyedYarnUtilization += n.DyedYarnUtilizationPopUpList.Where(g => g.EntityState == EntityState.Added).Count();
                        countNetReqQTY += n.AdditionalNetReqPOPUPList.Where(g => g.EntityState == EntityState.Added).Count();
                    });
                });
                countYBCI = await _service.GetMaxIdAsync(TableNames.YarnBookingChildItem, countYBCI);
                int maxBBFFUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingFinishFabricUtilization, countFUtilization);
                int maxGFUtilizationID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildGFUtilization, countGFUtilization);
                int maxReplacementID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildReplacement, countReplacement);
                int maxBBGreyYarnUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingGreyYarnUtilization, countBBGreyYarnUtilization);
                int maxBBDyedYarnUtilizationID = await _service.GetMaxIdAsync(TableNames.BulkBookingDyedYarnUtilization, countBBDyedYarnUtilization);
                int maxNetReqQTYID = await _service.GetMaxIdAsync(TableNames.FBookingAcknowledgeChildItemNetReqQTY, countNetReqQTY);


                yarnBooking.Childs.ForEach(x =>
                {
                    //if (x.IsForFabric || x.EntityState == EntityState.Deleted)
                    //{
                    x.FinishFabricUtilizationPopUpList.ForEach(gr =>
                    {
                        gr.YBChildID = x.YBChildID;
                        switch (gr.EntityState)
                        {
                            case EntityState.Added:
                                gr.BBFFUtilizationID = maxBBFFUtilizationID++;
                                break;

                            case EntityState.Modified:

                                break;

                            case EntityState.Unchanged:
                            case EntityState.Deleted:
                                break;

                            default:
                                break;
                        }

                    });
                    x.GreyFabricUtilizationPopUpList.ForEach(gr =>
                    {
                        gr.YBChildID = x.YBChildID;
                        switch (gr.EntityState)
                        {
                            case EntityState.Added:
                                gr.GFUtilizationID = maxGFUtilizationID++;
                                break;

                            case EntityState.Modified:

                                break;

                            case EntityState.Unchanged:
                            case EntityState.Deleted:
                                break;

                            default:
                                break;
                        }

                    });
                    x.AdditionalReplacementPOPUPList.ForEach(gr =>
                    {
                        gr.YBChildID = x.YBChildID;
                        gr.BookingChildID = x.BookingChildID;
                        switch (gr.EntityState)
                        {
                            case EntityState.Added:
                                gr.ReplacementID = maxReplacementID++;
                                break;

                            case EntityState.Modified:

                                break;

                            case EntityState.Unchanged:
                            case EntityState.Deleted:
                                break;

                            default:
                                break;
                        }

                    });
                    finishFabricUtPopUpList.AddRange(x.FinishFabricUtilizationPopUpList);
                    greyFabricUtPopUpList.AddRange(x.GreyFabricUtilizationPopUpList);
                    replacementPopUpList.AddRange(x.AdditionalReplacementPOPUPList);
                    yarnBookingChilds.Add(x);
                    //}
                    x.ChildItems.ForEach(y =>
                    {
                        if (y.EntityState == EntityState.Added)
                        {
                            y.YBChildItemID = countYBCI++;
                        }
                        y.YBChildID = x.YBChildID;

                        y.GreyYarnUtilizationPopUpList.ForEach(gr =>
                        {
                            gr.YBookingID = yarnBooking.YBookingID;
                            gr.YBChildID = y.YBChildID;
                            gr.YBChildItemID = y.YBChildItemID;

                            switch (gr.EntityState)
                            {
                                case EntityState.Added:
                                    gr.BBGreyYarnUtilizationID = maxBBGreyYarnUtilizationID++;
                                    break;

                                case EntityState.Modified:

                                    break;

                                case EntityState.Unchanged:
                                case EntityState.Deleted:
                                    break;

                                default:
                                    break;
                            }

                        });
                        y.DyedYarnUtilizationPopUpList.ForEach(gr =>
                        {
                            gr.YBookingID = yarnBooking.YBookingID;
                            gr.YBChildID = y.YBChildID;
                            gr.YBChildItemID = y.YBChildItemID;

                            switch (gr.EntityState)
                            {
                                case EntityState.Added:
                                    gr.BBDyedYarnUtilizationID = maxBBDyedYarnUtilizationID++;
                                    break;

                                case EntityState.Modified:

                                    break;

                                case EntityState.Unchanged:
                                case EntityState.Deleted:
                                    break;

                                default:
                                    break;
                            }
                        });
                        y.AdditionalNetReqPOPUPList.ForEach(gr =>
                        {
                            gr.YBChildItemID = y.YBChildItemID;

                            switch (gr.EntityState)
                            {
                                case EntityState.Added:
                                    gr.ReplacementID = maxNetReqQTYID++;
                                    break;

                                case EntityState.Modified:

                                    break;

                                case EntityState.Unchanged:
                                case EntityState.Deleted:
                                    break;

                                default:
                                    break;
                            }
                        });

                        greyYarnUtPopUpList.AddRange(y.GreyYarnUtilizationPopUpList);
                        dyedYarnUtPopUpList.AddRange(y.DyedYarnUtilizationPopUpList);
                        childItemNetReqQTYPopUpList.AddRange(y.AdditionalNetReqPOPUPList);

                        y.YBookingID = yarnBooking.YBookingID;
                    });
                    yarnBookingChildItems.AddRange(x.ChildItems);
                });

                foreach (YarnBookingChild item in yarnBookingChilds)
                {
                    if (item.EntityState != EntityState.Deleted)
                    {
                        decimal totalDis = item.ChildItems.Where(x => x.EntityState != EntityState.Deleted).Sum(x => x.Distribution);
                        if (totalDis != 100)
                        {
                            throw new Exception("Total Distribution Qty is not 100%. => UpdateBulkStatus2 => BDSAcknowledgeService");
                        }
                    }
                    if (item.BookingUnitID == 1 && item.QtyInKG == 0)
                    {
                        throw new Exception("Qty In KG missing => UpdateBulkStatus2 => BDSAcknowledgeService");
                    }
                    int countChildItem = yarnBookingChildItems.Count(x => x.YBChildID == item.YBChildID && x.EntityState != EntityState.Deleted);
                    if (countChildItem == 0 && item.EntityState != EntityState.Deleted)
                    {
                        throw new Exception("Yarn Item missing => UpdateBulkStatus2 => BDSAcknowledgeService");
                    }
                }
                //await _service.SaveSingleAsync(yarnBooking, transaction);
                await _service.SaveAsync(yarnBookings, transaction);

                await _service.SaveAsync(yarnBookingChildItems.Where(x => x.EntityState == EntityState.Deleted), transaction);
                await _service.SaveAsync(yarnBookingChilds, transaction);
                await _service.SaveAsync(yarnBookingChildItems.Where(x => x.EntityState != EntityState.Deleted), transaction);

                await _service.SaveAsync(finishFabricUtPopUpList, transaction);
                await _service.SaveAsync(greyFabricUtPopUpList, transaction);
                await _service.SaveAsync(replacementPopUpList, transaction);
                await _service.SaveAsync(greyYarnUtPopUpList, transaction);
                await _service.SaveAsync(dyedYarnUtPopUpList, transaction);
                await _service.SaveAsync(childItemNetReqQTYPopUpList, transaction);

                transaction.Commit();
            }
            catch (Exception ex)
            {
                if (transaction != null) transaction.Rollback();
                throw ex;
            }
            finally
            {
                _connection.Close();
            }
        }


        public async Task<List<BulkBookingFinishFabricUtilization>> GetFinishFabricUtilizationByGSMAndCompositionAsync(string GSMId, string GSM, string CompositionId, string ConstructionId, string SubGroupID, PaginationInfo paginationInfo)
        {
            var query = "";
            string WhereLogicSQL = "";

            decimal startGSM = 0M, EndGSM = 0M;

            if (GSM.NotNullOrEmpty())
            {
                startGSM = (Convert.ToDecimal(GSM) - 20);
                EndGSM = (Convert.ToDecimal(GSM) + 20);
            }

            if (Convert.ToInt32(SubGroupID) == 1)
            {
                //WhereLogicSQL = String.Format(@" Where Issued = 0  And IM.Segment4ValueID = {0} And IM.Segment2ValueID = {1} ", GSMId, CompositionId);
                WhereLogicSQL = String.Format(@" Where Issued = 0   And ISV4.SegmentValue between '{0}' and '{1}' And IM.Segment2ValueID = {2} ", startGSM.ToString(), EndGSM.ToString(), CompositionId);
            }
            else
            {
                WhereLogicSQL = String.Format(@" Where Issued = 0  And IM.Segment1ValueID = {0} And IM.Segment2ValueID = {1} ", ConstructionId, CompositionId);

            }



            query = String.Format($@";With ISF As (
			                                    Select BookingID, RollID, ISF.ItemMasterID, RollNo, Shade, BatchNo, TagNo, GSM, LengthInInch, WidthInInch, CCID1, CCID4, RollQtyInKG = RollQtyInKG, 
			                                    RollQtyInKGPcs = RollQtyInKGPcs, AOPRoll, ReceiveStatus, WeightSheetNo, IsReject, IsExcess, IsQtyDecrease, IsOrderCancel, IsReturn, IsOrderCCBreakDown,
			                                    LocationID, RackID
			                                    From EPYSLTEX..ItemFinishStockRoll ISF
			                                    Inner Join {DbNames.EPYSL}..ItemMaster IM On IM.ItemMasterID = ISF.ItemMasterID
                                                --Inner Join {DbNames.EPYSL}..ItemSegmentValue ISV2 On ISV2.SegmentValueID = IM.Segment2ValueID
			                                    Inner Join {DbNames.EPYSL}..ItemSegmentValue ISV4 On ISV4.SegmentValueID = IM.Segment4ValueID
			                                    --Where Issued = 0 And ISV2.SegmentValue = '{1}' And ISV4.SegmentValue = '{0}'
			                                    {2}
			                                    -- CompositionId = Segment2ValueID , GSMId = Segment4ValueID
                                    ),FR As (
		                                    Select ISF.CCID1, ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  FactoryID = PDR.ReceivingUnitID, RM = PDR.Remarks--,
		                                    From ISF
		                                    Inner Join EPYSLTEX..PDReceiveChild PRC On PRC.CCID1 = ISF.CCID1 and PRC.BookingID = ISF.BookingID and PRC.ItemMasterID = ISF.ItemMasterID
		                                    Inner Join EPYSLTEX..PDReceive PDR On PDR.PDID = PRC.PDID  and PDR.WeightSheetNo = ISF.WeightSheetNo 
		                                    Inner Join EPYSLTEX..PDReceiveChildRoll PRCC On PRCC.PDID = PRC.PDID and PRCC.PDChildID = PRC.PDChildID and PRCC.RollID = ISF.RollID
		                                    Where ISF.IsOrderCancel = 0 and ISF.IsQtyDecrease = 0 and ISF.IsReturn = 0 and IsOrderCCBreakDown = 0 

                                    ),IPR As (
		                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  FactoryID = IPR.ReceivingUnitID, RM = ''--,
		                                    From ISF
		                                    Inner Join EPYSLTEX..IssueProcessReceiveChild IPRC On IPRC.CCID1 = ISF.CCID1 and IPRC.BookingID = ISF.BookingID and IPRC.ItemMasterID = ISF.ItemMasterID
		                                    Inner Join EPYSLTEX..IssueProcessReceiveMaster IPR On IPR.IssueReceiveID = IPRC.IssueReceiveID and IPR.WeightSheetNo = ISF.WeightSheetNo
		                                    Inner Join EPYSLTEX..IssueProcessReceiveChildRoll IPRCC On IPRCC.IssueReceiveID = IPRC.IssueReceiveID and IPRCC.IssueChildID = IPRC.IssueChildID and IPRCC.RollID = ISF.RollID
		                                    Where ISF.IsOrderCancel = 0 and ISF.IsQtyDecrease = 0 and ISF.IsReturn = 0 and IsOrderCCBreakDown = 0 

                                    ),BTM As (
		                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  FactoryID = BTM.DeliveryToID, RM = ''
		                                    From ISF
		                                    Inner Join EPYSLTEX..BookingTransferChild BTC On  BTC.ToBookingID = ISF.BookingID and BTC.ToItemMasterID = ISF.ItemMasterID 
		                                    Inner Join EPYSLTEX..BookingTransferMaster BTM On BTM.TransferMasterID = BTC.TransferMasterID and BTM.ToExportOrderID = ISF.CCID1 and BTM.WeightSheetNo = ISF.WeightSheetNo
		                                    Inner Join EPYSLTEX..BookingTransferChildRoll BTCR On BTCR.TransferMasterID = BTC.TransferMasterID and BTCR.TransferChildID = BTC.TransferChildID and BTCR.RollID = ISF.RollID
		                                    Where ISF.IsOrderCancel = 0 and ISF.IsQtyDecrease = 0 and ISF.IsReturn = 0 and IsOrderCCBreakDown = 0

                                    ),RAJ As (
		                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID, FactoryID = RAM.ReceivingUnitID, RM = ''
		                                    From ISF
		                                    Inner Join EPYSLTEX..RollAdjustChild RAC On  RAC.BookingID = ISF.BookingID and RAC.ItemMasterID = ISF.ItemMasterID
		                                    Inner Join EPYSLTEX..RollAdjustMaster RAM On RAM.AdjustMasterID = RAC.AdjustMasterID and RAM.ExportOrderID = ISF.CCID1 
		                                    Inner Join EPYSLTEX..RollAdjustChildRoll RACR On RACR.AdjustMasterID = RAC.AdjustMasterID and RACR.AdjustChildID = RAC.AdjustChildID  and RACR.WeightSheetNo = ISF.WeightSheetNo --and RACR.BatchNo = ISF.BatchNo
		                                    Inner Join EPYSLTEX..RollAdjustSplitRoll RASR On RASR.AdjustMasterID = RAC.AdjustMasterID and RASR.AdjustChildID = RAC.AdjustChildID and RASR.AdjustChildRollID = RACR.AdjustChildRollID 
														                                        and RASR.AdjustSplitRollID = ISF.RollID
		                                    Inner Join (Select ExportOrderID, WeightSheetNo, PDDate
					                                    From EPYSLTEX..PDReceive
					                                    Group By ExportOrderID, WeightSheetNo, PDDate
					                                    Union
					                                    Select ExportOrderID = ToExportOrderID, WeightSheetNo, PDDate = BTM.TransferDate
					                                    From EPYSLTEX..BookingTransferMaster BTM
					                                    Group By ToExportOrderID, WeightSheetNo, BTM.TransferDate) PDR On PDR.ExportOrderID = ISF.CCID1 and PDR.WeightSheetNo = ISF.WeightSheetNo and PDR.WeightSheetNo = RACR.WeightSheetNo
		                                    Where  ISF.IsOrderCancel = 0 and ISF.IsQtyDecrease = 0 and ISF.IsReturn = 0 and IsOrderCCBreakDown = 0

                                    ),FSW As (
		                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  FactoryID = FSM.DeliveryToID, RM = ''
		                                    From ISF
		                                    Inner Join EPYSLTEX..FinishFabricSWOChild FSC On  FSC.ToBookingID = ISF.BookingID and FSC.ToItemMasterID = ISF.ItemMasterID
		                                    Inner Join EPYSLTEX..FinishFabricSWOMaster FSM On FSM.SWOMasterID = FSC.SWOMasterID and FSM.ToExportOrderID = ISF.CCID1 and FSM.WeightSheetNo = ISF.WeightSheetNo --and FSM.BatchNo = ISF.BatchNo
		                                    Inner Join EPYSLTEX..FinishFabricSWORoll FFR On FFR.SWOMasterID = FSC.SWOMasterID and FFR.SWOChildID = FSC.SWOChildID and FFR.RollID = ISF.RollID 
		                                    Where ISF.IsOrderCancel = 0 and ISF.IsQtyDecrease = 0 and ISF.IsReturn = 0 and IsOrderCCBreakDown = 0
                                    ),SRM As (
		                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  FactoryID = SRM.ReceivingUnitID, RM = ''
		                                    From ISF
		                                    Inner Join EPYSLTEX..SalesReturnChild SRC On  SRC.BookingID = ISF.BookingID and SRC.ItemMasterID = ISF.ItemMasterID
		                                    Inner Join EPYSLTEX..SalesReturnMaster SRM On SRM.ReturnMasterID = SRC.ReturnMasterID and SRM.ExportOrderID = ISF.CCID1 
		                                    Inner Join EPYSLTEX..SalesReturnChildRoll SRCR On SRCR.ReturnMasterID = SRC.ReturnMasterID and SRCR.ReturnChildID = SRC.ReturnChildID  and SRCR.WeightSheetNo = ISF.WeightSheetNo and SRCR.RollID = ISF.RollID
		                                    Where  ISF.IsOrderCancel = 0 and ISF.IsQtyDecrease = 0 and ISF.IsReturn = 1 and ISF.IsReject = 0 and IsOrderCCBreakDown = 0

                                    ),CMBD As (
			                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  CM.FactoryID, RM = ''
			                                    From ISF
			                                    Inner Join (
				                                    Select ChangeID = Max(CM.ChangeID), CM.WeightSheetNo, ExportOrderID, CC.BookingID,  CC.ItemMasterID, CCR.RollID
				                                    From EPYSLTEX..ChangeMaster CM
				                                    Inner Join EPYSLTEX..ChangeChild CC On CC.ChangeID = CM.ChangeID
				                                    Inner Join EPYSLTEX..ChangeChildRoll CCR On CCR.ChangeID = CM.ChangeID and CCR.ChildID = CC.ChildID 
				                                    Where CCR.ReceiveStatusReason in ('Booking qty decreased by Merchant')
				                                    Group By  CM.WeightSheetNo, ExportOrderID, CC.BookingID, CC.ItemMasterID, CCR.RollID
			                                    )MCM On MCM.ExportOrderID = ISF.CCID1 and MCM.BookingID = ISF.BookingID and 
			                                    MCM.ItemMasterID = ISF.ItemMasterID and MCM.RollID = ISF.RollID 
			                                    Inner Join EPYSLTEX..ChangeMaster CM On CM.ChangeID = MCM.ChangeID and CM.ExportOrderID = ISF.CCID1 and CM.WeightSheetNo = ISF.WeightSheetNo
			                                    Left Join (
				                                    Select ExportOrderID, WeightSheetNo, PDDate = Min(PDDate)
				                                    From 
				                                    (Select ExportOrderID, WeightSheetNo, PDDate
				                                    From EPYSLTEX..PDReceive
				                                    Group By ExportOrderID, WeightSheetNo, PDDate
				                                    Union
				                                    Select ExportOrderID, WeightSheetNo, PDDate = IPR.ReceiveDate
				                                    From EPYSLTEX..IssueProcessReceiveMaster IPR
				                                    Group By ExportOrderID, WeightSheetNo, IPR.ReceiveDate
				                                    Union
				                                    Select ExportOrderID = ToExportOrderID, WeightSheetNo, PDDate = BTM.TransferDate
				                                    From EPYSLTEX..BookingTransferMaster BTM
				                                    Group By ToExportOrderID, WeightSheetNo, BTM.TransferDate
				                                    Union
				                                    Select ExportOrderID = ToExportOrderID, WeightSheetNo, PDDate = FSM.SWODate
				                                    From EPYSLTEX..FinishFabricSWOMaster FSM
				                                    Group By ToExportOrderID, WeightSheetNo, FSM.SWODate
			                                    )A Group By ExportOrderID, WeightSheetNo)PR On PR.ExportOrderID = ISF.CCID1 and PR.WeightSheetNo = MCM.WeightSheetNo
			                                    Where ISF.IsQtyDecrease = 1
			                                    Group By ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID, Case When IsNull(PR.PDDate,'') = '' Then CM.ChangeDate Else PR.PDDate End, CM.FactoryID
	
                                    )
                                    ,CMOC As (
			                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  CM.FactoryID, RM = ''
			                                    From ISF
			                                    Inner Join (Select ChangeID = Max(CM.ChangeID), CM.WeightSheetNo, ExportOrderID, CC.BookingID,  CC.ItemMasterID, CCR.RollID
						                                    From EPYSLTEX..ChangeMaster CM
						                                    Inner Join EPYSLTEX..ChangeChild CC On CC.ChangeID = CM.ChangeID
						                                    Inner Join EPYSLTEX..ChangeChildRoll CCR On CCR.ChangeID = CM.ChangeID and CCR.ChildID = CC.ChildID 
						                                    Where CCR.ReceiveStatusReason in ('After production order cancelled by Merchant')
						                                    Group By  CM.WeightSheetNo, ExportOrderID, CC.BookingID, CC.ItemMasterID, CCR.RollID)MCM On MCM.ExportOrderID = ISF.CCID1 and MCM.BookingID = ISF.BookingID and 
						                                    MCM.ItemMasterID = ISF.ItemMasterID and MCM.RollID = ISF.RollID 
			                                    Inner Join EPYSLTEX..ChangeMaster CM On CM.ChangeID = MCM.ChangeID and CM.ExportOrderID = ISF.CCID1 and CM.WeightSheetNo = ISF.WeightSheetNo
			                                    Left Join (Select ExportOrderID, WeightSheetNo, PDDate = Min(PDDate)
						                                    From 
						                                    (Select ExportOrderID, WeightSheetNo, PDDate
						                                    From EPYSLTEX..PDReceive
						                                    Group By ExportOrderID, WeightSheetNo, PDDate
						                                    Union
						                                    Select ExportOrderID, WeightSheetNo, PDDate = IPR.ReceiveDate
						                                    From EPYSLTEX..IssueProcessReceiveMaster IPR
						                                    Group By ExportOrderID, WeightSheetNo, IPR.ReceiveDate
						                                    Union
						                                    Select ExportOrderID = ToExportOrderID, WeightSheetNo, PDDate = BTM.TransferDate
						                                    From EPYSLTEX..BookingTransferMaster BTM
						                                    Group By ToExportOrderID, WeightSheetNo, BTM.TransferDate
						                                    Union
						                                    Select ExportOrderID = ToExportOrderID, WeightSheetNo, PDDate = FSM.SWODate
						                                    From EPYSLTEX..FinishFabricSWOMaster FSM
						                                    Group By ToExportOrderID, WeightSheetNo, FSM.SWODate
						                                    )A Group By ExportOrderID, WeightSheetNo)PR On PR.ExportOrderID = ISF.CCID1 and PR.WeightSheetNo = MCM.WeightSheetNo
			                                    Where ISF.IsOrderCancel = 1
			                                    Group By ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID, Case When IsNull(PR.PDDate,'') = '' Then CM.ChangeDate Else PR.PDDate End, CM.FactoryID
		
                                    )
                                    ,CMCB As (
			                                    Select ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID,  CM.FactoryID, RM = ''
			                                    From ISF
			                                    Inner Join (Select ChangeID = Max(CM.ChangeID), CM.WeightSheetNo, ExportOrderID, CC.BookingID,  CC.ItemMasterID, CCR.RollID
						                                    From EPYSLTEX..ChangeMaster CM
						                                    Inner Join EPYSLTEX..ChangeChild CC On CC.ChangeID = CM.ChangeID
						                                    Inner Join EPYSLTEX..ChangeChildRoll CCR On CCR.ChangeID = CM.ChangeID and CCR.ChildID = CC.ChildID 
						                                    Group By  CM.WeightSheetNo, ExportOrderID, CC.BookingID, CC.ItemMasterID, CCR.RollID)MCM On MCM.ExportOrderID = ISF.CCID1 and MCM.BookingID = ISF.BookingID and 
						                                    MCM.ItemMasterID = ISF.ItemMasterID and MCM.RollID = ISF.RollID 
			                                    Inner Join EPYSLTEX..ChangeMaster CM On CM.ChangeID = MCM.ChangeID and CM.ExportOrderID = ISF.CCID1 and CM.WeightSheetNo = ISF.WeightSheetNo
			                                    Left Join (Select ExportOrderID, WeightSheetNo, PDDate
						                                    From EPYSLTEX..PDReceive
						                                    Group By ExportOrderID, WeightSheetNo, PDDate
						                                    Union
						                                    Select ExportOrderID, WeightSheetNo, PDDate = IPR.ReceiveDate
						                                    From EPYSLTEX..IssueProcessReceiveMaster IPR
						                                    Group By ExportOrderID, WeightSheetNo, IPR.ReceiveDate
						                                    Union
						                                    Select ExportOrderID = ToExportOrderID, WeightSheetNo, PDDate = BTM.TransferDate
						                                    From EPYSLTEX..BookingTransferMaster BTM
						                                    Group By ToExportOrderID, WeightSheetNo, BTM.TransferDate
						                                    Union
						                                    Select ExportOrderID = ToExportOrderID, WeightSheetNo, PDDate = FSM.SWODate
						                                    From EPYSLTEX..FinishFabricSWOMaster FSM
						                                    Group By ToExportOrderID, WeightSheetNo, FSM.SWODate) PR On PR.ExportOrderID = ISF.CCID1 and PR.WeightSheetNo = MCM.WeightSheetNo
			                                    Where ISF.IsOrderCCBreakDown = 1
			                                    Group By ISF.CCID1,ISF.BookingID, ISF.ItemMasterID, ISF.RollID, Case When IsNull(PR.PDDate,'') = '' Then CM.ChangeDate Else PR.PDDate End, CM.FactoryID
		
                                    )
                                    ,FA As (
		                                    Select * From FR
		                                    Union
		                                    Select * From IPR
		                                    Union
		                                    Select * From BTM
		                                    Union
		                                    Select * From RAJ
		                                    Union
		                                    Select * From FSW
		                                    Union
		                                    Select * From SRM
		                                    Union
		                                    Select * From CMBD
		                                    Union
		                                    Select * From CMOC
		                                    Union
		                                    Select * From CMCB
                                    )
                                    ,ISC As (
		                                    Select BookingID, ItemMasterID
		                                    From ISF
		                                    Group By BookingID, ItemMasterID
                                    )
                                    ,BM As (
		                                    Select BC.BookingID, BC.ItemMasterID,   YarnType = ISVYT.SegmentValue, YarnProgram = ETV.ValueName, 
		                                    YarnSubProgram = BCT.YarnSubProgram
		                                    From ISC
		                                    Inner Join {DbNames.EPYSL}..BookingChild BC On BC.BookingID = ISC.BookingID and BC.ItemMasterID = ISC.ItemMasterID
		                                    Inner Join {DbNames.EPYSL}..BookingChildText BCT On BCT.BookingID = ISC.BookingID and BCT.BookingChildID = BC.BookingChildID
		                                    Inner Join {DbNames.EPYSL}..ItemMaster IM On IM.ItemMasterID = ISC.ItemMasterID
		                                    Inner Join {DbNames.EPYSL}..ItemSegmentValue ISVYT On ISVYT.SegmentValueID = BC.A1ValueID
		                                    Inner Join {DbNames.EPYSL}..EntityTypeValue ETV On ETV.ValueID = BC.YarnBrandID
		                                    Group By BC.BookingID, ISVYT.SegmentValue,BC.ItemMasterID, ETV.ValueName, BCT.YarnSubProgram
                                    )
                                    ,SBM As (
		                                    Select SBC.BookingID, BC.ItemMasterID,  YarnType = ISVYT.SegmentValue, YarnProgram = ETV.ValueName, 
		                                    YarnSubProgram = BCT.YarnSubProgram
		                                    From ISC
		                                    Inner Join {DbNames.EPYSL}..SampleBookingConsumption SBC On SBC.BookingID = ISC.BookingID
		                                    Inner Join {DbNames.EPYSL}..SampleBookingConsumptionChild BC On BC.BookingID = SBC.BookingID and BC.ConsumptionID = SBC.ConsumptionID 
		                                    Inner Join {DbNames.EPYSL}..ItemSegmentValue ISVYT On ISVYT.SegmentValueID = SBC.A1ValueID
		                                    Inner Join {DbNames.EPYSL}..SampleBookingConsumptionText BCT On BCT.BookingID = ISC.BookingID and BCT.ConsumptionID = BC.ConsumptionID
		                                    Inner Join {DbNames.EPYSL}..EntityTypeValue ETV On ETV.ValueID = SBC.YarnBrandID 
		                                    Group By SBC.BookingID, BC.ItemMasterID,  ISVYT.SegmentValue,  ETV.ValueName, BCT.YarnSubProgram
                                    )
                                    ,B As (
		                                    Select BookingID, ItemMasterID,  YarnType, YarnProgram, YarnSubProgram
		                                    From BM
		                                    Group By BookingID, ItemMasterID,  YarnType, YarnProgram, YarnSubProgram
                                    )
                                    ,SB As (
		                                    Select BookingID, ItemMasterID,  YarnType, YarnProgram, YarnSubProgram
		                                    From SBM
		                                    Group By BookingID, ItemMasterID,  YarnType, YarnProgram, YarnSubProgram
                                    )
                                    ,BCT As (
		                                    Select BookingID, ItemMasterID,  YarnType, YarnProgram, YarnSubProgram = String_Agg(YarnSubProgram,',') 
		                                    From BM
		                                    Group By BookingID, ItemMasterID, YarnType, YarnProgram
		                                    Union
		                                    Select BookingID, ItemMasterID, YarnType, YarnProgram, YarnSubProgram = String_Agg(YarnSubProgram,',') 
		                                    From SBM
		                                    Group By BookingID, ItemMasterID, YarnType, YarnProgram
                                    ),FF AS(
                                        Select  EOM.ExportOrderNo,FA.ItemMasterID,ISG.SubGroupID,
                                        ISF.WeightSheetNo, ISF.BatchNo, 
                                        --RID = Substring(ISF.BatchNo,4,Len(ISF.BatchNo)), 
                                        ColorName = Case When ISG.SubGroupName = 'Fabric' Then  ISV3.SegmentValue Else ISV5.SegmentValue End,
										ColorID = Case When ISG.SubGroupName = 'Fabric' Then  ISV3.SegmentValueID Else ISV5.SegmentValueID End,
                                        EOM.ExportOrderID,EOM.BuyerID,Buyer = CT.ShortName, FabricConstruction = ISV2.SegmentValue + ' ' + ISV1.SegmentValue, 
                                        --FabricType = Case When ISG.SubGroupName = 'Fabric' And ISV7.SegmentValue = 'Open' and Right(ISV1.SegmentValue,3) != 'Rib'  Then 'Body'
                                        --					When ISG.SubGroupName= 'Fabric' And ISV7.SegmentValue = 'Tube' and Right(ISV1.SegmentValue,3) != 'Rib'  Then 'Tube'
                                        --					When  Right(ISV1.SegmentValue,3) = 'Rib' Then 'Rib'
                                        --					When ISG.SubGroupName= 'Collar' and ISG.SubGroupName != 'Cuff' And ISV1.SegmentValue != 'Flat Knit Hem' and  ISV1.SegmentValue != 'Inner Placket'  Then 'Collar' 
                                        --					When ISG.SubGroupName= 'Cuff' and   ISG.SubGroupName != 'Collar' And ISV1.SegmentValue != 'Flat Knit Hem' and   ISV1.SegmentValue != 'Inner Placket' Then 'Cuff'
                                        --					When (ISG.SubGroupName= 'Collar' Or ISG.SubGroupName= 'Cuff') And ISV1.SegmentValue = 'Flat Knit Hem' Then 'Hem'
                                        --					When (ISG.SubGroupName =  ('Collar') Or ISG.SubGroupName =  ('Cuff'))  And ISV1.SegmentValue = 'Inner Placket' Then 'Placket' Else '' End,

                                        Width = Case When ISG.SubGroupName = 'Fabric' Then ISV5.SegmentValue Else '' End, GSM = Case When ISG.SubGroupName = 'Fabric' Then ISV4.SegmentValue Else '0' End, GSMID = Case When ISG.SubGroupID=1 Then IM.Segment4ValueID Else 0 End, CompositionID = {4},ConstructionID = Case When ISG.SubGroupID=1 Then 0 Else {5} End,
                                        RFDRQtyKg = Case When ISF.ReceiveStatus = 1 and ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsExcess = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                            When ISF.ReceiveStatus = 1 and (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsExcess = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0
				                                            Then Sum(ISF.RollQtyInKGPcs) Else 0 End, 
                                        RFDRQtyPcs = Case When ISF.ReceiveStatus = 1 and (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsExcess = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0
			                                            Then Sum(ISF.RollQtyInKG) Else 0 End,
                                        NFDRQtyKg = Case When ISF.ReceiveStatus = 0 and ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsExcess = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                            When ISF.ReceiveStatus = 0 and (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsExcess = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs)
				                                            Else 0 End,
                                        NFDRQtyPcs = Case When ISF.ReceiveStatus = 0 and (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsExcess = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0
			                                            Then Sum(ISF.RollQtyInKG) Else 0 End, 
                                        ExcessQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsExcess = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
					                                        When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsExcess = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                                        ExcessQtyPcs = Case When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsExcess = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) Else 0 End, 

                                        RejectQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                            When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                                        RejectQtyPcs = Case When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 1 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) Else 0 End, 

                                        BookingQtyDecreasedbyMerchantQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsQtyDecrease = 1 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                            When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 1 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                                        BookingQtyDecreasedbyMerchantQtyPcs = Case When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 1 and ISF.IsOrderCancel = 0 Then Sum(ISF.RollQtyInKG) Else 0 End, 

                                        AfterProductionOrderCancelledbyMerchantQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 1 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) 
				                                            When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 1 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                                        AfterProductionOrderCancelledbyMerchantQtyPcs = Case When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 1 and ISF.IsOrderCCBreakDown = 0 Then Sum(ISF.RollQtyInKG) Else 0 End,

                                        CCBreakDownQtyKg = Case When ISG.SubGroupName = 'Fabric' and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 1 Then Sum(ISF.RollQtyInKG) 
				                                            When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 1 Then Sum(ISF.RollQtyInKGPcs) Else 0 End,
                                        CCBreakDownQtyPcs = Case When (ISG.SubGroupName = 'Collar' Or ISG.SubGroupName = 'Cuff') and ISF.IsReject = 0 and ISF.IsQtyDecrease = 0 and ISF.IsOrderCancel = 0 and ISF.IsOrderCCBreakDown = 1 Then Sum(ISF.RollQtyInKG) Else 0 End,
                                        TotalStockQtyinkg = (Case When ISG.SubGroupName = 'Fabric' Then Sum(ISF.RollQtyInKG) Else 0 End) + 
					                                        (Case When ISG.SubGroupName = 'Fabric' Then 0 Else Sum(ISF.RollQtyInKGPcs) End),
                                        TotalStockQtyinPcs = (Case When ISG.SubGroupName = 'Fabric' Then 0 Else Sum(ISF.RollQtyInKG) End),
                                        TotalRoll = Count(ISF.RollNo),
                                        YarnProgram = BCT.YarnProgram,
                                        ISG.SubGroupName, Segment3Desc = ISV3.SegmentValue, Segment4Desc = ISV4.SegmentValue, Segment5Desc = ISV5.SegmentValue,
                                        ReceivingUnit = CE.ShortName, ISF.TagNo, EWOSeries = Left(EOM.ExportOrderNo,2), BM.AdditionalBooking,
                                        YarnType = BCT.YarnType,
                                        YarnSubProgram = BCT.YarnSubProgram,
                                        BM.Merchandiser, SBC = ISV.SegmentValue, FA.RM, L.LocationName, R.RackNo
                                        From ISF
                                        Inner Join FA On FA.CCID1 = ISF.CCID1 and  FA.BookingID = ISF.BookingID and FA.ItemMasterID = ISF.ItemMasterID and FA.RollID = ISF.RollID --and FA.BatchNo = ISF.BatchNo and FA.WeightSheetNo = ISF.WeightSheetNo
                                        Inner Join {DbNames.EPYSL}..ItemMaster IM On IM.ItemMasterID = ISF.ItemMasterID
                                        Inner Join {DbNames.EPYSL}..ExportOrderMaster EOM On EOM.ExportOrderID = ISF.CCID1
                                        Inner Join {DbNames.EPYSL}..Contacts CT On CT.ContactID = EOM.BuyerID
                                        Inner Join {DbNames.EPYSL}..ContactCategoryTeam CCT On CCT.CategoryTeamID = EOM.BuyerTeamID
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV1 On ISV1.SegmentValueID = IM.Segment1ValueID
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV2 On ISV2.SegmentValueID = IM.Segment2ValueID
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV3 On ISV3.SegmentValueID = IM.Segment3ValueID
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV4 On ISV4.SegmentValueID = IM.Segment4ValueID
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV5 On ISV5.SegmentValueID = IM.Segment5ValueID
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV6 On ISV6.SegmentValueID = IM.Segment6ValueID
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV7 On ISV7.SegmentValueID = IM.Segment7ValueID
                                        Inner Join {DbNames.EPYSL}..ItemSubGroup ISG On ISG.SubGroupID = IM.SubGroupID
                                        Inner Join {DbNames.EPYSL}..CompanyEntity CE On CE.CompanyID = FA.FactoryID
                                        Inner Join (
	                                        Select BM.BookingID, BM.ExportOrderID, BM.AdditionalBooking, Merchandiser = EMP.EmployeeName
	                                        From {DbNames.EPYSL}..BookingMaster BM
	                                        Inner Join {DbNames.EPYSL}..LoginUser LU On LU.UserCode = BM.AddedBy
	                                        Inner Join {DbNames.EPYSL}..Employee EMP On EMP.EmployeeCode = LU.EmployeeCode
	                                        Group By BM.BookingID, BM.ExportOrderID, BM.AdditionalBooking, EMP.EmployeeName  
	                                        Union
	                                        Select SBM.BookingID, SBM.ExportOrderID, SBM.AdditionalBooking, Merchandiser = EMP.EmployeeName
	                                        From {DbNames.EPYSL}..SampleBookingMaster SBM
	                                        Inner Join {DbNames.EPYSL}..LoginUser LU On LU.UserCode = SBM.AddedBy
	                                        Inner Join {DbNames.EPYSL}..Employee EMP On EMP.EmployeeCode = LU.EmployeeCode
	                                        Group By SBM.BookingID, SBM.ExportOrderID, SBM.AdditionalBooking, EMP.EmployeeName
                                        ) BM On BM.BookingID = ISF.BookingID and BM.ExportOrderID = ISF.CCID1
                                        Left Join {DbNames.EPYSL}..ItemSegmentValue ISV On ISV.SegmentValueID = ISF.CCID4
                                        Left Join BCT On BCT.BookingID = ISF.BookingID and BCT.ItemMasterID = ISF.ItemMasterID
                                        Left Join {DbNames.EPYSL}..Location L On L.LocationID = ISF.LocationID
                                        Left Join {DbNames.EPYSL}..Rack R On R.RackID = ISF.RackID
                                        Group By ISF.BookingID,ISF.ItemMasterID, EOM.ExportOrderNo, CT.ShortName,  CCT.TeamName, ISF.BatchNo, ISV1.SegmentValue, ISV2.SegmentValue, ISV3.SegmentValue, 
                                        ISV4.SegmentValue, ISV5.SegmentValue, ISV7.SegmentValue, ISG.SubGroupName, ISF.ReceiveStatus, ISF.WeightSheetNo, ISG.SubGroupName, IsReject, IsExcess, CE.ShortName, 
                                        ISF.TagNo, BCT.YarnType, BCT.YarnProgram, BCT.YarnSubProgram, BM.AdditionalBooking, ISF.IsQtyDecrease,ISF.IsOrderCancel, IsOrderCCBreakDown, 
                                        BM.Merchandiser, ISV.SegmentValue, FA.RM, L.LocationName, R.RackNo
                                        ,EOM.BuyerID,Case When ISG.SubGroupName = 'Fabric' Then  ISV3.SegmentValueID Else ISV5.SegmentValueID End,EOM.ExportOrderID,FA.ItemMasterID,ISG.SubGroupID, Case When ISG.SubGroupID=1 Then IM.Segment4ValueID Else 0 End
                                   ),FinalTabl As(
										Select ExportOrderID, ItemMasterID, WeightSheetNo, CompositionID, GSMID, ConstructionID, SubGroupID, ColorID, ColorName,
										YarnProgram, SubGroupName, Segment3Desc, Segment4Desc,Segment5Desc,ReceivingUnit,TagNo,EWOSeries,AdditionalBooking,
										YarnType, YarnSubProgram, Merchandiser,SBC,	RM,	LocationName,	RackNo,
										ExportOrderNo,BatchNo,Buyer,FabricConstruction,Width,GSM,
										ExcessQtyKg =SUM(ISNULL(FF.ExcessQtyKg,0)), RejectQtyKg = SUM(ISNULL(FF.RejectQtyKg,0)) ,BookingQtyDecreasedbyMerchantQtyKg = SUM(ISNULL(FF.BookingQtyDecreasedbyMerchantQtyKg,0)), AfterProductionOrderCancelledbyMerchantQtyKg = SUM(ISNULL(FF.AfterProductionOrderCancelledbyMerchantQtyKg,0))
                                        
                                        from FF 
										Where ISNULL(ISNULL(ExcessQtyKg,0) + ISNULL(RejectQtyKg,0) + ISNULL(BookingQtyDecreasedbyMerchantQtyKg,0) + ISNULL(AfterProductionOrderCancelledbyMerchantQtyKg,0),0)>0
										Group By  ExportOrderID, ItemMasterID, WeightSheetNo, CompositionID, GSMID, ConstructionID, SubGroupID, ColorID, ColorName,
										YarnProgram, SubGroupName, Segment3Desc, Segment4Desc,Segment5Desc,ReceivingUnit,TagNo,EWOSeries,AdditionalBooking,
										YarnType, YarnSubProgram, Merchandiser,SBC,	RM,	LocationName,	RackNo,
										ExportOrderNo,BatchNo,Buyer,FabricConstruction,Width,GSM

									),ForFilter As(
                                        Select  R_No_New = Row_Number() Over(Order by FF.ExportOrderNo Desc), FF.*, Count(*) Over() TotalRows
                                        
                                        from FinalTabl FF 
										{0}
										
                                    )
                                    Select * from ForFilter Where {1} 
                                    ", paginationInfo.FilterBy, paginationInfo.PageByNew, WhereLogicSQL, GSMId, CompositionId, ConstructionId);
            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<BulkBookingFinishFabricUtilization> oFinishFabricUtilizationList = records.Read<BulkBookingFinishFabricUtilization>().ToList();


                return oFinishFabricUtilizationList;

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }

        public async Task<List<BulkBookingFinishFabricUtilization>> GetFinishFabricUtilizationByYBChildID(int YBChildID)
        {
            var query = "";

            query = String.Format(@"Select * from BulkBookingFinishFabricUtilization where YBChildID = {0}", YBChildID);

            try
            {
                await _connection.OpenAsync();
                var records = await _connection.QueryMultipleAsync(query);
                List<BulkBookingFinishFabricUtilization> oFinishFabricUtilizationList = records.Read<BulkBookingFinishFabricUtilization>().ToList();


                return oFinishFabricUtilizationList;

            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (_connection.State == System.Data.ConnectionState.Open) _connection.Close();
            }
        }


        public async Task<List<FBookingAcknowledgeChildGFUtilization>> GetGreyFabricUtilizationItem(string GSMId, string GSM, string CompositionId, string ConstructionId, string SubGroupID, PaginationInfo paginationInfo)
        {

            var query = "";
            string WhereLogicSQL = "";
            decimal startGSM = 0M, EndGSM = 0M;

            if (GSM.NotNullOrEmpty())
            {
                startGSM = (Convert.ToDecimal(GSM) - 20);
                EndGSM = (Convert.ToDecimal(GSM) + 20);
            }


            if (Convert.ToInt32(SubGroupID) == 1)
            {
                //WhereLogicSQL = String.Format(@" Where CompositionID = {0} AND GSMID = {1}", CompositionId, GSMId);
                WhereLogicSQL = String.Format(@" Where CompositionID = {0} AND GSM between '{1}' and '{2}' ", CompositionId, startGSM, EndGSM);
            }
            else
            {
                WhereLogicSQL = String.Format(@" Where FabricTypeID = {0} AND CompositionID = {1}", ConstructionId, CompositionId);

            }

            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By FabricType ASC" : paginationInfo.OrderBy;

            query = $@" 
            ;With BulkBooking AS(
	            Select BM.ExportOrderID,BM.ExportOrderNo,BC.ItemMasterID,C.ContactID BuyerID,C.ShortName Buyer,
		        FabricTypeID=ISV1.SegmentValueID,FabricType=ISV1.SegmentValue, -- Construction
		        ColorID = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValueID ELSE ISV5.SegmentValueID END, 
		        ColorName = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
		        CompositionID = ISV2.SegmentValueID,Composition = ISV2.SegmentValue,
		        GSMID = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValueID ELSE 0 END,
		        GSM = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END,BC.SubGroupID
	            From {DbNames.EPYSL}..BookingChild BC
	            INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID=BC.BookingID
	            LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.ExportOrderID=BM.ExportOrderID
	            LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID=EOM.BuyerID
	            INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID=BC.ItemMasterID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	            Where Left(EOM.ExportOrderNo,2) >22
                GROUP BY BM.ExportOrderID, BM.ExportOrderNo, BC.ItemMasterID, C.ContactID, C.ShortName, ISV1.SegmentValueID, ISV1.SegmentValue,
		        ISV3.SegmentValueID, ISV5.SegmentValueID, ISV3.SegmentValue, ISV5.SegmentValue, ISV2.SegmentValueID, ISV2.SegmentValue,
		        BC.SubGroupID, ISV4.SegmentValueID, ISV4.SegmentValue, EOM.ExportOrderNo,IM.Segment1ValueID,BC.SubGroupID
            ),SMSBooking As(
				Select ExportOrderID = ISNULL(EOM.ExportOrderID,0), ExportOrderNo = ISNULL(EOM.ExportOrderNo,''),
				BC.ItemMasterID,C.ContactID BuyerID,C.ShortName Buyer,
				FabricTypeID=ISV1.SegmentValueID,FabricType=ISV1.SegmentValue, -- Construction
				ColorID = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValueID ELSE ISV5.SegmentValueID END, 
				ColorName = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
				CompositionID = ISV2.SegmentValueID,Composition = ISV2.SegmentValue,
				GSMID = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValueID ELSE 0 END,
				GSM = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END,BC.SubGroupID
				from {DbNames.EPYSL}..SampleBookingConsumptionChild BC
				INNER JOIN {DbNames.EPYSL}..SampleBookingMaster BM ON BM.BookingID=BC.BookingID
				LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.StyleMasterID=BM.StyleMasterID
				LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID=EOM.BuyerID
				INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID=BC.ItemMasterID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
				Where Left(EOM.ExportOrderNo,2) >22
				GROUP BY ISNULL(EOM.ExportOrderID,0), ISNULL(EOM.ExportOrderNo,''), BC.ItemMasterID, C.ContactID, C.ShortName, ISV1.SegmentValueID, ISV1.SegmentValue,
				ISV3.SegmentValueID, ISV5.SegmentValueID, ISV3.SegmentValue, ISV5.SegmentValue, ISV2.SegmentValueID, ISV2.SegmentValue,
				BC.SubGroupID, ISV4.SegmentValueID, ISV4.SegmentValue, EOM.ExportOrderNo,IM.Segment1ValueID,BC.SubGroupID
			), GFU AS(
					Select * from BulkBooking
					Union
					Select * from SMSBooking
			),FinalList AS(
	            Select * from GFU {WhereLogicSQL}
            )
            SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS RowNumber,
            *, COUNT(*) OVER () AS TotalRows
            FROM
            FinalList
            {paginationInfo.FilterBy}
            {orderBy}
            {paginationInfo.PageBy}";

            return await _service.GetDataAsync<FBookingAcknowledgeChildGFUtilization>(query);
        }
        public async Task<List<BulkBookingDyedYarnUtilization>> GetDyedYarnUtilizationItem(string GSMId, string CompositionId, string ConstructionId, string SubGroupID, PaginationInfo paginationInfo)
        {

            var query = "";
            string WhereLogicSQL = "";

            if (Convert.ToInt32(SubGroupID) == 1)
            {
                WhereLogicSQL = String.Format(@" Where CompositionID = {0} AND GSMID = {1}", CompositionId, GSMId);
            }
            else
            {
                WhereLogicSQL = String.Format(@" Where FabricTypeID = {0} AND CompositionID = {1}", ConstructionId, CompositionId);

            }

            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By FabricType ASC" : paginationInfo.OrderBy;

            query = $@" 
            ;With BulkBooking AS(
	            Select BM.ExportOrderID,BM.ExportOrderNo,BC.ItemMasterID,C.ContactID BuyerID,C.ShortName Buyer,
		        FabricTypeID=ISV1.SegmentValueID,FabricType=ISV1.SegmentValue, -- Construction
		        ColorID = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValueID ELSE ISV5.SegmentValueID END, 
		        ColorName = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
		        CompositionID = ISV2.SegmentValueID,Composition = ISV2.SegmentValue,
		        GSMID = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValueID ELSE 0 END,
		        GSM = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END,BC.SubGroupID
	            From {DbNames.EPYSL}..BookingChild BC
	            INNER JOIN {DbNames.EPYSL}..BookingMaster BM ON BM.BookingID=BC.BookingID
	            LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.ExportOrderID=BM.ExportOrderID
	            LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID=EOM.BuyerID
	            INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID=BC.ItemMasterID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
	            LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
	            Where Left(EOM.ExportOrderNo,2) >22
                GROUP BY BM.ExportOrderID, BM.ExportOrderNo, BC.ItemMasterID, C.ContactID, C.ShortName, ISV1.SegmentValueID, ISV1.SegmentValue,
		        ISV3.SegmentValueID, ISV5.SegmentValueID, ISV3.SegmentValue, ISV5.SegmentValue, ISV2.SegmentValueID, ISV2.SegmentValue,
		        BC.SubGroupID, ISV4.SegmentValueID, ISV4.SegmentValue, EOM.ExportOrderNo,IM.Segment1ValueID,BC.SubGroupID
            ),SMSBooking As(
				Select ExportOrderID = ISNULL(EOM.ExportOrderID,0), ExportOrderNo = ISNULL(EOM.ExportOrderNo,''),
				BC.ItemMasterID,C.ContactID BuyerID,C.ShortName Buyer,
				FabricTypeID=ISV1.SegmentValueID,FabricType=ISV1.SegmentValue, -- Construction
				ColorID = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValueID ELSE ISV5.SegmentValueID END, 
				ColorName = CASE WHEN BC.SubGroupID = 1 THEN ISV3.SegmentValue ELSE ISV5.SegmentValue END, 
				CompositionID = ISV2.SegmentValueID,Composition = ISV2.SegmentValue,
				GSMID = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValueID ELSE 0 END,
				GSM = CASE WHEN BC.SubGroupID = 1 THEN ISV4.SegmentValue ELSE '' END,BC.SubGroupID
				from {DbNames.EPYSL}..SampleBookingConsumptionChild BC
				INNER JOIN {DbNames.EPYSL}..SampleBookingMaster BM ON BM.BookingID=BC.BookingID
				LEFT JOIN {DbNames.EPYSL}..ExportOrderMaster EOM ON EOM.StyleMasterID=BM.StyleMasterID
				LEFT JOIN {DbNames.EPYSL}..Contacts C ON C.ContactID=EOM.BuyerID
				INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID=BC.ItemMasterID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV2 ON ISV2.SegmentValueID = IM.Segment2ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV3 ON ISV3.SegmentValueID = IM.Segment3ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV4 ON ISV4.SegmentValueID = IM.Segment4ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV5 ON ISV5.SegmentValueID = IM.Segment5ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
				LEFT JOIN {DbNames.EPYSL}..ItemSegmentValue ISV7 ON ISV7.SegmentValueID = IM.Segment7ValueID
				Where Left(EOM.ExportOrderNo,2) >22
				GROUP BY ISNULL(EOM.ExportOrderID,0), ISNULL(EOM.ExportOrderNo,''), BC.ItemMasterID, C.ContactID, C.ShortName, ISV1.SegmentValueID, ISV1.SegmentValue,
				ISV3.SegmentValueID, ISV5.SegmentValueID, ISV3.SegmentValue, ISV5.SegmentValue, ISV2.SegmentValueID, ISV2.SegmentValue,
				BC.SubGroupID, ISV4.SegmentValueID, ISV4.SegmentValue, EOM.ExportOrderNo,IM.Segment1ValueID,BC.SubGroupID
			), GFU AS(
					Select * from BulkBooking
					Union
					Select * from SMSBooking
			),FinalList AS(
	            Select * from GFU {WhereLogicSQL}
            )
            SELECT ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS RowNumber,
            *, COUNT(*) OVER () AS TotalRows
            FROM
            FinalList
            {paginationInfo.FilterBy}
            {orderBy}
            {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BulkBookingDyedYarnUtilization>(query);
        }

        public async Task<List<BulkBookingGreyYarnUtilization>> GetGreyYarnUtilizationItem(string ItemMasterId, PaginationInfo paginationInfo)
        {

            var query = "";

            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By YarnStockSetID ASC" : paginationInfo.OrderBy;

            query = $@" 
            ;With FinalList AS(
	            SELECT YarnStockSetID = YSS.YarnStockSetId, ItemMasterID = YSS.ItemMasterId, 
                SpinnerID = YSS.SpinnerId, Spinner = SPIN.ShortName, PhysicalLot = YSS.YarnLotNo,
                YSS.PhysicalCount, Composition = ISV1.SegmentValue, NumaricCount = ISV6.SegmentValue,
                YarnDetails = YSS.YarnCategory,
                YSM.SampleStockQty, YSM.LiabilitiesStockQty, YSM.UnusableStockQty, YSM.LeftoverStockQty
                FROM YarnStockSet YSS
                INNER JOIN YarnStockMaster YSM ON YSM.YarnStockSetId = YSS.YarnStockSetId
                INNER JOIN {DbNames.EPYSL}..ItemMaster IM ON IM.ItemMasterID = YSS.ItemMasterId
                INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV1 ON ISV1.SegmentValueID = IM.Segment1ValueID
                INNER JOIN {DbNames.EPYSL}..ItemSegmentValue ISV6 ON ISV6.SegmentValueID = IM.Segment6ValueID
                LEFT JOIN {DbNames.EPYSL}..Contacts SPIN On SPIN.ContactID = YSS.SpinnerId
                WHERE YSS.SpinnerId > 0 
                And ISNULL(ISNULL(YSM.SampleStockQty,0) +ISNULL(YSM.LiabilitiesStockQty,0) +  ISNULL(YSM.UnusableStockQty,0) + ISNULL(YSM.LeftoverStockQty,0),0) >0
                AND YSS.ItemMasterId = {ItemMasterId}
            )
            SELECT *, COUNT(*) OVER () AS TotalRows
            FROM
            FinalList
            {paginationInfo.FilterBy}
            {orderBy}
            {paginationInfo.PageBy}";

            return await _service.GetDataAsync<BulkBookingGreyYarnUtilization>(query);
        }
        public async Task<List<YarnBookingMaster_New_RevisionReason>> GetYarnRevisionReason(PaginationInfo paginationInfo)
        {
            //setName = 'Pre Set' OR 'Post Set'

            string orderBy = paginationInfo.OrderBy.NullOrEmpty() ? "Order By ReasonName ASC" : paginationInfo.OrderBy;

            var query = $@"
                WITH
                F AS 
                (
                    SELECT A.ReasonID, A.ReasonName 
                    FROM {DbNames.EPYSL}..BookingAdditionalReason A
                    WHERE A.UseInYBooking = 1
                    AND A.ReasonID IN (94,44,41,96,26,43)
                )

                Select *, COUNT(*) Over() TotalRows From F
                {paginationInfo.FilterBy}
                {orderBy}
                {paginationInfo.PageBy}";

            return await _service.GetDataAsync<YarnBookingMaster_New_RevisionReason>(query);
        }

    }
}
