!function (t) { "use strict"; var e = function (t, e) { var n = t.locale || "en-US"; this.parse = function (t) { var e = new Intl.NumberFormat(n), r = e.format(11111).replace(/1/g, "") || ".", o = e.format(1.1).replace(/1/g, ""); return parseFloat(t.replace(new RegExp(" ", "g"), "").replace(new RegExp("\\" + r, "g"), "").replace(new RegExp("\\" + o), ".")) }, this.render = function (t) { var r = parseInt(e.getAttribute("data-decimals")) || 0, o = !("false" === e.getAttribute("data-digit-grouping")); return new Intl.NumberFormat(n, { minimumFractionDigits: r, maximumFractionDigits: r, useGrouping: o }).format(t) } }, n = !1, r = t.fn.val; function o(t, e) { t.addEventListener("mousedown", function (t) { 0 === t.button && (t.preventDefault(), e(t)) }), t.addEventListener("touchstart", function (t) { t.cancelable && t.preventDefault(), e(t) }), t.addEventListener("keydown", function (t) { 32 !== t.keyCode && 13 !== t.keyCode || n || (n = !0, e(t)) }) } t.fn.val = function (t) { if (arguments.length >= 1) for (var e = 0; e < this.length; e++)this[e]["bootstrap-input-spinner"] && this[e].setValue && this[e].setValue(t); return r.apply(this, arguments) }, t.fn.inputSpinner = function (r) { if ("destroy" === r) return this.each(function () { this["bootstrap-input-spinner"] ? this.destroyInputSpinner() : console.warn("element", this, "is no bootstrap-input-spinner") }), this; var a = { decrementButton: "<strong>&minus;</strong>", incrementButton: "<strong>&plus;</strong>", groupClass: "spinner-group-class", buttonParentDivClass: "input-group-prepend", buttonsClass: "btn-outline-secondary", decrementButtonColorClass: "btn-danger", incrementButtonColorClass: "btn-success", buttonsWidth: "40%", textAlign: "center", autoDelay: 500, autoInterval: 50, buttonsOnly: !1, keyboardStepping: !0, locale: navigator.language, editor: e, template: '<div class="input-group ${groupClass}" style="width:100%"><div class="${buttonParentDivClass}"><button class="btn btn-decrement btn-minus ${decrementButtonColorClass} ${buttonsClass}" type="button">${decrementButton}</button></div><input type="text" inputmode="decimal" class="form-control form-control-text-input" /><div class="${buttonParentDivClass}"><button class="btn btn-increment btn-plus ${incrementButtonColorClass} ${buttonsClass}" type="button">${incrementButton}</button></div></div>' }; for (var i in r) a[i] = r[i]; var p = a.template.replace(/\${groupClass}/g, a.groupClass).replace(/\${buttonsWidth}/g, a.buttonsWidth).replace(/\${buttonsClass}/g, a.buttonsClass).replace(/\${decrementButton}/g, a.decrementButton).replace(/\${incrementButton}/g, a.incrementButton).replace(/\${textAlign}/g, a.textAlign).replace(/\${buttonParentDivClass}/g, a.buttonParentDivClass).replace(/\${incrementButtonColorClass}/g, a.incrementButtonColorClass).replace(/\${decrementButtonColorClass}/g, a.decrementButtonColorClass); return this.each(function () { if (this["bootstrap-input-spinner"]) console.warn("element", this, "is already a bootstrap-input-spinner"); else { var e = t(this); e[0]["bootstrap-input-spinner"] = !0, e.hide(), e[0].inputSpinnerEditor = new a.editor(a, this); var r = null, i = null, s = t(p), u = s.find(".btn-decrement"), l = s.find(".btn-increment"), d = s.find("input"), c = t("label[for='" + e.attr("id") + "']"); c[0] || (c = e.closest("label")); var f = null, m = null, g = null; N(); var b = parseFloat(e[0].value), v = e.attr("data-prefix") || "", h = e.attr("data-suffix") || ""; if (v) { var C = t('<span class="input-group-text">' + v + "</span>"); s.find(".input-group-prepend").append(C) } if (h) { var y = t('<span class="input-group-text">' + h + "</span>"); s.find(".input-group-append").prepend(y) } e[0].setValue = function (t) { B(t) }, e[0].destroyInputSpinner = function () { e.prop("required", d.prop("required")), w.disconnect(), E(), d.off("paste input change focusout"), s.remove(), e.show(), e[0]["bootstrap-input-spinner"] = void 0, c[0] && c.attr("for", e.attr("id")) }; var w = new MutationObserver(function () { N(), B(b, !0) }); w.observe(e[0], { attributes: !0 }), e.after(s), B(b), d.on("paste input change focusout", function (t) { var n = d[0].value, r = "focusout" === t.type; B(n = e[0].inputSpinnerEditor.parse(n), r), k(e, t.type) }).on("keydown", function (t) { a.keyboardStepping && (38 === t.which ? (t.preventDefault(), u.prop("disabled") || D(g)) : 40 === t.which && (t.preventDefault(), l.prop("disabled") || D(-g))) }).on("keyup", function (t) { !a.keyboardStepping || 38 !== t.which && 40 !== t.which || (t.preventDefault(), E()) }), o(u[0], function () { u.prop("disabled") || (D(-g), d.keyup()) }), o(l[0], function () { l.prop("disabled") || (D(g), d.keyup()) }), $ = document.body, x = function () { E(), k(e, "change") }, $.addEventListener("mouseup", function (t) { x(t) }), $.addEventListener("touchend", function (t) { x(t) }), $.addEventListener("keyup", function (t) { 32 !== t.keyCode && 13 !== t.keyCode || (n = !1, x(t)) }) } var $, x; function B(t, n) { void 0 === n && (n = !0), isNaN(t) || "" === t ? (e[0].value = "", n && (d[0].value = ""), b = NaN) : (t = parseFloat(t), t = Math.min(Math.max(t, f), m), e[0].value = t, n && (d[0].value = e[0].inputSpinnerEditor.render(t)), b = t) } function k(t, e) { } function D(t) { !function (t) { isNaN(b) && (b = 0); B(Math.round(b / t) * t + t) }(t), E() } function E() { clearTimeout(r), clearTimeout(i) } function N() { e.prop("required") && (d.prop("required", e.prop("required")), e.removeAttr("required")), d.prop("placeholder", e.prop("placeholder")), d.attr("inputmode", e.attr("inputmode") || "decimal"); var t = e.prop("disabled"), n = e.prop("readonly"); d.prop("disabled", t), d.prop("readonly", n || a.buttonsOnly), l.prop("disabled", t || n), u.prop("disabled", t || n), (t || n) && E(); var r = e.prop("class"), o = ""; /form-control-sm/g.test(r) ? o = "input-group-sm" : /form-control-lg/g.test(r) && (o = "input-group-lg"); var i = r.replace(/form-control(-(sm|lg))?/g, ""); s.prop("class", "input-group " + o + " " + a.groupClass), d.prop("class", "form-control " + i), f = isNaN(e.prop("min")) || "" === e.prop("min") ? -1 / 0 : parseFloat(e.prop("min")), m = isNaN(e.prop("max")) || "" === e.prop("max") ? 1 / 0 : parseFloat(e.prop("max")), g = parseFloat(e.prop("step")) || 1, e.attr("hidden") ? s.attr("hidden", e.attr("hidden")) : s.removeAttr("hidden"), e.attr("id") && (d.attr("id", e.attr("id") + "_Spinner"), c[0] && c.attr("for", d.attr("id"))) } }), this } }(jQuery);